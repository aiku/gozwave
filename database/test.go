package database

import (
	"github.com/stampzilla/gozwave/commands"
)

type CommandClass struct {
	ID         commands.ZWaveCommand
	Controlled string
	InNIF      string
	Secure     bool
	NonSecure  bool
	Version    string 
}
type Value struct {
  From int
  To int
  Desc string
  Unit string
}
type parameter struct {
	ID int
	Name string
	Type string
	Description string
	Size int
	Default string

	Values []Value
}
type Device struct{
	Brand string
	Product string
	Description string 

	CommandClasses []*CommandClass
	Parameters []*parameter

	ManufacturerID string
	ProductType string
	ProductID string
}
func New(manufacturerID, productType, productID string) *Device{
	dev := manufacturerID+productType+productID
	switch dev {
	case "00000000":
		return New00000000() // 989-0000-0000-0000-00-00-00-00-00.xml | 00000000
	case "000000000000":
		return New000000000000() // 509-0000-0000-0000-00-00-00-00-00.xml | 000000000000
	case "0000000021ac":
		return New0000000021ac() // 403-0000-0000-21ac-06-03-25-01-10.xml | 0000000021ac
	case "0000000121b4":
		return New0000000121b4() // 925-0000-0001-21b4-01-03-5f-04-16.xml | 0000000121b4
	case "0001444d3330":
		return New0001444d3330() // 4-0001-444d-3330-00-01-63-01-0a.xml | 0001444d3330
	case "000144503030":
		return New000144503030() // 253-0001-4450-3030-00-02-61-00-00.xml | 000144503030
	case "000144573034":
		return New000144573034() // 254-0001-4457-3034-00-02-61-00-00.xml | 000144573034
	case "000144573332":
		return New000144573332() // 89-0001-4457-3332-00-00-00-00-00.xml | 000144573332
	case "000152463133":
		return New000152463133() // 259-0001-5246-3133-00-02-61-00-00.xml | 000152463133
	case "0001524d3330":
		return New0001524d3330() // 15-0001-524d-3330-06-01-63-01-0a.xml | 0001524d3330
	case "000152503030":
		return New000152503030() // 255-0001-5250-3030-00-02-61-00-00.xml | 000152503030
	case "000152523130":
		return New000152523130() // 92-0001-5252-3130-00-00-00-00-00.xml | 000152523130
	case "000152523534":
		return New000152523534() // 257-0001-5252-3534-00-02-61-00-00.xml | 000152523534
	case "000152573033":
		return New000152573033() // 256-0001-5257-3033-00-02-61-00-00.xml | 000152573033
	case "0001544d3330":
		return New0001544d3330() // 3-0001-544d-3330-00-00-00-00-00.xml | 0001544d3330
	case "000154573033":
		return New000154573033() // 258-0001-5457-3033-00-02-61-00-00.xml | 000154573033
	case "000157573330":
		return New000157573330() // 91-0001-5757-3330-00-00-00-00-00.xml | 000157573330
	case "000200038010":
		return New000200038010() // 565-0002-0003-8010-06-03-67-01-00.xml | 000200038010
	case "000200050003":
		return New000200050003() // 489-0002-0005-0003-06-03-43-03-30.xml | 000200050003
	case "000200050004":
		return New000200050004() // 657-0002-0005-0004-06-03-43-01-01.xml | 000200050004
	case "00020005017c":
		return New00020005017c() // 662-0002-0005-017c-06-03-43-09-00.xml | 00020005017c
	case "000200640001":
		return New000200640001() // 5-0002-0064-0001-00-00-00-00-00.xml | 000200640001
	case "00020248a030":
		return New00020248a030() // 877-0002-0248-a030-03-03-43-01-02.xml | 00020248a030
	case "00020248a040":
		return New00020248a040() // 879-0002-0248-a040-03-03-43-01-02.xml | 00020248a040
	case "000280040001":
		return New000280040001() // 362-0002-8004-0001-06-02-43-00-23.xml | 000280040001
	case "000280042000":
		return New000280042000() // 459-0002-8004-2000-01-02-67-05-05.xml | 000280042000
	case "000280042010":
		return New000280042010() // 140-0002-8004-2010-01-02-43-05-02.xml | 000280042010
	case "000280042020":
		return New000280042020() // 158-0002-8004-2020-01-02-43-06-00.xml | 000280042020
	case "000280050001":
		return New000280050001() // 6-0002-8005-0001-06-02-43-02-06.xml | 000280050001
	case "000280070200":
		return New000280070200() // 184-0002-8007-0200-01-02-43-01-0e.xml | 000280070200
	case "000550450653":
		return New000550450653() // 270-0005-5045-0653-00-02-4e-00-00.xml | 000550450653
	case "000550450953":
		return New000550450953() // 384-0005-5045-0953-00-02-4e-00-00.xml | 000550450953
	case "000800010005":
		return New000800010005() // 696-0008-0001-0005-00-00-00-00-00.xml | 000800010005
	case "000800070020":
		return New000800070020() // 219-0008-0007-0020-00-02-4e-00-00.xml | 000800070020
	case "0010454d3532":
		return New0010454d3532() // 402-0010-454d-3532-00-00-00-00-00.xml | 0010454d3532
	case "001045564c32":
		return New001045564c32() // 383-0010-4556-4c32-00-00-00-00-00.xml | 001045564c32
	case "001050533231":
		return New001050533231() // 680-0010-5053-3231-06-03-52-01-04.xml | 001050533231
	case "001a00000000":
		return New001a00000000() // 252-001a-0000-0000-00-00-00-00-00.xml | 001a00000000
	case "001a44490000":
		return New001a44490000() // 251-001a-4449-0000-03-02-28-01-10.xml | 001a44490000
	case "001a44490003":
		return New001a44490003() // 239-001a-4449-0003-03-02-28-01-02.xml | 001a44490003
	case "001a52440000":
		return New001a52440000() // 248-001a-5244-0000-03-02-09-01-0a.xml | 001a52440000
	case "001a534c0000":
		return New001a534c0000() // 249-001a-534c-0000-03-02-09-01-0a.xml | 001a534c0000
	case "001a574d0000":
		return New001a574d0000() // 247-001a-574d-0000-01-02-33-01-08.xml | 001a574d0000
	case "001d01010316":
		return New001d01010316() // 399-001d-0101-0316-00-03-14-00-00.xml | 001d01010316
	case "001d03010209":
		return New001d03010209() // 240-001d-0301-0209-03-02-09-00-04.xml | 001d03010209
	case "001d04010209":
		return New001d04010209() // 243-001d-0401-0209-03-02-09-00-04.xml | 001d04010209
	case "001d07020261":
		return New001d07020261() // 242-001d-0702-0261-01-02-61-00-02.xml | 001d07020261
	case "001e00020001":
		return New001e00020001() // 21-001e-0002-0001-06-02-28-01-0b.xml | 001e00020001
	case "001e00020002":
		return New001e00020002() // 355-001e-0002-0002-06-03-28-03-03.xml | 001e00020002
	case "001e00040001":
		return New001e00040001() // 621-001e-0004-0001-03-03-99-01-03.xml | 001e00040001
	case "002080071398":
		return New002080071398() // 199-0020-8007-1398-02-02-43-02-06.xml | 002080071398
	case "003000010001":
		return New003000010001() // 468-0030-0001-0001-00-00-00-00-00.xml | 003000010001
	case "003352503031":
		return New003352503031() // 38-0033-5250-3031-03-02-28-02-01.xml | 003352503031
	case "003352503032":
		return New003352503032() // 37-0033-5250-3032-03-02-28-02-01.xml | 003352503032
	case "003900000000":
		return New003900000000() // 382-0039-0000-0000-00-03-14-00-00.xml | 003900000000
	case "003900010001":
		return New003900010001() // 386-0039-0001-0001-00-02-16-00-00.xml | 003900010001
	case "003900110001":
		return New003900110001() // 209-0039-0011-0001-04-02-61-01-01.xml | 003900110001
	case "003900110003":
		return New003900110003() // 370-0039-0011-0003-04-03-2a-02-00.xml | 003900110003
	case "00475a525400":
		return New00475a525400() // 380-0047-5a52-5400-00-03-14-00-00.xml | 00475a525400
	case "005600010001":
		return New005600010001() // 171-0056-0001-0001-04-04-0a-01-00.xml | 005600010001
	case "005900010001":
		return New005900010001() // 45-0059-0001-0001-04-01-5b-03-00.xml | 005900010001
	case "005900010002":
		return New005900010002() // 49-0059-0001-0002-06-02-4e-01-00.xml | 005900010002
	case "005900010003":
		return New005900010003() // 51-0059-0001-0003-02-02-4e-02-00.xml | 005900010003
	case "005900010004":
		return New005900010004() // 628-0059-0001-0004-06-03-67-03-00.xml | 005900010004
	case "005900010005":
		return New005900010005() // 859-0059-0001-0005-02-04-05-01-00.xml | 005900010005
	case "005900020002":
		return New005900020002() // 217-0059-0002-0002-00-03-14-00-00.xml | 005900020002
	case "005900030001":
		return New005900030001() // 46-0059-0003-0001-06-02-4e-01-00.xml | 005900030001
	case "005900030002":
		return New005900030002() // 44-0059-0003-0002-06-02-4e-01-00.xml | 005900030002
	case "005900040001":
		return New005900040001() // 529-0059-0004-0001-02-03-43-04-00.xml | 005900040001
	case "005900050001":
		return New005900050001() // 47-0059-0005-0001-01-02-24-01-00.xml | 005900050001
	case "005900050005":
		return New005900050005() // 595-0059-0005-0005-06-03-42-02-00.xml | 005900050005
	case "0059000d0001":
		return New0059000d0001() // 309-0059-000d-0001-06-03-14-00-04.xml | 0059000d0001
	case "0059000d0002":
		return New0059000d0002() // 930-0059-000d-0002-06-03-5f-01-00.xml | 0059000d0002
	case "0059000d0003":
		return New0059000d0003() // 629-0059-000d-0003-06-03-5f-01-00.xml | 0059000d0003
	case "0059000e0001":
		return New0059000e0001() // 633-0059-000e-0001-06-03-5f-01-00.xml | 0059000e0001
	case "0059000e0002":
		return New0059000e0002() // 653-0059-000e-0002-06-03-5f-01-00.xml | 0059000e0002
	case "0059000f0001":
		return New0059000f0001() // 431-0059-000f-0001-06-03-2a-03-00.xml | 0059000f0001
	case "005900100002":
		return New005900100002() // 607-0059-0010-0002-06-03-22-01-00.xml | 005900100002
	case "005900110001":
		return New005900110001() // 666-0059-0011-0001-06-03-5f-01-00.xml | 005900110001
	case "005900110002":
		return New005900110002() // 672-0059-0011-0002-06-03-5f-01-00.xml | 005900110002
	case "006000010001":
		return New006000010001() // 324-0060-0001-0001-00-02-4e-00-00.xml | 006000010001
	case "006000010002":
		return New006000010002() // 390-0060-0001-0002-00-02-40-00-00.xml | 006000010002
	case "006000020001":
		return New006000020001() // 25-0060-0002-0001-06-02-40-01-03.xml | 006000020001
	case "006000030001":
		return New006000030001() // 636-0060-0003-0001-06-03-52-02-00.xml | 006000030001
	case "006000030002":
		return New006000030002() // 886-0060-0003-0002-03-03-5f-01-01.xml | 006000030002
	case "006000030003":
		return New006000030003() // 686-0060-0003-0003-03-03-5f-01-01.xml | 006000030003
	case "006000040001":
		return New006000040001() // 57-0060-0004-0001-04-02-18-00-01.xml | 006000040001
	case "006000040002":
		return New006000040002() // 54-0060-0004-0002-06-02-40-01-01.xml | 006000040002
	case "006000040006":
		return New006000040006() // 688-0060-0004-0006-03-03-5f-01-01.xml | 006000040006
	case "006000040007":
		return New006000040007() // 687-0060-0004-0007-03-03-5f-01-01.xml | 006000040007
	case "006000040008":
		return New006000040008() // 890-0060-0004-0008-03-03-5f-01-01.xml | 006000040008
	case "006000060001":
		return New006000060001() // 589-0060-0006-0001-03-03-34-02-00.xml | 006000060001
	case "006000070001":
		return New006000070001() // 330-0060-0007-0001-00-02-40-00-00.xml | 006000070001
	case "0060000b0001":
		return New0060000b0001() // 123-0060-000b-0001-06-02-40-01-03.xml | 0060000b0001
	case "0060000c0001":
		return New0060000c0001() // 389-0060-000c-0001-00-02-40-00-00.xml | 0060000c0001
	case "0060000d0001":
		return New0060000d0001() // 391-0060-000d-0001-00-02-40-00-00.xml | 0060000d0001
	case "0060000e0001":
		return New0060000e0001() // 216-0060-000e-0001-00-02-4e-00-00.xml | 0060000e0001
	case "006000100001":
		return New006000100001() // 493-0060-0010-0001-06-03-2a-02-00.xml | 006000100001
	case "006001010001":
		return New006001010001() // 59-0060-0101-0001-06-02-09-01-00.xml | 006001010001
	case "006001030001":
		return New006001030001() // 52-0060-0103-0001-04-02-18-00-01.xml | 006001030001
	case "006002020001":
		return New006002020001() // 60-0060-0202-0001-06-02-09-01-00.xml | 006002020001
	case "006344503030":
		return New006344503030() // 261-0063-4450-3030-00-03-14-00-00.xml | 006344503030
	case "006344503130":
		return New006344503130() // 230-0063-4450-3130-00-03-14-00-00.xml | 006344503130
	case "006344573230":
		return New006344573230() // 287-0063-4457-3230-00-02-61-00-00.xml | 006344573230
	case "006350443131":
		return New006350443131() // 782-0063-5044-3131-03-04-05-05-03.xml | 006350443131
	case "006352503030":
		return New006352503030() // 263-0063-5250-3030-00-03-14-00-00.xml | 006352503030
	case "006352503031":
		return New006352503031() // 231-0063-5250-3031-00-03-14-00-00.xml | 006352503031
	case "006352503130":
		return New006352503130() // 229-0063-5250-3130-00-02-61-00-00.xml | 006352503130
	case "006352523530":
		return New006352523530() // 226-0063-5252-3530-00-02-61-00-00.xml | 006352523530
	case "006352573533":
		return New006352573533() // 286-0063-5257-3533-00-02-61-00-00.xml | 006352573533
	case "006400010000":
		return New006400010000() // 33-0064-0001-0000-06-02-33-01-00.xml | 006400010000
	case "006410000002":
		return New006410000002() // 545-0064-1000-0002-03-03-4f-03-00.xml | 006410000002
	case "006410010000":
		return New006410010000() // 31-0064-1001-0000-06-02-24-01-00.xml | 006410010000
	case "006420010000":
		return New006420010000() // 18-0064-2001-0000-01-02-40-01-00.xml | 006420010000
	case "006430010000":
		return New006430010000() // 11-0064-3001-0000-06-02-33-01-00.xml | 006430010000
	case "006440010000":
		return New006440010000() // 32-0064-4001-0000-06-02-33-01-00.xml | 006440010000
	case "006450010000":
		return New006450010000() // 36-0064-5001-0000-00-00-00-00-00.xml | 006450010000
	case "006450020000":
		return New006450020000() // 35-0064-5002-0000-00-00-00-00-00.xml | 006450020000
	case "006450030000":
		return New006450030000() // 34-0064-5003-0000-01-02-64-01-00.xml | 006450030000
	case "006800000000":
		return New006800000000() // 290-0068-0000-0000-00-02-4e-00-00.xml | 006800000000
	case "006800000004":
		return New006800000004() // 293-0068-0000-0004-00-02-43-00-00.xml | 006800000004
	case "006800000005":
		return New006800000005() // 292-0068-0000-0005-00-02-43-00-00.xml | 006800000005
	case "006800000006":
		return New006800000006() // 291-0068-0000-0006-00-02-43-00-00.xml | 006800000006
	case "006b00000000":
		return New006b00000000() // 84-006b-0000-0000-02-02-28-01-07.xml | 006b00000000
	case "00710002035d":
		return New00710002035d() // 64-0071-0002-035d-00-00-00-00-00.xml | 00710002035d
	case "00710004035d":
		return New00710004035d() // 63-0071-0004-035d-00-00-00-00-00.xml | 00710004035d
	case "00710005035d":
		return New00710005035d() // 61-0071-0005-035d-00-00-00-00-00.xml | 00710005035d
	case "007a00000000":
		return New007a00000000() // 86-007a-0000-0000-05-02-1b-01-08.xml | 007a00000000
	case "007a00010002":
		return New007a00010002() // 68-007a-0001-0002-02-02-1b-01-08.xml | 007a00010002
	case "007a00010004":
		return New007a00010004() // 69-007a-0001-0004-02-02-1b-01-08.xml | 007a00010004
	case "007a00020001":
		return New007a00020001() // 67-007a-0002-0001-02-02-1b-01-08.xml | 007a00020001
	case "007a00020004":
		return New007a00020004() // 308-007a-0002-0004-02-03-22-01-02.xml | 007a00020004
	case "007a00030004":
		return New007a00030004() // 66-007a-0003-0004-02-02-1b-01-04.xml | 007a00030004
	case "007a40020001":
		return New007a40020001() // 77-007a-4002-0001-06-02-1b-02-02.xml | 007a40020001
	case "007a40030001":
		return New007a40030001() // 87-007a-4003-0001-06-02-1b-02-02.xml | 007a40030001
	case "007a40030002":
		return New007a40030002() // 74-007a-4003-0002-06-02-1b-02-03.xml | 007a40030002
	case "007a40040001":
		return New007a40040001() // 85-007a-4004-0001-06-02-1b-02-03.xml | 007a40040001
	case "007a80010001":
		return New007a80010001() // 56-007a-8001-0001-06-02-1b-02-02.xml | 007a80010001
	case "007a80018002":
		return New007a80018002() // 70-007a-8001-8002-06-02-1b-02-02.xml | 007a80018002
	case "007a80018003":
		return New007a80018003() // 71-007a-8001-8003-06-02-1b-02-02.xml | 007a80018003
	case "007a80018004":
		return New007a80018004() // 73-007a-8001-8004-06-02-1b-02-04.xml | 007a80018004
	case "007a80020001":
		return New007a80020001() // 55-007a-8002-0001-06-02-1b-02-03.xml | 007a80020001
	case "007a80030001":
		return New007a80030001() // 72-007a-8003-0001-06-02-1b-02-02.xml | 007a80030001
	case "007f00010001":
		return New007f00010001() // 924-007f-0001-0001-01-04-05-04-1f.xml | 007f00010001
	case "008000040001":
		return New008000040001() // 156-0080-0004-0001-77-6f-36-02-01.xml | 008000040001
	case "008100140001":
		return New008100140001() // 112-0081-0014-0001-06-02-4e-01-00.xml | 008100140001
	case "008100a00001":
		return New008100a00001() // 83-0081-00a0-0001-06-02-40-01-00.xml | 008100a00001
	case "008400210109":
		return New008400210109() // 169-0084-0021-0109-06-02-61-01-09.xml | 008400210109
	case "00840021010a":
		return New00840021010a() // 107-0084-0021-010a-06-02-61-01-0a.xml | 00840021010a
	case "00840023010a":
		return New00840023010a() // 198-0084-0023-010a-06-02-61-01-0a.xml | 00840023010a
	case "008403130108":
		return New008403130108() // 294-0084-0313-0108-00-02-61-00-00.xml | 008403130108
	case "008500030001":
		return New008500030001() // 181-0085-0003-0001-03-02-61-03-0a.xml | 008500030001
	case "008500160001":
		return New008500160001() // 461-0085-0016-0001-06-03-67-02-01.xml | 008500160001
	case "008600000000":
		return New008600000000() // 637-0086-0000-0000-00-00-00-00-00.xml | 008600000000
	case "008600010003":
		return New008600010003() // 224-0086-0001-0003-00-02-30-00-00.xml | 008600010003
	case "008600010058":
		return New008600010058() // 804-0086-0001-0058-02-03-53-01-01.xml | 008600010058
	case "00860001005a":
		return New00860001005a() // 801-0086-0001-005a-00-04-05-01-00.xml | 00860001005a
	case "008600020001":
		return New008600020001() // 222-0086-0002-0001-00-02-4e-00-00.xml | 008600020001
	case "008600020004":
		return New008600020004() // 16-0086-0002-0004-06-02-40-01-03.xml | 008600020004
	case "008600020005":
		return New008600020005() // 407-0086-0002-0005-06-03-1c-01-12.xml | 008600020005
	case "008600020009":
		return New008600020009() // 693-0086-0002-0009-00-00-00-00-00.xml | 008600020009
	case "00860002001c":
		return New00860002001c() // 519-0086-0002-001c-03-03-43-01-05.xml | 00860002001c
	case "008600020036":
		return New008600020036() // 538-0086-0002-0036-03-03-43-01-05.xml | 008600020036
	case "00860002004a":
		return New00860002004a() // 640-0086-0002-004a-03-03-5c-01-02.xml | 00860002004a
	case "008600020059":
		return New008600020059() // 833-0086-0002-0059-03-03-5c-01-0a.xml | 008600020059
	case "008600020064":
		return New008600020064() // 824-0086-0002-0064-03-04-05-01-00.xml | 008600020064
	case "008600030006":
		return New008600030006() // 410-0086-0003-0006-03-02-4e-01-2b.xml | 008600030006
	case "00860003000a":
		return New00860003000a() // 604-0086-0003-000a-03-03-43-01-0e.xml | 00860003000a
	case "00860003000b":
		return New00860003000b() // 770-0086-0003-000b-03-03-43-00-00.xml | 00860003000b
	case "00860003000c":
		return New00860003000c() // 42-0086-0003-000c-03-02-4e-01-29.xml | 00860003000c
	case "00860003000d":
		return New00860003000d() // 43-0086-0003-000d-06-02-4e-01-18.xml | 00860003000d
	case "00860003000e":
		return New00860003000e() // 41-0086-0003-000e-06-02-4e-01-17.xml | 00860003000e
	case "008600030018":
		return New008600030018() // 774-0086-0003-0018-03-03-43-02-0f.xml | 008600030018
	case "00860003001a":
		return New00860003001a() // 450-0086-0003-001a-03-03-28-03-00.xml | 00860003001a
	case "00860003003e":
		return New00860003003e() // 781-0086-0003-003e-03-04-05-00-63.xml | 00860003003e
	case "00860003004b":
		return New00860003004b() // 780-0086-0003-004b-00-03-53-02-16.xml | 00860003004b
	case "00860003004e":
		return New00860003004e() // 778-0086-0003-004e-03-03-53-01-16.xml | 00860003004e
	case "008600030060":
		return New008600030060() // 722-0086-0003-0060-03-04-05-00-63.xml | 008600030060
	case "008600030062":
		return New008600030062() // 828-0086-0003-0062-03-04-05-01-00.xml | 008600030062
	case "008600030063":
		return New008600030063() // 726-0086-0003-0063-03-04-05-01-00.xml | 008600030063
	case "008600040025":
		return New008600040025() // 638-0086-0004-0025-06-03-40-01-03.xml | 008600040025
	case "008600040050":
		return New008600040050() // 834-0086-0004-0050-03-03-5c-01-15.xml | 008600040050
	case "008601010058":
		return New008601010058() // 805-0086-0101-0058-02-03-53-01-01.xml | 008601010058
	case "00860101005a":
		return New00860101005a() // 802-0086-0101-005a-00-04-05-01-00.xml | 00860101005a
	case "00860102004a":
		return New00860102004a() // 821-0086-0102-004a-03-03-5c-01-01.xml | 00860102004a
	case "008601020059":
		return New008601020059() // 812-0086-0102-0059-00-03-5c-01-0a.xml | 008601020059
	case "00860102005f":
		return New00860102005f() // 815-0086-0102-005f-03-03-5f-01-1e.xml | 00860102005f
	case "008601020064":
		return New008601020064() // 825-0086-0102-0064-03-04-05-01-00.xml | 008601020064
	case "00860103003e":
		return New00860103003e() // 807-0086-0103-003e-03-04-05-00-63.xml | 00860103003e
	case "00860103004b":
		return New00860103004b() // 799-0086-0103-004b-03-03-53-02-16.xml | 00860103004b
	case "00860103004e":
		return New00860103004e() // 797-0086-0103-004e-03-03-5c-01-16.xml | 00860103004e
	case "008601030060":
		return New008601030060() // 794-0086-0103-0060-03-04-05-00-63.xml | 008601030060
	case "008601030062":
		return New008601030062() // 795-0086-0103-0062-03-04-05-01-01.xml | 008601030062
	case "008601040038":
		return New008601040038() // 827-0086-0104-0038-03-04-05-01-00.xml | 008601040038
	case "008601040050":
		return New008601040050() // 810-0086-0104-0050-03-03-5c-01-15.xml | 008601040050
	case "008602010058":
		return New008602010058() // 806-0086-0201-0058-02-03-53-01-01.xml | 008602010058
	case "00860201005a":
		return New00860201005a() // 803-0086-0201-005a-00-04-05-01-00.xml | 00860201005a
	case "00860202004a":
		return New00860202004a() // 822-0086-0202-004a-03-03-5c-01-01.xml | 00860202004a
	case "008602020059":
		return New008602020059() // 813-0086-0202-0059-03-03-5c-01-0a.xml | 008602020059
	case "008602020064":
		return New008602020064() // 826-0086-0202-0064-03-04-05-01-00.xml | 008602020064
	case "00860203003e":
		return New00860203003e() // 808-0086-0203-003e-03-04-05-00-63.xml | 00860203003e
	case "00860203004b":
		return New00860203004b() // 800-0086-0203-004b-03-03-53-02-16.xml | 00860203004b
	case "00860203004e":
		return New00860203004e() // 798-0086-0203-004e-03-03-5c-01-16.xml | 00860203004e
	case "008602030060":
		return New008602030060() // 793-0086-0203-0060-03-04-05-00-63.xml | 008602030060
	case "008602030062":
		return New008602030062() // 796-0086-0203-0062-03-04-05-01-00.xml | 008602030062
	case "008602040050":
		return New008602040050() // 811-0086-0204-0050-03-03-5c-01-15.xml | 008602040050
	case "008900010101":
		return New008900010101() // 183-0089-0001-0101-04-02-33-01-02.xml | 008900010101
	case "008900020101":
		return New008900020101() // 182-0089-0002-0101-04-02-33-01-02.xml | 008900020101
	case "008900030001":
		return New008900030001() // 191-0089-0003-0001-03-02-33-01-06.xml | 008900030001
	case "008900030101":
		return New008900030101() // 192-0089-0003-0101-03-02-33-01-05.xml | 008900030101
	case "008a00010100":
		return New008a00010100() // 305-008a-0001-0100-01-02-61-01-00.xml | 008a00010100
	case "008a00020100":
		return New008a00020100() // 301-008a-0002-0100-03-02-61-01-00.xml | 008a00020100
	case "008a00030100":
		return New008a00030100() // 265-008a-0003-0100-06-02-61-01-00.xml | 008a00030100
	case "008a00040100":
		return New008a00040100() // 303-008a-0004-0100-06-02-61-01-00.xml | 008a00040100
	case "008a00060100":
		return New008a00060100() // 269-008a-0006-0100-06-02-61-01-00.xml | 008a00060100
	case "008a00070100":
		return New008a00070100() // 302-008a-0007-0100-03-02-61-01-01.xml | 008a00070100
	case "008a00080100":
		return New008a00080100() // 299-008a-0008-0100-06-02-61-01-00.xml | 008a00080100
	case "008a00180100":
		return New008a00180100() // 548-008a-0018-0100-03-03-34-00-3f.xml | 008a00180100
	case "008c00010001":
		return New008c00010001() // 546-008c-0001-0001-01-03-14-01-00.xml | 008c00010001
	case "008e01010101":
		return New008e01010101() // 81-008e-0101-0101-00-00-00-00-00.xml | 008e01010101
	case "009000010001":
		return New009000010001() // 376-0090-0001-0001-06-03-34-03-21.xml | 009000010001
	case "009000010236":
		return New009000010236() // 734-0090-0001-0236-06-03-67-03-39.xml | 009000010236
	case "009201010001":
		return New009201010001() // 160-0092-0101-0001-06-02-61-01-00.xml | 009201010001
	case "009201020002":
		return New009201020002() // 159-0092-0102-0002-06-02-61-01-02.xml | 009201020002
	case "009400010101":
		return New009400010101() // 949-0094-0001-0101-01-04-05-04-20.xml | 009400010101
	case "009400010102":
		return New009400010102() // 983-0094-0001-0102-01-04-05-04-20.xml | 009400010102
	case "009500000000":
		return New009500000000() // 316-0095-0000-0000-02-03-28-00-05.xml | 009500000000
	case "009500010000":
		return New009500010000() // 23-0095-0001-0000-02-02-33-01-0c.xml | 009500010000
	case "009500010001":
		return New009500010001() // 80-0095-0001-0001-02-02-33-01-0c.xml | 009500010001
	case "009500030000":
		return New009500030000() // 79-0095-0003-0000-06-02-33-01-0b.xml | 009500030000
	case "009531010001":
		return New009531010001() // 349-0095-3101-0001-03-03-28-00-05.xml | 009531010001
	case "009531030001":
		return New009531030001() // 347-0095-3103-0001-03-03-28-00-05.xml | 009531030001
	case "009600010001":
		return New009600010001() // 103-0096-0001-0001-03-02-4e-02-37.xml | 009600010001
	case "009600100001":
		return New009600100001() // 497-0096-0010-0001-03-02-4e-02-37.xml | 009600100001
	case "009700000000":
		return New009700000000() // 306-0097-0000-0000-06-03-2a-02-52.xml | 009700000000
	case "009700240045":
		return New009700240045() // 212-0097-0024-0045-03-03-22-01-00.xml | 009700240045
	case "009711824501":
		return New009711824501() // 333-0097-1182-4501-06-02-61-00-27.xml | 009711824501
	case "009761314501":
		return New009761314501() // 992-0097-6131-4101.xml | 009761314501
	case "009761315101":
		return New009761315101() // 944-0097-6131-5101-03-03-43-00-1c.xml | 009761315101
	case "009769415501":
		return New009769415501() // 369-0097-6941-5501-06-02-61-00-20.xml | 009769415501
	case "00980001001e":
		return New00980001001e() // 288-0098-0001-001e-00-02-4e-00-00.xml | 00980001001e
	case "00981e12015e":
		return New00981e12015e() // 449-0098-1e12-015e-03-03-1c-08-07.xml | 00981e12015e
	case "009820020100":
		return New009820020100() // 701-0098-2002-0100-03-03-53-0a-00.xml | 009820020100
	case "009820120100":
		return New009820120100() // 764-0098-2012-0100-03-03-53-0a-00.xml | 009820120100
	case "009850020100":
		return New009850020100() // 246-0098-5002-0100-03-02-4e-07-04.xml | 009850020100
	case "009864010015":
		return New009864010015() // 289-0098-6401-0015-00-03-1c-00-00.xml | 009864010015
	case "00986501000d":
		return New00986501000d() // 700-0098-6501-000d-03-03-28-09-07.xml | 00986501000d
	case "00986e010100":
		return New00986e010100() // 765-0098-6e01-0100-03-03-5f-10-05.xml | 00986e010100
	case "0098c801000c":
		return New0098c801000c() // 942-0098-c801-000c-03-04-05-0b-12.xml | 0098c801000c
	case "009900010002":
		return New009900010002() // 438-0099-0001-0002-01-03-41-01-00.xml | 009900010002
	case "00990001a001":
		return New00990001a001() // 875-0099-0001-a001-07-04-05-04-20.xml | 00990001a001
	case "009900020002":
		return New009900020002() // 285-0099-0002-0002-00-03-21-00-00.xml | 009900020002
	case "009900030004":
		return New009900030004() // 284-0099-0003-0004-00-03-0a-00-00.xml | 009900030004
	case "009900060001":
		return New009900060001() // 282-0099-0006-0001-00-03-0a-00-00.xml | 009900060001
	case "00a500010001":
		return New00a500010001() // 698-00a5-0001-0001-03-03-53-01-01.xml | 00a500010001
	case "00a500020001":
		return New00a500020001() // 694-00a5-0002-0001-02-04-05-01-02.xml | 00a500020001
	case "00a500020002":
		return New00a500020002() // 773-00a5-0002-0002-02-04-05-02-03.xml | 00a500020002
	case "00a500020003":
		return New00a500020003() // 771-00a5-0002-0003-02-04-05-02-03.xml | 00a500020003
	case "010000010020":
		return New010000010020() // 295-0100-0001-0020-00-03-0a-00-00.xml | 010000010020
	case "010200010001":
		return New010200010001() // 296-0102-0001-0001-00-02-4e-00-00.xml | 010200010001
	case "010300010002":
		return New010300010002() // 361-0103-0001-0002-03-03-25-01-0f.xml | 010300010002
	case "010300020002":
		return New010300020002() // 513-0103-0002-0002-03-03-37-06-09.xml | 010300020002
	case "01080002000d":
		return New01080002000d() // 916-0108-0002-000d-03-03-5f-01-0b.xml | 01080002000d
	case "01080002000e":
		return New01080002000e() // 915-0108-0002-000e-03-03-5f-01-0b.xml | 01080002000e
	case "010800200001":
		return New010800200001() // 668-0108-0020-0001-01-03-99-01-00.xml | 010800200001
	case "010828010001":
		return New010828010001() // 891-0108-2801-0001-01-03-5b-07-05.xml | 010828010001
	case "010900000000":
		return New010900000000() // 661-0109-0000-0000-00-00-00-00-00.xml | 010900000000
	case "01090002ffff":
		return New01090002ffff() // 245-0109-0002-ffff-03-03-14-13-12.xml | 01090002ffff
	case "010910010102":
		return New010910010102() // 835-0109-1001-0102-01-03-53-0e-01.xml | 010910010102
	case "010910020202":
		return New010910020202() // 939-0109-1002-0202-02-04-05-0f-09.xml | 010910020202
	case "010910040402":
		return New010910040402() // 946-0109-1004-0402-02-04-18-10-04.xml | 010910040402
	case "010920010101":
		return New010920010101() // 374-0109-2001-0101-03-03-29-04-01.xml | 010920010101
	case "010920010102":
		return New010920010102() // 368-0109-2001-0102-06-03-28-04-54.xml | 010920010102
	case "010920010104":
		return New010920010104() // 465-0109-2001-0104-03-03-53-04-01.xml | 010920010104
	case "010920010105":
		return New010920010105() // 547-0109-2001-0105-03-03-5c-05-01.xml | 010920010105
	case "010920010106":
		return New010920010106() // 950-0109-2001-0106-03-04-05-05-01.xml | 010920010106
	case "0109200101a1":
		return New0109200101a1() // 979-0109-2001-01a1-03-04-05-05-01.xml | 0109200101a1
	case "010920020201":
		return New010920020201() // 197-0109-2002-0201-06-02-4e-00-00.xml | 010920020201
	case "010920020202":
		return New010920020202() // 375-0109-2002-0202-03-03-29-03-0a.xml | 010920020202
	case "010920020203":
		return New010920020203() // 608-0109-2002-0203-06-03-34-04-54.xml | 010920020203
	case "010920020204":
		return New010920020204() // 464-0109-2002-0204-03-03-53-03-10.xml | 010920020204
	case "010920020205":
		return New010920020205() // 940-0109-2002-0205-03-04-05-08-02.xml | 010920020205
	case "010920030302":
		return New010920030302() // 412-0109-2003-0302-06-03-28-04-54.xml | 010920030302
	case "010920040403":
		return New010920040403() // 434-0109-2004-0403-06-03-34-03-05.xml | 010920040403
	case "010920040404":
		return New010920040404() // 582-0109-2004-0404-03-03-5f-0e-08.xml | 010920040404
	case "0109200404a4":
		return New0109200404a4() // 588-0109-2004-04a4-03-03-5f-0e-06.xml | 0109200404a4
	case "010920050503":
		return New010920050503() // 344-0109-2005-0503-06-03-2a-01-41.xml | 010920050503
	case "010920050505":
		return New010920050505() // 537-0109-2005-0505-03-03-53-0e-03.xml | 010920050505
	case "010920050508":
		return New010920050508() // 758-0109-2005-0508-03-04-05-0f-05.xml | 010920050508
	case "010920060610":
		return New010920060610() // 155-0109-2006-0610-03-02-61-03-0f.xml | 010920060610
	case "010920060620":
		return New010920060620() // 377-0109-2006-0620-03-03-40-05-05.xml | 010920060620
	case "010920070703":
		return New010920070703() // 456-0109-2007-0703-06-03-52-01-10.xml | 010920070703
	case "010920070706":
		return New010920070706() // 571-0109-2007-0706-03-03-5f-01-21.xml | 010920070706
	case "010920080803":
		return New010920080803() // 457-0109-2008-0803-06-03-52-01-10.xml | 010920080803
	case "010920090901":
		return New010920090901() // 195-0109-2009-0901-06-03-22-01-41.xml | 010920090901
	case "010920090908":
		return New010920090908() // 702-0109-2009-0908-03-04-05-0f-05.xml | 010920090908
	case "0109200a0a02":
		return New0109200a0a02() // 340-0109-200a-0a02-06-03-28-04-54.xml | 0109200a0a02
	case "0109200c0c02":
		return New0109200c0c02() // 954-0109-200c-0c02-06-03-34-02-01.xml | 0109200c0c02
	case "0109200c0c06":
		return New0109200c0c06() // 850-0109-200c-0c06-03-04-05-05-01.xml | 0109200c0c06
	case "0109200f0f02":
		return New0109200f0f02() // 339-0109-200f-0f02-06-03-28-03-05.xml | 0109200f0f02
	case "0109200f0f04":
		return New0109200f0f04() // 836-0109-200f-0f04-03-04-05-05-01.xml | 0109200f0f04
	case "010920121203":
		return New010920121203() // 498-0109-2012-1203-06-03-29-01-4a.xml | 010920121203
	case "010920121206":
		return New010920121206() // 623-0109-2012-1206-03-03-5f-0e-07.xml | 010920121206
	case "010920121207":
		return New010920121207() // 759-0109-2012-1207-03-04-05-0f-05.xml | 010920121207
	case "010920141401":
		return New010920141401() // 373-0109-2014-1401-06-03-1c-02-01.xml | 010920141401
	case "010920171717":
		return New010920171717() // 957-0109-2017-1717-06-00-00-00-00.xml | 010920171717
	case "010920171719":
		return New010920171719() // 845-0109-2017-1719-03-04-05-0f-08.xml | 010920171719
	case "010920181805":
		return New010920181805() // 904-0109-2018-1805-03-04-05-16-02.xml | 010920181805
	case "0109201a1a02":
		return New0109201a1a02() // 572-0109-201a-1a02-03-03-5f-14-07.xml | 0109201a1a02
	case "0109201b1b02":
		return New0109201b1b02() // 754-0109-201b-1b02-02-04-05-04-03.xml | 0109201b1b02
	case "0109201c1c03":
		return New0109201c1c03() // 931-0109-201c-1c03-03-04-05-05-01.xml | 0109201c1c03
	case "0109201f1f10":
		return New0109201f1f10() // 902-0109-201f-1f10-03-04-05-06-01.xml | 0109201f1f10
	case "0109201f1f20":
		return New0109201f1f20() // 840-0109-201f-1f20-03-04-05-06-01.xml | 0109201f1f20
	case "010920212101":
		return New010920212101() // 945-0109-2021-2101-03-04-05-05-01.xml | 010920212101
	case "010920222201":
		return New010920222201() // 974-0109-2022-2201-03-04-05-05-01.xml | 010920222201
	case "010930010104":
		return New010930010104() // 525-0109-3001-0104-06-03-43-0d-06.xml | 010930010104
	case "010a11004900":
		return New010a11004900() // 163-010a-1100-4900-06-03-14-02-02.xml | 010a11004900
	case "010a11004a00":
		return New010a11004a00() // 165-010a-1100-4a00-06-03-14-02-02.xml | 010a11004a00
	case "010a12005100":
		return New010a12005100() // 162-010a-1200-5100-06-03-14-03-03.xml | 010a12005100
	case "010a12005200":
		return New010a12005200() // 164-010a-1200-5200-06-03-14-02-02.xml | 010a12005200
	case "010a13005a00":
		return New010a13005a00() // 166-010a-1300-5a00-06-03-14-03-04.xml | 010a13005a00
	case "010b43110001":
		return New010b43110001() // 213-010b-4311-0001-00-03-0a-00-00.xml | 010b43110001
	case "010c00010001":
		return New010c00010001() // 531-010c-0001-0001-00-00-00-00-00.xml | 010c00010001
	case "010e00030002":
		return New010e00030002() // 603-010e-0003-0002-03-02-4e-02-04.xml | 010e00030002
	case "010e00080001":
		return New010e00080001() // 650-010e-0008-0001-03-03-63-01-01.xml | 010e00080001
	case "010e00080002":
		return New010e00080002() // 929-010e-0008-0002-03-03-63-01-01.xml | 010e00080002
	case "010f00000000":
		return New010f00000000() // 555-010f-0000-0000-03-03-52-25-25.xml | 010f00000000
	case "010f00011000":
		return New010f00011000() // 776-010f-0001-1000-01-03-43-04-00.xml | 010f00011000
	case "010f00021000":
		return New010f00021000() // 747-010f-0002-1000-01-03-43-04-00.xml | 010f00021000
	case "010f00021001":
		return New010f00021001() // 735-010f-0002-1001-01-03-43-04-00.xml | 010f00021001
	case "010f01000103":
		return New010f01000103() // 334-010f-0100-0103-03-03-14-01-03.xml | 010f01000103
	case "010f01000109":
		return New010f01000109() // 354-010f-0100-0109-03-03-2a-01-09.xml | 010f01000109
	case "010f01021000":
		return New010f01021000() // 750-010f-0102-1000-03-04-05-03-02.xml | 010f01021000
	case "010f01022000":
		return New010f01022000() // 830-010f-0102-2000-03-04-05-03-03.xml | 010f01022000
	case "010f02000103":
		return New010f02000103() // 337-010f-0200-0103-03-03-14-01-03.xml | 010f02000103
	case "010f02000109":
		return New010f02000109() // 353-010f-0200-0109-03-03-2a-01-09.xml | 010f02000109
	case "010f0200100a":
		return New010f0200100a() // 639-010f-0200-100a-03-03-2a-02-01.xml | 010f0200100a
	case "010f03000103":
		return New010f03000103() // 335-010f-0300-0103-03-03-14-01-03.xml | 010f03000103
	case "010f03000109":
		return New010f03000109() // 352-010f-0300-0109-03-03-2a-01-09.xml | 010f03000109
	case "010f03011001":
		return New010f03011001() // 492-010f-0301-1001-03-03-34-16-16.xml | 010f03011001
	case "010f04000103":
		return New010f04000103() // 336-010f-0400-0103-03-03-14-01-03.xml | 010f04000103
	case "010f04000109":
		return New010f04000109() // 351-010f-0400-0109-03-03-2a-01-09.xml | 010f04000109
	case "010f0400100a":
		return New010f0400100a() // 665-010f-0400-100a-03-03-2a-02-01.xml | 010f0400100a
	case "010f05010101":
		return New010f05010101() // 428-010f-0501-0101-03-03-22-03-31.xml | 010f05010101
	case "010f05010102":
		return New010f05010102() // 514-010f-0501-0102-03-03-28-03-31.xml | 010f05010102
	case "010f06001000":
		return New010f06001000() // 517-010f-0600-1000-03-03-52-24-24.xml | 010f06001000
	case "010f06020700":
		return New010f06020700() // 900-010f-0602-0700-03-04-05-03-02.xml | 010f06020700
	case "010f07001000":
		return New010f07001000() // 553-010f-0700-1000-03-03-67-02-05.xml | 010f07001000
	case "010f07011001":
		return New010f07011001() // 766-010f-0701-1001-03-04-05-03-02.xml | 010f07011001
	case "010f07012001":
		return New010f07012001() // 867-010f-0701-2001-03-04-05-03-02.xml | 010f07012001
	case "010f08001001":
		return New010f08001001() // 540-010f-0800-1001-03-03-43-02-04.xml | 010f08001001
	case "010f08004001":
		return New010f08004001() // 601-010f-0800-4001-03-03-43-02-06.xml | 010f08004001
	case "010f08011001":
		return New010f08011001() // 673-010f-0801-1001-03-04-05-03-02.xml | 010f08011001
	case "010f08012001":
		return New010f08012001() // 785-010f-0801-2001-03-04-05-03-02.xml | 010f08012001
	case "010f09004000":
		return New010f09004000() // 491-010f-0900-4000-03-03-34-16-16.xml | 010f09004000
	case "010f0b001001":
		return New010f0b001001() // 518-010f-0b00-1001-03-03-67-24-24.xml | 010f0b001001
	case "010f0b004001":
		return New010f0b004001() // 651-010f-0b00-4001-03-03-43-19-19.xml | 010f0b004001
	case "010f0b011002":
		return New010f0b011002() // 745-010f-0b01-1002-03-04-05-03-02.xml | 010f0b011002
	case "010f0b012002":
		return New010f0b012002() // 868-010f-0b01-2002-03-04-05-03-02.xml | 010f0b012002
	case "010f0c001000":
		return New010f0c001000() // 552-010f-0c00-1000-03-03-67-02-05.xml | 010f0c001000
	case "010f0c021002":
		return New010f0c021002() // 675-010f-0c02-1002-03-04-05-03-02.xml | 010f0c021002
	case "010f0d011000":
		return New010f0d011000() // 928-010f-0d01-1000-03-04-05-03-02.xml | 010f0d011000
	case "010f0d012000":
		return New010f0d012000() // 963-010f-0d01-2000-03-04-05-03-02.xml | 010f0d012000
	case "010f0d013000":
		return New010f0d013000() // 964-010f-0d01-3000-03-04-05-03-02.xml | 010f0d013000
	case "010f0d014000":
		return New010f0d014000() // 971-010f-0d01-4000-03-04-05-03-02.xml | 010f0d014000
	case "011024110001":
		return New011024110001() // 385-0110-2411-0001-00-02-4e-00-00.xml | 011024110001
	case "011110000010":
		return New011110000010() // 708-0111-1000-0010-06-03-52-02-12.xml | 011110000010
	case "011182000200":
		return New011182000200() // 196-0111-8200-0200-04-02-4e-02-60.xml | 011182000200
	case "011344503030":
		return New011344503030() // 232-0113-4450-3030-06-03-14-05-15.xml | 011344503030
	case "011345565435":
		return New011345565435() // 264-0113-4556-5435-00-03-14-00-00.xml | 011345565435
	case "011400010001":
		return New011400010001() // 220-0114-0001-0001-00-02-4e-00-00.xml | 011400010001
	case "011500000000":
		return New011500000000() // 917-0115-0000-0000-01-03-63-01-00.xml | 011500000000
	case "011500010001":
		return New011500010001() // 882-0115-0001-0001-01-03-63-02-00.xml | 011500010001
	case "011500040002":
		return New011500040002() // 842-0115-0004-0002-03-04-05-01-02.xml | 011500040002
	case "011500040003":
		return New011500040003() // 973-0115-0004-0003-03-04-05-01-00.xml | 011500040003
	case "011500040004":
		return New011500040004() // 947-0115-0004-0004-03-04-05-01-02.xml | 011500040004
	case "011500240001":
		return New011500240001() // 856-0115-0024-0001-03-03-43-01-04.xml | 011500240001
	case "011501000001":
		return New011501000001() // 488-0115-0100-0001-03-03-43-01-04.xml | 011501000001
	case "011501000004":
		return New011501000004() // 501-0115-0100-0004-03-03-2a-01-03.xml | 011501000004
	case "011501000101":
		return New011501000101() // 562-0115-0100-0101-03-03-5c-01-00.xml | 011501000101
	case "011501000103":
		return New011501000103() // 755-0115-0100-0103-02-03-63-01-01.xml | 011501000103
	case "011501000200":
		return New011501000200() // 664-0115-0100-0200-03-03-63-02-00.xml | 011501000200
	case "011501000201":
		return New011501000201() // 768-0115-0100-0201-03-04-05-01-00.xml | 011501000201
	case "011501000400":
		return New011501000400() // 751-0115-0100-0400-03-04-05-01-00.xml | 011501000400
	case "011501000401":
		return New011501000401() // 583-0115-0100-0401-03-03-43-01-04.xml | 011501000401
	case "011501100001":
		return New011501100001() // 985-0115-0110-0001-03-04-05-00-46.xml | 011501100001
	case "011502000001":
		return New011502000001() // 425-0115-0200-0001-06-03-2a-01-03.xml | 011502000001
	case "011502010001":
		return New011502010001() // 521-0115-0201-0001-06-03-43-02-01.xml | 011502010001
	case "011502010002":
		return New011502010002() // 523-0115-0201-0002-06-03-43-02-01.xml | 011502010002
	case "011502010003":
		return New011502010003() // 524-0115-0201-0003-06-03-43-02-01.xml | 011502010003
	case "011510000001":
		return New011510000001() // 558-0115-1000-0001-03-03-2a-01-08.xml | 011510000001
	case "011510000002":
		return New011510000002() // 273-0115-1000-0002-03-03-2a-01-08.xml | 011510000002
	case "011510000003":
		return New011510000003() // 271-0115-1000-0003-03-03-2a-01-08.xml | 011510000003
	case "011510000004":
		return New011510000004() // 154-0115-1000-0004-02-03-1c-01-01.xml | 011510000004
	case "011510000005":
		return New011510000005() // 321-0115-1000-0005-03-03-2a-01-00.xml | 011510000005
	case "011510000009":
		return New011510000009() // 906-0115-1000-0009-03-04-05-02-01.xml | 011510000009
	case "011510000100":
		return New011510000100() // 564-0115-1000-0100-03-03-43-01-00.xml | 011510000100
	case "011510000200":
		return New011510000200() // 605-0115-1000-0200-03-03-63-02-00.xml | 011510000200
	case "011510000300":
		return New011510000300() // 576-0115-1000-0300-03-03-43-01-01.xml | 011510000300
	case "011510001001":
		return New011510001001() // 598-0115-1000-1001-03-03-63-02-00.xml | 011510001001
	case "011510001003":
		return New011510001003() // 600-0115-1000-1003-03-03-63-02-00.xml | 011510001003
	case "011511000001":
		return New011511000001() // 322-0115-1100-0001-03-03-2a-01-00.xml | 011511000001
	case "011511000002":
		return New011511000002() // 432-0115-1100-0002-06-03-2a-01-00.xml | 011511000002
	case "011600010001":
		return New011600010001() // 398-0116-0001-0001-00-02-40-00-00.xml | 011600010001
	case "011600020001":
		return New011600020001() // 388-0116-0002-0001-00-02-4e-00-00.xml | 011600020001
	case "011600100001":
		return New011600100001() // 400-0116-0010-0001-00-02-61-00-00.xml | 011600100001
	case "011600110001":
		return New011600110001() // 396-0116-0011-0001-00-02-61-00-00.xml | 011600110001
	case "011600110002":
		return New011600110002() // 397-0116-0011-0002-00-02-61-00-00.xml | 011600110002
	case "011700010080":
		return New011700010080() // 816-0117-0001-0080-06-04-05-01-00.xml | 011700010080
	case "011800030002":
		return New011800030002() // 752-0118-0003-0002-03-04-05-02-00.xml | 011800030002
	case "011800030008":
		return New011800030008() // 839-0118-0003-0008-03-04-05-02-00.xml | 011800030008
	case "011800040002":
		return New011800040002() // 986-0118-0004-0002-03-04-05-02-00.xml | 011800040002
	case "011801010103":
		return New011801010103() // 414-0118-0101-0103-06-03-28-01-04.xml | 011801010103
	case "011801021020":
		return New011801021020() // 341-0118-0102-1020-06-02-61-01-03.xml | 011801021020
	case "011802020611":
		return New011802020611() // 423-0118-0202-0611-06-03-28-01-0c.xml | 011802020611
	case "011808080808":
		return New011808080808() // 424-0118-0808-0808-06-03-28-01-03.xml | 011808080808
	case "011a01010101":
		return New011a01010101() // 206-011a-0101-0101-00-00-00-00-00.xml | 011a01010101
	case "011a01010102":
		return New011a01010102() // 203-011a-0101-0102-00-00-00-00-00.xml | 011a01010102
	case "011a01010103":
		return New011a01010103() // 202-011a-0101-0103-00-00-00-00-00.xml | 011a01010103
	case "011a01010603":
		return New011a01010603() // 365-011a-0101-0603-06-03-2a-03-01.xml | 011a01010603
	case "011a01020201":
		return New011a01020201() // 204-011a-0102-0201-06-02-61-03-14.xml | 011a01020201
	case "011a01020202":
		return New011a01020202() // 205-011a-0102-0202-06-02-40-03-0c.xml | 011a01020202
	case "011a01110101":
		return New011a01110101() // 953-011a-0111-0101-06-04-18-05-0a.xml | 011a01110101
	case "011a01110105":
		return New011a01110105() // 959-011a-0111-0105-06-04-18-05-0a.xml | 011a01110105
	case "011a01110201":
		return New011a01110201() // 988-011a-0111-0201-06-04-18-05-0a.xml | 011a01110201
	case "011a01110202":
		return New011a01110202() // 987-011a-0111-0202-06-04-18-05-0a.xml | 011a01110202
	case "011a01110605":
		return New011a01110605() // 956-011a-0111-0605-06-04-18-05-0a.xml | 011a01110605
	case "011f00010001":
		return New011f00010001() // 392-011f-0001-0001-00-03-28-00-00.xml | 011f00010001
	case "011f00010002":
		return New011f00010002() // 393-011f-0001-0002-00-03-1c-00-00.xml | 011f00010002
	case "011f00010003":
		return New011f00010003() // 394-011f-0001-0003-00-03-1c-00-00.xml | 011f00010003
	case "012100010001":
		return New012100010001() // 401-0121-0001-0001-00-03-14-00-00.xml | 012100010001
	case "012200010001":
		return New012200010001() // 318-0122-0001-0001-03-03-21-00-10.xml | 012200010001
	case "012300000000":
		return New012300000000() // 409-0123-0000-0000-00-00-00-00-00.xml | 012300000000
	case "012300010000":
		return New012300010000() // 319-0123-0001-0000-03-03-2d-01-00.xml | 012300010000
	case "012300010001":
		return New012300010001() // 404-0123-0001-0001-03-03-2d-01-06.xml | 012300010001
	case "012300020000":
		return New012300020000() // 710-0123-0002-0000-03-03-53-01-00.xml | 012300020000
	case "012301020102":
		return New012301020102() // 472-0123-0102-0102-03-03-45-01-00.xml | 012301020102
	case "012301030103":
		return New012301030103() // 471-0123-0103-0103-03-03-45-01-00.xml | 012301030103
	case "012301040104":
		return New012301040104() // 527-0123-0104-0104-03-03-45-01-00.xml | 012301040104
	case "012303010001":
		return New012303010001() // 415-0123-0301-0001-06-03-2d-00-04.xml | 012303010001
	case "012306010001":
		return New012306010001() // 416-0123-0601-0001-06-03-2d-00-04.xml | 012306010001
	case "012380000000":
		return New012380000000() // 408-0123-8000-0000-00-00-00-00-00.xml | 012380000000
	case "012380000001":
		return New012380000001() // 528-0123-8000-0001-00-00-00-00-00.xml | 012380000001
	case "012600010006":
		return New012600010006() // 442-0126-0001-0006-00-03-36-01-00.xml | 012600010006
	case "012800000000":
		return New012800000000() // 310-0128-0000-0000-03-03-14-01-18.xml | 012800000000
	case "012801280000":
		return New012801280000() // 446-0128-0128-0000-00-00-00-00-00.xml | 012801280000
	case "012900010000":
		return New012900010000() // 313-0129-0001-0000-03-03-21-03-30.xml | 012900010000
	case "012900020000":
		return New012900020000() // 315-0129-0002-0000-03-03-22-14-20.xml | 012900020000
	case "013000010001":
		return New013000010001() // 311-0130-0001-0001-00-00-00-00-00.xml | 013000010001
	case "013000020000":
		return New013000020000() // 674-0130-0002-0000-03-04-05-00-15.xml | 013000020000
	case "013100010001":
		return New013100010001() // 707-0131-0001-0001-07-04-05-04-20.xml | 013100010001
	case "013100010002":
		return New013100010002() // 748-0131-0001-0002-07-04-05-04-20.xml | 013100010002
	case "013100010003":
		return New013100010003() // 749-0131-0001-0003-07-04-05-04-20.xml | 013100010003
	case "013100020002":
		return New013100020002() // 587-0131-0002-0002-03-03-5c-01-06.xml | 013100020002
	case "013730010002":
		return New013730010002() // 463-0137-3001-0002-06-03-22-01-01.xml | 013730010002
	case "013800010002":
		return New013800010002() // 458-0138-0001-0002-06-03-52-00-03.xml | 013800010002
	case "013b10001828":
		return New013b10001828() // 372-013b-1000-1828-01-03-2a-01-01.xml | 013b10001828
	case "013c00000000":
		return New013c00000000() // 753-013c-0000-0000-00-00-00-00-00.xml | 013c00000000
	case "013c00010001":
		return New013c00010001() // 606-013c-0001-0001-03-03-53-01-00.xml | 013c00010001
	case "013c00010003":
		return New013c00010003() // 453-013c-0001-0003-00-03-41-01-00.xml | 013c00010003
	case "013c00010004":
		return New013c00010004() // 487-013c-0001-0004-03-03-41-01-00.xml | 013c00010004
	case "013c00010006":
		return New013c00010006() // 451-013c-0001-0006-03-03-41-01-00.xml | 013c00010006
	case "013c00010010":
		return New013c00010010() // 615-013c-0001-0010-03-03-53-01-0b.xml | 013c00010010
	case "013c00010011":
		return New013c00010011() // 579-013c-0001-0011-03-03-53-01-05.xml | 013c00010011
	case "013c00010012":
		return New013c00010012() // 652-013c-0001-0012-03-03-5f-01-04.xml | 013c00010012
	case "013c00010013":
		return New013c00010013() // 619-013c-0001-0013-03-03-5f-01-04.xml | 013c00010013
	case "013c00010015":
		return New013c00010015() // 614-013c-0001-0015-03-03-5f-01-01.xml | 013c00010015
	case "013c00010028":
		return New013c00010028() // 864-013c-0001-0028-03-04-05-01-03.xml | 013c00010028
	case "013c00010038":
		return New013c00010038() // 932-013c-0001-0038-03-04-05-01-04.xml | 013c00010038
	case "013c00020002":
		return New013c00020002() // 585-013c-0002-0002-06-03-5c-01-00.xml | 013c00020002
	case "013c0002000c":
		return New013c0002000c() // 910-013c-0002-000c-03-03-5f-01-0e.xml | 013c0002000c
	case "013c0002000d":
		return New013c0002000d() // 909-013c-0002-000d-03-03-5f-01-0b.xml | 013c0002000d
	case "013c0002001e":
		return New013c0002001e() // 602-013c-0002-001e-03-03-5f-01-0d.xml | 013c0002001e
	case "013c0002001f":
		return New013c0002001f() // 620-013c-0002-001f-03-03-5f-01-05.xml | 013c0002001f
	case "013c00020020":
		return New013c00020020() // 721-013c-0002-0020-03-04-05-01-08.xml | 013c00020020
	case "013c00020021":
		return New013c00020021() // 715-013c-0002-0021-03-04-05-01-08.xml | 013c00020021
	case "013c0002002b":
		return New013c0002002b() // 714-013c-0002-002b-03-04-05-01-08.xml | 013c0002002b
	case "013c0004000a":
		return New013c0004000a() // 612-013c-0004-000a-03-03-5f-01-08.xml | 013c0004000a
	case "013c0006001a":
		return New013c0006001a() // 873-013c-0006-001a-03-04-05-01-01.xml | 013c0006001a
	case "013c0008001d":
		return New013c0008001d() // 613-013c-0008-001d-03-03-5f-01-0b.xml | 013c0008001d
	case "013c00080027":
		return New013c00080027() // 872-013c-0008-0027-03-04-05-01-0c.xml | 013c00080027
	case "013c00090022":
		return New013c00090022() // 705-013c-0009-0022-03-04-05-01-02.xml | 013c00090022
	case "014500010004":
		return New014500010004() // 444-0145-0001-0004-03-03-53-01-02.xml | 014500010004
	case "014800010001":
		return New014800010001() // 422-0148-0001-0001-03-03-2a-00-04.xml | 014800010001
	case "014800020001":
		return New014800020001() // 858-0148-0002-0001-03-03-43-00-05.xml | 014800020001
	case "014900000000":
		return New014900000000() // 593-0149-0000-0000-03-03-67-01-07.xml | 014900000000
	case "014900120104":
		return New014900120104() // 566-0149-0012-0104-03-03-67-01-07.xml | 014900120104
	case "014912140304":
		return New014912140304() // 669-0149-1214-0304-03-03-63-01-31.xml | 014912140304
	case "014912140504":
		return New014912140504() // 829-0149-1214-0504-03-04-05-01-31.xml | 014912140504
	case "014d00000000":
		return New014d00000000() // 878-014d-0000-0000-00-00-00-00-00.xml | 014d00000000
	case "014d00010001":
		return New014d00010001() // 496-014d-0001-0001-01-03-67-01-00.xml | 014d00010001
	case "014f00000000":
		return New014f00000000() // 777-014f-0000-0000-00-00-00-00-00.xml | 014f00000000
	case "014f44503030":
		return New014f44503030() // 480-014f-4450-3030-06-03-2a-05-29.xml | 014f44503030
	case "014f44573034":
		return New014f44573034() // 482-014f-4457-3034-06-03-2a-05-29.xml | 014f44573034
	case "014f44573331":
		return New014f44573331() // 483-014f-4457-3331-06-03-2a-05-29.xml | 014f44573331
	case "014f47423030":
		return New014f47423030() // 580-014f-4742-3030-06-03-67-01-02.xml | 014f47423030
	case "014f47443032":
		return New014f47443032() // 584-014f-4744-3032-03-03-67-00-15.xml | 014f47443032
	case "014f47443530":
		return New014f47443530() // 684-014f-4744-3530-03-04-05-00-7a.xml | 014f47443530
	case "014f47543038":
		return New014f47543038() // 923-014f-4754-3038-03-03-5f-05-07.xml | 014f47543038
	case "014f52463133":
		return New014f52463133() // 479-014f-5246-3133-06-03-2a-05-29.xml | 014f52463133
	case "014f52503030":
		return New014f52503030() // 481-014f-5250-3030-06-03-2a-05-29.xml | 014f52503030
	case "014f52523530":
		return New014f52523530() // 484-014f-5252-3530-06-03-2a-05-29.xml | 014f52523530
	case "014f54573033":
		return New014f54573033() // 485-014f-5457-3033-06-03-2a-05-29.xml | 014f54573033
	case "015100020001":
		return New015100020001() // 460-0151-0002-0001-03-03-67-03-79.xml | 015100020001
	case "015100030003":
		return New015100030003() // 927-0151-0003-0003-03-04-05-01-09.xml | 015100030003
	case "015200030002":
		return New015200030002() // 926-0152-0003-0002-06-04-05-00-02.xml | 015200030002
	case "015200030003":
		return New015200030003() // 921-0152-0003-0003-06-04-05-00-02.xml | 015200030003
	case "015200030512":
		return New015200030512() // 790-0152-0003-0512-06-04-05-00-02.xml | 015200030512
	case "015202020511":
		return New015202020511() // 522-0152-0202-0511-06-03-52-03-64.xml | 015202020511
	case "015205000001":
		return New015205000001() // 901-0152-0500-0001-06-04-05-00-01.xml | 015205000001
	case "015205000003":
		return New015205000003() // 920-0152-0500-0003-06-04-05-00-01.xml | 015205000003
	case "015400010001":
		return New015400010001() // 717-0154-0001-0001-03-04-05-01-00.xml | 015400010001
	case "015400030001":
		return New015400030001() // 692-0154-0003-0001-03-03-43-01-00.xml | 015400030001
	case "015401000101":
		return New015401000101() // 739-0154-0100-0101-02-04-05-01-01.xml | 015401000101
	case "015401000201":
		return New015401000201() // 725-0154-0100-0201-03-04-05-01-00.xml | 015401000201
	case "015411000001":
		return New015411000001() // 448-0154-1100-0001-03-03-2a-01-00.xml | 015411000001
	case "015411000002":
		return New015411000002() // 447-0154-1100-0002-06-03-2a-01-00.xml | 015411000002
	case "015900010001":
		return New015900010001() // 706-0159-0001-0001-03-03-67-04-00.xml | 015900010001
	case "015900010051":
		return New015900010051() // 866-0159-0001-0051-03-04-05-01-01.xml | 015900010051
	case "015900020001":
		return New015900020001() // 642-0000-0002-0001-03-03-1c-01-0c.xml | 015900020001
	case "015900020002":
		return New015900020002() // 643-0000-0002-0002-03-03-1c-01-0c.xml | 015900020002
	case "015900020051":
		return New015900020051() // 791-0159-0002-0051-03-04-05-01-01.xml | 015900020051
	case "015900020053":
		return New015900020053() // 763-0159-0002-0053-03-04-05-01-01.xml | 015900020053
	case "015900030002":
		return New015900030002() // 641-0159-0003-0002-03-03-1c-01-0c.xml | 015900030002
	case "015900050001":
		return New015900050001() // 644-0000-0005-0001-03-03-43-01-0c.xml | 015900050001
	case "015a10070002":
		return New015a10070002() // 677-015a-1007-0002-06-03-67-02-01.xml | 015a10070002
	case "015e80150001":
		return New015e80150001() // 474-015e-8015-0001-03-03-67-01-71.xml | 015e80150001
	case "015f00000000":
		return New015f00000000() // 577-015f-0000-0000-05-03-67-01-00.xml | 015f00000000
	case "015f00010001":
		return New015f00010001() // 511-015f-0001-0001-03-03-67-01-00.xml | 015f00010001
	case "015f00020001":
		return New015f00020001() // 510-015f-0002-0001-03-03-67-01-00.xml | 015f00020001
	case "015f31020202":
		return New015f31020202() // 597-015f-3102-0202-05-03-43-01-00.xml | 015f31020202
	case "015f41020201":
		return New015f41020201() // 658-015f-4102-0201-05-03-43-01-00.xml | 015f41020201
	case "015f41020202":
		return New015f41020202() // 660-015f-4102-0202-05-03-43-01-00.xml | 015f41020202
	case "015f51020103":
		return New015f51020103() // 578-015f-5102-0103-05-03-67-01-00.xml | 015f51020103
	case "016000000000":
		return New016000000000() // 495-0000-0000-0000-00-00-00-00-00.xml | 016000000000
	case "016330010301":
		return New016330010301() // 475-0163-3001-0301-03-03-40-19-16.xml | 016330010301
	case "016500010001":
		return New016500010001() // 709-0165-0001-0001-03-03-53-01-00.xml | 016500010001
	case "016500010003":
		return New016500010003() // 935-0165-0001-0003-03-04-05-01-00.xml | 016500010003
	case "016500020001":
		return New016500020001() // 712-0165-0002-0001-02-04-05-02-02.xml | 016500020001
	case "016500020002":
		return New016500020002() // 849-0165-0002-0002-02-04-05-02-03.xml | 016500020002
	case "016500020003":
		return New016500020003() // 737-0165-0002-0003-02-04-05-02-03.xml | 016500020003
	case "016601000100":
		return New016601000100() // 627-0166-0100-0100-06-03-43-01-52.xml | 016601000100
	case "017100010001":
		return New017100010001() // 494-0171-0001-0001-01-03-67-01-02.xml | 017100010001
	case "017300030002":
		return New017300030002() // 881-0173-0003-0002-03-03-53-01-0f.xml | 017300030002
	case "017500010011":
		return New017500010011() // 911-0175-0001-0011-03-03-53-01-0a.xml | 017500010011
	case "01750002000d":
		return New01750002000d() // 912-0175-0002-000d-03-03-5f-01-0b.xml | 01750002000d
	case "01750002000e":
		return New01750002000e() // 913-0175-0002-000e-03-03-5f-01-0b.xml | 01750002000e
	case "017501000101":
		return New017501000101() // 918-0175-0100-0101-03-03-5c-01-01.xml | 017501000101
	case "017600010002":
		return New017600010002() // 871-0176-0001-0002-01-04-05-01-00.xml | 017600010002
	case "017600050001":
		return New017600050001() // 789-0176-0005-0001-03-04-05-01-01.xml | 017600050001
	case "01785a44414e":
		return New01785a44414e() // 690-0178-5a44-414e-06-03-99-02-14.xml | 01785a44414e
	case "017c00010002":
		return New017c00010002() // 622-017c-0001-0002-06-03-67-03-78.xml | 017c00010002
	case "017c00060003":
		return New017c00060003() // 632-017c-0006-0003-06-03-67-03-94.xml | 017c00060003
	case "017f00010001":
		return New017f00010001() // 885-017f-0001-0001-01-03-53-01-02.xml | 017f00010001
	case "018200010001":
		return New018200010001() // 574-0182-0001-0001-01-03-28-03-5e.xml | 018200010001
	case "018302010701":
		return New018302010701() // 678-0183-0201-0701-01-03-52-02-06.xml | 018302010701
	case "018444473031":
		return New018444473031() // 887-0184-4447-3031-03-03-5f-05-05.xml | 018444473031
	case "018444473033":
		return New018444473033() // 888-0184-4447-3033-03-03-5f-05-05.xml | 018444473033
	case "018444473034":
		return New018444473034() // 889-0184-4447-3034-03-03-5f-05-07.xml | 018444473034
	case "018447443032":
		return New018447443032() // 683-0184-4744-3032-03-03-5f-05-07.xml | 018447443032
	case "018b00400001":
		return New018b00400001() // 919-018b-0040-0001-06-03-63-00-62.xml | 018b00400001
	case "018e00010001":
		return New018e00010001() // 742-018e-0001-0001-03-04-05-01-03.xml | 018e00010001
	case "018e00010002":
		return New018e00010002() // 704-018e-0001-0002-03-04-05-01-03.xml | 018e00010002
	case "018e00020001":
		return New018e00020001() // 941-018e-0002-0001-03-04-05-01-27.xml | 018e00020001
	case "018e00030001":
		return New018e00030001() // 743-018e-0003-0001-03-04-05-01-03.xml | 018e00030001
	case "018e00030002":
		return New018e00030002() // 972-018e-0003-0002-03-04-05-01-03.xml | 018e00030002
	case "018e00030003":
		return New018e00030003() // 744-018e-0003-0003-03-04-05-01-03.xml | 018e00030003
	case "018e00030004":
		return New018e00030004() // 874-018e-0003-0004-03-04-05-01-03.xml | 018e00030004
	case "018e00030009":
		return New018e00030009() // 844-018e-0003-0009-03-04-05-01-03.xml | 018e00030009
	case "018e00040002":
		return New018e00040002() // 646-018e-0004-0002-03-03-5f-01-02.xml | 018e00040002
	case "018f01000101":
		return New018f01000101() // 883-018f-0100-0101-03-03-5c-01-01.xml | 018f01000101
	case "019000010001":
		return New019000010001() // 922-0190-0001-0001-03-03-5f-01-00.xml | 019000010001
	case "019000030001":
		return New019000030001() // 876-0190-0003-0001-03-04-05-01-49.xml | 019000030001
	case "019500010001":
		return New019500010001() // 760-0195-0001-0001-00-00-00-00-00.xml | 019500010001
	case "019900010001":
		return New019900010001() // 654-0199-0001-0001-01-03-67-99-52.xml | 019900010001
	case "019a00030003":
		return New019a00030003() // 978-019a-0003-0003-06-04-05-0a-05.xml | 019a00030003
	case "019b00010001":
		return New019b00010001() // 990-019b-0001-0001-06-03-53-01-07.xml | 019b00010001
	case "019c00010001":
		return New019c00010001() // 937-019c-0001-0001-01-04-18-04-24.xml | 019c00010001
	case "019e00010001":
		return New019e00010001() // 860-019e-0001-0001-01-04-05-01-01.xml | 019e00010001
	case "020000010001":
		return New020000010001() // 634-0200-0001-0001-01-03-5c-01-01.xml | 020000010001
	case "020600000000":
		return New020600000000() // 679-0206-0000-0000-00-00-00-00-00.xml | 020600000000
	case "020700270100":
		return New020700270100() // 676-0207-0027-0100-03-04-05-01-00.xml | 020700270100
	case "020e47543038":
		return New020e47543038() // 914-020e-4754-3038-03-03-5f-05-07.xml | 020e47543038
	case "022300010001":
		return New022300010001() // 761-0223-0001-0001-01-04-05-02-00.xml | 022300010001
	case "022300010002":
		return New022300010002() // 832-0223-0001-0002-01-04-05-02-00.xml | 022300010002
	case "022a01000100":
		return New022a01000100() // 854-022a-0100-0100-03-04-05-01-1d.xml | 022a01000100
	case "022d01000001":
		return New022d01000001() // 838-022d-0100-0001-07-04-05-01-01.xml | 022d01000001
	case "022e00010001":
		return New022e00010001() // 730-022e-0001-0001-03-04-05-01-02.xml | 022e00010001
	case "022e00030003":
		return New022e00030003() // 718-022e-0003-0003-03-04-05-01-01.xml | 022e00030003
	case "022e00040004":
		return New022e00040004() // 720-022e-0004-0004-03-04-05-01-01.xml | 022e00040004
	case "022e00050005":
		return New022e00050005() // 719-022e-0005-0005-03-04-05-01-00.xml | 022e00050005
	case "022e00060006":
		return New022e00060006() // 852-022e-0006-0006-03-04-05-01-01.xml | 022e00060006
	case "022e00070007":
		return New022e00070007() // 851-022e-0007-0007-01-04-05-04-14.xml | 022e00070007
	case "022e00070008":
		return New022e00070008() // 853-022e-0007-0008-01-04-05-04-14.xml | 022e00070008
	case "023000030001":
		return New023000030001() // 991-0230-0003-0001-03-04-05-01-00.xml | 023000030001
	case "02340003010a":
		return New02340003010a() // 958-0234-0003-010a-03-04-21-01-00.xml | 02340003010a
	case "023800030004":
		return New023800030004() // 907-0238-0003-0004-01-04-05-01-15.xml | 023800030004
	case "023900010001":
		return New023900010001() // 787-0239-0001-0001-06-04-05-01-00.xml | 023900010001
	case "023c00010002":
		return New023c00010002() // 788-023c-0001-0002-03-04-05-01-00.xml | 023c00010002
	case "024000010001":
		return New024000010001() // 729-0240-0001-0001-07-04-05-04-20.xml | 024000010001
	case "0244ba5e0001":
		return New0244ba5e0001() // 965-0244-ba5e-0001-01-04-05-04-05.xml | 0244ba5e0001
	case "024500030001":
		return New024500030001() // 865-0245-0003-0001-03-04-05-01-27.xml | 024500030001
	case "024500030002":
		return New024500030002() // 861-0245-0003-0002-03-04-05-01-27.xml | 024500030002
	case "024700420001":
		return New024700420001() // 967-0247-0042-0001-03-04-18-27-10.xml | 024700420001
	case "024800010001":
		return New024800010001() // 961-0248-0001-0001-07-04-05-04-20.xml | 024800010001
	case "024a01020304":
		return New024a01020304() // 984-024a-0102-0304-01-04-05-04-05.xml | 024a01020304
	case "024b01000001":
		return New024b01000001() // 948-024b-0100-0001-01-04-05-04-50.xml | 024b01000001
	case "024d00010001":
		return New024d00010001() // 898-024d-0001-0001-01-03-63-04-1a.xml | 024d00010001
	case "024d47610001":
		return New024d47610001() // 880-024d-4761-0001-03-03-63-01-50.xml | 024d47610001
	case "024f00010001":
		return New024f00010001() // 955-024f-0001-0001-01-03-63-01-00.xml | 024f00010001
	case "025800030082":
		return New025800030082() // 893-0258-0003-0082-06-04-05-03-3d.xml | 025800030082
	case "025800030083":
		return New025800030083() // 894-0258-0003-0083-06-04-05-03-50.xml | 025800030083
	case "025800030085":
		return New025800030085() // 960-0258-0003-0085-06-04-05-02-28.xml | 025800030085
	case "025800030087":
		return New025800030087() // 897-0258-0003-0087-03-04-05-03-46.xml | 025800030087
	case "025800031082":
		return New025800031082() // 952-0258-0003-1082-06-04-05-03-3d.xml | 025800031082
	case "025800031087":
		return New025800031087() // 951-0258-0003-1087-03-04-05-03-46.xml | 025800031087
	case "025d01000100":
		return New025d01000100() // 982-025d-0100-0100-03-04-22-06-33.xml | 025d01000100
	case "025d02000100":
		return New025d02000100() // 977-025d-0200-0100-03-04-22-06-33.xml | 025d02000100
	case "026001680168":
		return New026001680168() // 969-0260-0168-0168-06-04-05-01-25.xml | 026001680168
	case "026080011000":
		return New026080011000() // 968-0260-8001-1000-06-04-05-01-25.xml | 026080011000
	case "027200010001":
		return New027200010001() // 933-0272-0001-0001-01-04-05-02-00.xml | 027200010001
	case "027601390001":
		return New027601390001() // 975-0276-0139-0001-03-04-05-01-00.xml | 027601390001
	case "027700010001":
		return New027700010001() // 970-0277-0001-0001-07-04-05-01-04.xml | 027700010001
	case "52540000531e":
		return New52540000531e() // 82-5254-0000-531e-02-02-4e-01-01.xml | 52540000531e
	case "525400008510":
		return New525400008510() // 786-5254-0000-8510-02-04-05-01-01.xml | 525400008510
	case "5254000103e9":
		return New5254000103e9() // 201-5254-0001-03e9-02-02-4e-00-00.xml | 5254000103e9
	case "525400018332":
		return New525400018332() // 193-5254-0001-8332-02-02-41-01-06.xml | 525400018332
	case "525400018380":
		return New525400018380() // 508-5254-0001-8380-02-03-22-01-02.xml | 525400018380
	case "525400018510":
		return New525400018510() // 847-5254-0001-8510-02-04-05-01-01.xml | 525400018510
	case "5254000b8510":
		return New5254000b8510() // 848-5254-000b-8510-02-04-05-01-01.xml | 5254000b8510
	case "525401008371":
		return New525401008371() // 841-5254-0100-8371-06-03-43-01-0a.xml | 525401008371
	case "525401018371":
		return New525401018371() // 505-5254-0101-8371-06-03-67-01-04.xml | 525401018371
	case "525401018377":
		return New525401018377() // 364-5254-0101-8377-06-03-2a-01-01.xml | 525401018377
	case "525401078377":
		return New525401078377() // 976-5254-0107-8377-06-03-67-01-21.xml | 525401078377
	case "525402008030":
		return New525402008030() // 235-5254-0200-8030-00-03-22-00-00.xml | 525402008030
	case "525410008140":
		return New525410008140() // 685-5254-1000-8140-06-03-67-00-06.xml | 525410008140
	case "52544d534331":
		return New52544d534331() // 214-5254-4d53-4331-00-03-1c-00-00.xml | 52544d534331
	case "525480010000":
		return New525480010000() // 161-5254-8001-0000-04-02-4e-00-03.xml | 525480010000
	case "525480018020":
		return New525480018020() // 590-5254-8001-8020-03-03-67-02-20.xml | 525480018020
	case "525482008130":
		return New525482008130() // 594-5254-8200-8130-03-03-67-00-21.xml | 525482008130
	case "525482010200":
		return New525482010200() // 167-5254-8201-0200-04-02-4e-00-06.xml | 525482010200
	case "525482018021":
		return New525482018021() // 591-5254-8201-8021-03-03-67-00-21.xml | 525482018021
	case "525482018120":
		return New525482018120() // 445-5254-8201-8120-04-02-78-01-02.xml | 525482018120
	}

	return nil
}
func New00000000() *Device{
	return &Device{
		Brand: "",
		Product: "Heatit Thermostat",
		Description: "\n            \n          ",

		ManufacturerID: "",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
		},
		Parameters: []*parameter{
		},
	}
}
func New000000000000() *Device{
	return &Device{
		Brand: "Secure",
		Product: "SCS-317",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0000",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0042,
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0053,
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temperature unit selection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 129,
						To: 0,
						Desc: "°C value (0/-127)",
						Unit: "°C",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "°F value (128/-255)",
						Unit: "°F",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Lower temperature limit",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 30,
						Desc: "",
						Unit: "°C/°F",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Upper temperature limit",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 30,
						Desc: "",
						Unit: "°C/°F",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Delta T temperature change",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 50,
						Desc: "1 or 0.1",
						Unit: "1(0.1)",
					},
				},
			},
		},
	}
}
func New0000000021ac() *Device{
	return &Device{
		Brand: "ZiRC",
		Product: "ZiRC",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0000",
		ProductType: "0000",
		ProductID: "21ac",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0094,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Parameter 1",
				Type: "",
				Size: 0,
				Values: []Value{
				},
			},
		},
	}
}
func New0000000121b4() *Device{
	return &Device{
		Brand: "Sigma Designs",
		Product: "ZIPR",
		Description: "\n            \n          ",

		ManufacturerID: "0000",
		ProductType: "0001",
		ProductID: "21b4",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x004d,
			},
			&CommandClass{
				ID: 0x0034,
			},
			&CommandClass{
				ID: 0x0052,
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0077,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0045,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0042,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0023,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0061,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New0001444d3330() *Device{
	return &Device{
		Brand: "ACT",
		Product: "ZDM230",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0001",
		ProductType: "444d",
		ProductID: "3330",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Ignore start level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Yes",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Suspend group 4",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Yes",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Night light",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "On",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Invert switch",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Yes",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Ignore Start Level When Receiving Dim Commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Yes",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Don’t Send Level Command After Transmitting Dim Commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Yes",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "On/Off Command dim rate (excluding ALL ON/ALL OFF commands): Dim step Parameter",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Number of levels the dimmer will change when the timer expires",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "On/Off Command dim rate (excluding ALL ON/ALL OFF commands): Dim timer Parameter",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Time = 10 milliseconds * value",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Local Control dim rate: Dim step Parameter",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Number of levels the dimmer will change when the timer expires",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Local Control dim rate: Dim timer Parameter",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Time = 10 milliseconds * value",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "ALL ON/ALL OFF dim rate: Dim step Parameter",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Number of levels the dimmer will change when the timer expires",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "ALL ON/ALL OFF dim rate: Dim timer Parameter",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Time = 10 milliseconds * value",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Enable Shade Control Group 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "On",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Enable Shade Control Group 3",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "On",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "LED Transmission Indication",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Fliker for only 1 second after the transmission begins",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Fliker for only 1 second after the transmission begins",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Fliker for only 1 second after the transmission begins",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Poll Group 2 Interval",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Time in minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Poll Group 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Yes",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
		},
	}
}
func New000144503030() *Device{
	return &Device{
		Brand: "HomePro, Evolve",
		Product: "ZDP100,LDM-15",
		Description: "\n            \n          ",

		ManufacturerID: "0001",
		ProductType: "4450",
		ProductID: "3030",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 29,
				Name: "Disable/Enable load sense",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable load sense",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable load sense",
						Unit: "",
					},
				},
			},
		},
	}
}
func New000144573034() *Device{
	return &Device{
		Brand: "HomePro, Evolve",
		Product: "ZDW104,LRM-AS",
		Description: "\n            \n          ",

		ManufacturerID: "0001",
		ProductType: "4457",
		ProductID: "3034",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "Night Light",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "the LED will\nturn ON when the load attached is turned ON",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "the LED will turn OFF when the load attached is turned ON",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Invert Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Changes the top of the switch to OFF and the bottom of the switch to ON",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 29,
				Name: "Load Sense",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable load sense",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable load sense",
						Unit: "",
					},
				},
			},
		},
	}
}
func New000144573332() *Device{
	return &Device{
		Brand: "HomePro",
		Product: "ZDM230",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0001",
		ProductType: "4457",
		ProductID: "3332",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New000152463133() *Device{
	return &Device{
		Brand: "HomePro, Evolve",
		Product: "ZRF113, LFM 20",
		Description: "\n            \n          ",

		ManufacturerID: "0001",
		ProductType: "5246",
		ProductID: "3133",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New0001524d3330() *Device{
	return &Device{
		Brand: "ACT",
		Product: "ZRM230",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0001",
		ProductType: "524d",
		ProductID: "3330",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Ignore start level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Suspend group 4",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Night light",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Invert switch",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Enable Shade Control Group 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Enable Shade Control Group 3",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "LED Transmission Indication",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Do not fliker",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Fliker entire transmission time",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Fliker for only 1 second after the transmission begins",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Poll Group 2 Interval",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Time in minutes",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Poll Group 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
		},
	}
}
func New000152503030() *Device{
	return &Device{
		Brand: "HomePro, Evolve",
		Product: "ZRP100, LPM-15",
		Description: "\n            \n          ",

		ManufacturerID: "0001",
		ProductType: "5250",
		ProductID: "3030",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 104,
				Name: "Operation Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Enable flash mode wich operates as follows: With Parameter 104 value set to 0, relay is closed and ZRP100 defaults to ON (relay closed).\nWhenever the ZRP100 receives a Z-Wave ON command, the ZRP100 will begin cycling its output\nrelay on and off approximate once per second (1/2 second Off, 1/2 second On) for 20 seconds.\nIf at any time during that 20 seconds, the ZRP100 receives a Z-Wave OFF command, the ZRP100\nwill stop cycling its output relay and default to ON.\nAt any time during that 20 seconds, if the ZRP100 receives a Z-Wave ON command, the ZRP100\nwill add an additional 20 seconds on/off cycling of its output relay. At the end of the 20 seconds,\nthe ZRP100 will again default to ON (relay closed).\nAt any other time, if the ZRP100 receives an OFF command, it will have no effect and the ZRP100\nremains ON.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Normal ON/OFF operation",
						Unit: "",
					},
				},
			},
		},
	}
}
func New000152523130() *Device{
	return &Device{
		Brand: "ACT",
		Product: "ZIR010",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0001",
		ProductType: "5252",
		ProductID: "3130",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New000152523534() *Device{
	return &Device{
		Brand: "HomePro, Evolve",
		Product: "ZRR154, LOM-15D",
		Description: "\n            \n          ",

		ManufacturerID: "0001",
		ProductType: "5252",
		ProductID: "3534",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0070,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "Nightlight",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Set this parameter to 0 to have the amber indicator LED show the state of the outlets (indicator ON = outlets ON).",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Set this parameter to 1 to have indicator show the opposite state of the controlled outlets (indicator ON = outlets\nOFF). This configuration allows the ZRR154 to act as a “night light”.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New000152573033() *Device{
	return &Device{
		Brand: "HomePro, Evolve",
		Product: "ZRW103, LSM-20",
		Description: "\n            \n          ",

		ManufacturerID: "0001",
		ProductType: "5257",
		ProductID: "3033",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "Night Light",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The LED will\nturn ON when the load attached is turned ON",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The LED on the ZRW103 will turn OFF when the load attached is turned ON",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Invert Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Change the top of the switch to OFF and the bottom of the switch ON",
						Unit: "",
					},
				},
			},
		},
	}
}
func New0001544d3330() *Device{
	return &Device{
		Brand: "ACT",
		Product: "ZTM230",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0001",
		ProductType: "544d",
		ProductID: "3330",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New000154573033() *Device{
	return &Device{
		Brand: "HomePro, Evolve",
		Product: "ZTW103, LTM-5",
		Description: "\n            \n          ",

		ManufacturerID: "0001",
		ProductType: "5457",
		ProductID: "3033",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Set Ignore Start Level Bit When Transmitting Dim Commands",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "A dimmer receiving this command will start dimming from thr start level.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The dimmer will start dimming from its current dim level\nrather than the start level embedded in the command.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Night Light",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The LED will turn ON when the status of Group 1 is ON.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The LED will turn ON when the status of the devices in Group 1 is OFF.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Invert Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Change back to original settings.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Change the top of the transmitter to OFF and the bottom of the transmitter to ON.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Ignore Start Level When Receiving Dim Commands",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Starts dimming from that start level",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The ZTW103 sends the command so that the dimmer will start dimming from its\ncurrent dim level rather then the start level embedded in the command.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "LED Transmission Indication",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Flickering can be set to\nnot flicker at all.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flicker the entire time it is transmitting.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Flicker for only 1 second\nwhen it begins transmitting.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Poll: Minutes",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "The ZTW103 will poll the first node in Group 1 in order to keep itself synchronized with the group if this\nconfiguration parameter is set to 1. How often it will poll is configured using this parameter.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Poll First Node in Group 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No polling.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The ZTW103 will poll the first node in Group 1 in order to keep itself synchronized with the group.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New000157573330() *Device{
	return &Device{
		Brand: "HomePro",
		Product: "ZTW230",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0001",
		ProductType: "5757",
		ProductID: "3330",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New000200038010() *Device{
	return &Device{
		Brand: "Z-Wave RS",
		Product: "Z-Wave RS",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0002",
		ProductType: "0003",
		ProductID: "8010",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "6",
			},
			&CommandClass{
				ID: 0x005b,
			},
			&CommandClass{
				ID: 0x0043,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0053,
			},
			&CommandClass{
				ID: 0x0087,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temperature Report threshold",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "temperature in celsius",
						Unit: "C°",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Set-point display resolution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "temperature in celsius",
						Unit: "C°",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Min Set-point and override limit",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 40,
						Desc: "temperature in celsius",
						Unit: "C°",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Max Set-point and override limit",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 40,
						Desc: "temperature in celsius",
						Unit: "C°",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "LED Flash period",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Set-point control function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Temporarily override scheduler",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Set-point type in Thermostat_Setpoint_Reports",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Heating",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Cooling",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "Auto Changeover",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "LED on time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 100,
						To: 500,
						Desc: "milliseconds\n(in 100ms steps)",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Number of LED flashes (duration)",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 11,
				Name: "LED color",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Red",
						Unit: "",
					},
				},
			},
		},
	}
}
func New000200050003() *Device{
	return &Device{
		Brand: "Danfoss",
		Product: "Living Connect 013",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0002",
		ProductType: "0005",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0046,
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New000200050004() *Device{
	return &Device{
		Brand: "Danfoss",
		Product: "Living Connect 1.1",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0002",
		ProductType: "0005",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
				Version: "0",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0046,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New00020005017c() *Device{
	return &Device{
		Brand: "EbV",
		Product: "EbV Connect",
		Description: "\n            \n          ",

		ManufacturerID: "0002",
		ProductType: "0005",
		ProductID: "017c",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0046,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "6",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0000,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New000200640001() *Device{
	return &Device{
		Brand: "Danfoss",
		Product: "RA-PLUS-w",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0002",
		ProductType: "0064",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0046,
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New00020248a030() *Device{
	return &Device{
		Brand: "COQON",
		Product: "Fußbodenheizcontroller 10 Kanal",
		Description: "\n            \n          ",

		ManufacturerID: "0002",
		ProductType: "0248",
		ProductID: "a030",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "7",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Valve Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Normally closed",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Normally open",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Heat Load Strategy",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Stacking",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Spreading",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "PWM Period",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "short (15min)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "medium (30min)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "long (60min)",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00020248a040() *Device{
	return &Device{
		Brand: "COQON",
		Product: "Fußbodenheizcontroller 5 Kanal",
		Description: "\n            \n          ",

		ManufacturerID: "0002",
		ProductType: "0248",
		ProductID: "a040",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "7",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Valve Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Normally closed",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Normally open",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Heat Load Strategy",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Stacking",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Spreading",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "PWM Period",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "PWM period: Short (15 min)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "PWM period: Medium (30 min)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "PWM period: Long (60 min)",
						Unit: "",
					},
				},
			},
		},
	}
}
func New000280040001() *Device{
	return &Device{
		Brand: "RET BZ - RF",
		Product: "RET BZ 2012",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0002",
		ProductType: "8004",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New000280042000() *Device{
	return &Device{
		Brand: "RXZ3",
		Product: "RXZ3 (RF relay switching unit)",
		Description: "\n            \n          ",

		ManufacturerID: "0002",
		ProductType: "8004",
		ProductID: "2000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New000280042010() *Device{
	return &Device{
		Brand: "RZ1",
		Product: "RZ1 (Single Channel RF Relay Switching Unit)",
		Description: "\n            \n          ",

		ManufacturerID: "0002",
		ProductType: "8004",
		ProductID: "2010",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New000280042020() *Device{
	return &Device{
		Brand: "RZ1",
		Product: "RZ1-HP (Single Channel RF Relay Switching Unit)",
		Description: "\n            \n          ",

		ManufacturerID: "0002",
		ProductType: "8004",
		ProductID: "2020",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New000280050001() *Device{
	return &Device{
		Brand: "Danfoss",
		Product: "living connect",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0002",
		ProductType: "8005",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0046,
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New000280070200() *Device{
	return &Device{
		Brand: "Danfoss",
		Product: "Heat Recovery Ventilation - Computing and Communications Module",
		Description: "\n            \n          ",

		ManufacturerID: "0002",
		ProductType: "8007",
		ProductID: "0200",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0091,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0037,
			},
			&CommandClass{
				ID: 0x0039,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New000550450653() *Device{
	return &Device{
		Brand: "MultiWave",
		Product: "Five-Channel Wireless Remote Receiver",
		Description: "\n            \n          ",

		ManufacturerID: "0005",
		ProductType: "5045",
		ProductID: "0653",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0060,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0043,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "PE653 OPERATION MODE                    ",
				Type: "bitrange",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the circuit or variable speed pump speed to activate when the Cleaner/Booster pump needs to be active. The valid settings for this field are one of the following: Booster/Cleaner Functionality not supported	= 0x01, Circuit-1 used for Booster/Cleaner = 0x02, Variable Speed pump Speed-1 used for Booster/Cleaner = 	0x03, Variable Speed pump Speed-2 used for Booster/Cleaner = 0x04, Variable Speed pump Speed-3 used for Booster/Cleaner = 	0x05, Variable Speed pump Speed-4 used for Booster/Cleaner = 0x06",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte is used to indicate the following two pieces of information.\no	Whether the installed pump is a one or two speed pump\no	Whether the Booster/Cleaner is installed or not\nThe valid setting for this field is the combination (logical ORing) of these two pieces of information.  This field can have the following values applied to it: One Speed/NO = 0x00, One Speed/YES = 0x01, Two Speed/NO	= 0x02, Two Speed/YES = 0x03\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "FIREMAN_TIMEOUT         ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "Fireman Disabled (no heater installed)",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Fireman Enabled (heater installed) with no cool down period",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Fireman Enabled (heater installed) with cool down period = 1 minute",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Fireman Enabled (heater installed) with cool down period = 2 minute",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Fireman Enabled (heater installed) with cool down period = 3 minute",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Fireman Enabled (heater installed) with cool down period = 4 minute",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Fireman Enabled (heater installed) with cool down period = 5 minute",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Fireman Enabled (heater installed) with cool down period = 6 minute",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Fireman Enabled (heater installed) with cool down period = 7 minute",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Fireman Enabled (heater installed) with cool down period = 8 minute",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Fireman Enabled (heater installed) with cool down period = 9 minute",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "Fireman Enabled (heater installed) with cool down period = 10 minute",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "Fireman Enabled (heater installed) with cool down period = 11 minute",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "Fireman Enabled (heater installed) with cool down period = 12 minute",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "Fireman Enabled (heater installed) with cool down period = 13 minute",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "Fireman Enabled (heater installed) with cool down period = 14 minute",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "Fireman Enabled (heater installed) with cool down period = 15 minute",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "TEMP_CALIBRATION_OFFSETS",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte sets the amount of compensation you wish to apply to the actual water (pool/spa) reading taken by the PE653.  This value is an offset in degrees Fahrenheit and may have the value of -20F to &#43;20F (in 1 degree increments), inclusive.  Only whole number offsets are allowed.  A setting of zero results in NO offset being applied.",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte sets the amount of compensation you wish to apply to the actual Air (freeze protection) reading taken by the PE653.  This value is an offset in degrees Fahrenheit and may have the value of -20F to &#43;20F (in 1 degree increments), inclusive.  Only whole number offsets are allowed.  A setting of zero results in NO offset being applied.",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte shall always be set to zero.",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte shall always be set to zero.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "CIR_1_EV_SCHED_1        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "CIR_1_EV_SCHED_2        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "CIR_1_EV_SCHED_3        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "CIR_2_EV_SCHED_1        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "CIR_2_EV_SCHED_2        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "CIR_2_EV_SCHED_3        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "CIR_3_EV_SCHED_1        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "CIR_3_EV_SCHED_2        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "CIR_3_EV_SCHED_3        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "CIR_4_EV_SCHED_1        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "CIR_4_EV_SCHED_2        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "CIR_4_EV_SCHED_3        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "CIR_5_EV_SCHED_1        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "CIR_5_EV_SCHED_2        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "CIR_5_EV_SCHED_3        ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "POOL_SPA_SUPPORT_MODE   ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "A POOL ONLY installation",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "A SPA ONLY installation",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Both a POOL and SPA are part of the installation",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "VSP_SPD_SETTING_1   ",
				Type: "bitrange",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the desired 16-bit pump speed setting",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the desired 16-bit pump speed setting",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "VSP_SPD_SETTING_2   ",
				Type: "bitrange",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the desired 16-bit pump speed setting",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the desired 16-bit pump speed setting",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "VSP_SPD_SETTING_3   ",
				Type: "bitrange",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the desired 16-bit pump speed setting",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the desired 16-bit pump speed setting",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "VSP_SPD_SETTING_4   ",
				Type: "bitrange",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the desired 16-bit pump speed setting",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the desired 16-bit pump speed setting",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 36,
				Name: "VSP_SPD_1_EV_SCHED_1",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 37,
				Name: "VSP_SPD_1_EV_SCHED_2",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 38,
				Name: "VSP_SPD_1_EV_SCHED_3",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "VSP_SPD_2_EV_SCHED_1",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "VSP_SPD_2_EV_SCHED_2",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "VSP_SPD_2_EV_SCHED_3",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "VSP_SPD_3_EV_SCHED_1",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "VSP_SPD_3_EV_SCHED_2",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "VSP_SPD_3_EV_SCHED_3",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "VSP_SPD_4_EV_SCHED_1",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 46,
				Name: "VSP_SPD_4_EV_SCHED_2",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 47,
				Name: "VSP_SPD_4_EV_SCHED_3",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule ON time",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte set to the high 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte set to the low 8-bits of the 16-bit schedule OFF time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 49,
				Name: "VSP_MAX_PUMP_SPEED  ",
				Type: "bitrange",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte set to the high 8-bits of the desired 16-bit Maximum pump speed setting",
						Unit: "",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "This byte set to the low 8-bits of the desired 16-bit Maximum pump speed setting",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "FREEZE_CONTROL      ",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "This byte sets the temperature threshold at which a freeze condition is present.  This setting is in degrees Fahrenheit and has a valid range of 34F to 44F inclusive, in 1 degree Fahrenheit increments.",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "This bit sets the PE653 circuit 1 to be activated upon detection of a freeze condition. Value 1 = Turn Circuit 1 ON, Value 0 = Turn Circuit 1 OFF",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "This bit sets the PE653 circuit 2 to be activated upon detection of a freeze condition. Value 1 = Turn Circuit 2 ON, Value 0 = Turn Circuit 2 OFF",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "This bit sets the PE653 circuit 3 to be activated upon detection of a freeze condition.Value 1 = Turn Circuit 3 ON, Value 0 = Turn Circuit 3 OFF",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "This bit sets the PE653 circuit 4 to be activated upon detection of a freeze condition. Value 1 = Turn Circuit 4 ON, Value 0 = Turn Circuit 4 OFF",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "This bit sets the PE653 circuit 5 to be activated upon detection of a freeze condition. Value 1 = Turn Circuit 5 ON, Value 0 = Turn Circuit 5 OFF",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "This byte sets the Variable Speed Pump Speed to be activated upon detection of a freeze condition.  This can be any one of the following values: NONE = 0, Variable Pump Speed 1 = 1, Variable Pump Speed 2 = 2, Variable Pump Speed 3 = 3, Variable Pump Speed 4 = 4",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "This byte shall always be set to zero.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New000550450953() *Device{
	return &Device{
		Brand: "MultiWave",
		Product: "Five Channel Wireless Remote Controller",
		Description: "\n            \n          ",

		ManufacturerID: "0005",
		ProductType: "5045",
		ProductID: "0953",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0021,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0091,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0088,
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Operation Mode",
				Type: "bitrange",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 2,
				Name: "Fireman Timeout",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "Fireman Disabled (no heater installed)",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Fireman Enabled (heater installed) with no cool down period",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Fireman Enabled (heater installed) with cool down period = 1 minute",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Fireman Enabled (heater installed) with cool down period = 2 minute",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Fireman Enabled (heater installed) with cool down period = 3 minute",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Fireman Enabled (heater installed) with cool down period = 4 minute",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Fireman Enabled (heater installed) with cool down period = 5 minute",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Fireman Enabled (heater installed) with cool down period = 6 minute",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Fireman Enabled (heater installed) with cool down period = 7 minute",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Fireman Enabled (heater installed) with cool down period = 8 minute",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Fireman Enabled (heater installed) with cool down period = 9 minute",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "Fireman Enabled (heater installed) with cool down period = 10 minute",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "Fireman Enabled (heater installed) with cool down period = 11 minute",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "Fireman Enabled (heater installed) with cool down period = 12 minute",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "Fireman Enabled (heater installed) with cool down period = 13 minute",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "Fireman Enabled (heater installed) with cool down period = 14 minute",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "Fireman Enabled (heater installed) with cool down period = 15 minute",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Temperature Calibration Offsets ",
				Type: "bitrange",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "The ‘configurationValue1’ byte sets the amount of compensation you wish to apply to the actual water (pool/spa) reading taken by the PE653.  This value is an offset in degrees Fahrenheit and may have the value of -20F to &#43;20F (in 1 degree increments), inclusive.  Only whole number offsets are allowed.  A setting of zero results in NO offset being applied.",
						Unit: "°F",
					},
					Value{
						From: 8,
						To: 15,
						Desc: "The ‘configurationValue2’ byte sets the amount of compensation you wish to apply to the actual Air (freeze protection) reading taken by the PE653.  This value is an offset in degrees Fahrenheit and may have the value of -20F to &#43;20F (in 1 degree increments), inclusive.  Only whole number offsets are allowed.  A setting of zero results in NO offset being applied.",
						Unit: "°F",
					},
					Value{
						From: 16,
						To: 31,
						Desc: "The ‘configurationValue3’ byte shall always be set to zero.\nThe ‘configurationValue4’ byte shall always be set to zero.\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New000800010005() *Device{
	return &Device{
		Brand: "",
		Product: "HomeManager ST",
		Description: "\n            \n          ",

		ManufacturerID: "0008",
		ProductType: "0001",
		ProductID: "0005",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0021,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0087,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0077,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New000800070020() *Device{
	return &Device{
		Brand: "Wayne-Dalton/Salt",
		Product: "Thermostat WDTC-20",
		Description: "\n            \n          ",

		ManufacturerID: "0008",
		ProductType: "0007",
		ProductID: "0020",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0040,
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New0010454d3532() *Device{
	return &Device{
		Brand: "EM52",
		Product: "EM52 Z-Wave Energy Meter",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0010",
		ProductType: "454d",
		ProductID: "3532",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Instant Energy Autosend Interval",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no autosend",
						Unit: "",
					},
					Value{
						From: 5,
						To: 32767,
						Desc: "",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Accumulated Energy Autosend Interval ",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no autosend",
						Unit: "",
					},
					Value{
						From: 5,
						To: 32767,
						Desc: "",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Voltage Autosend Interval",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no autosend",
						Unit: "",
					},
					Value{
						From: 5,
						To: 32767,
						Desc: "",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Current Autosend Interval",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no autosend",
						Unit: "",
					},
					Value{
						From: 5,
						To: 32767,
						Desc: "",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Instant Energy Change (watts) Autosend threshold",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 6,
				Name: "Accumulated Energy Change Autosend threshold",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 7,
				Name: "Instant Voltage Change Autosend threshold ",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 8,
				Name: "Instant Current Change Autosend threshold ",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 9,
				Name: "CT Size",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 5,
						To: 5,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 50,
						To: 50,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 75,
						To: 75,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 100,
						To: 100,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 150,
						To: 150,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "CT_DOUBLED",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "doubled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Line Frequency",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 40,
						To: 70,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Reboot Counter",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "",
						Unit: "",
					},
				},
			},
		},
	}
}
func New001045564c32() *Device{
	return &Device{
		Brand: "EVLCD1/EVLCDD2",
		Product: "EVLCD1",
		Description: "\n            \n          ",

		ManufacturerID: "0010",
		ProductType: "4556",
		ProductID: "4c32",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0087,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x0093,
			},
			&CommandClass{
				ID: 0x0092,
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Button 1 Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Scene Control momentary ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Scene Control toggle",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "BASICSET Toggle",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "n/a",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Privacy",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "HouseKeeping",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Scene Control/BASICSET toggle",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Button 2 Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Scene Control momentary",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Scene Control toggle",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "BASICSET Toggle",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Stat (Setpoint Up)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Privacy",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "HouseKeeping",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Scene Control/BASICSET toggle",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Button 3 Type ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Scene Control momentary",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Scene Control toggle",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "BASICSET Toggle",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Stat (Temperature)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Privacy",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "HouseKeeping",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Scene Control/BASICSET toggle",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Button 4 Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Scene Control momentary ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Scene Control toggle",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "BASICSET Toggle",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Stat (Setpoint Down)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Privacy",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "HouseKeeping ",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Scene Control/BASICSET toggle",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Button 5 Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Scene Control momentary",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Scene Control toggle",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "BASICSET Toggle",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "n/a ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Privacy",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "HouseKeeping",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Scene Control/BASICSET toggle",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Language",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "English",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Spanish",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Chinese",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "German",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "French",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Italian",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Punjabi",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Keypad Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "ENTRY2GANG",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "RESORTROOMWALL",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "RESORTROOM3GANGTABLE",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "SLIVINGROOMLEFT",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "SLIVINGROOMRIGHT",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "SLIVINGROOM3GANG",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "SBEDROOM1GANG",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "SBEDROOM1GANGTABLE",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "SBEDROOM3GANGTABLE",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "DRAPECONTROL1GANG",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "VANITYBATH1GANG",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "SONOSTA1GANG",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "INATPENN1GANG",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "TYPE14",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "LOWELL1",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "LOWELL2",
						Unit: "",
					},
					Value{
						From: 17,
						To: 17,
						Desc: "CUSTOM METADATA ",
						Unit: "",
					},
					Value{
						From: 18,
						To: 18,
						Desc: "CES3DEMO",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Display Timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 21,
				Name: "Backlight ON  Level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 20,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Backlight OFF  Level ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 20,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "Button ON Level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 20,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "Button OFF  Level ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 20,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "LCD Contrast",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 20,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "Screen  Orientation",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Normal",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Rotated 180 ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "Network Update ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 60,
						Desc: "",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 29,
				Name: "Red Backlight  ON Level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Red Backlight  ON Level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Green Backlight  ON Level ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "RGB Demo  Mode ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "on",
						Unit: "",
					},
				},
			},
		},
	}
}
func New001050533231() *Device{
	return &Device{
		Brand: "PSCH21",
		Product: "PSCH21",
		Description: "\n            \n          ",

		ManufacturerID: "0010",
		ProductType: "5053",
		ProductID: "3231",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0040,
			},
			&CommandClass{
				ID: 0x0042,
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Reset Count",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "SI Sensor Cal (S1)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 249,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "SO Sensor Cal (S2)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 249,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Relay Polarity",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "normal polarity",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "reverse polarity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Temperature Delta Autosend Threshold",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 5,
						Desc: "Set the amount of degrees.",
						Unit: "deg",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Periodic Temperature Send Interval (min)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 120,
						Desc: "Define the time interval in minutes.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "F/C Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Celsius",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Fahrenheit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "SI Temperature",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 9,
				Name: "SO Temperature",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New001a00000000() *Device{
	return &Device{
		Brand: "Aspire RF",
		Product: "Handheld Controller",
		Description: "\n            \n          ",

		ManufacturerID: "001a",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0021,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0091,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New001a44490000() *Device{
	return &Device{
		Brand: "Aspire RF",
		Product: "RF Smart Dimmer System Master",
		Description: "\n            \n          ",

		ManufacturerID: "001a",
		ProductType: "4449",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0082,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New001a44490003() *Device{
	return &Device{
		Brand: "Aspire",
		Product: "Plug-In Dimming Module",
		Description: "\n            \n          ",

		ManufacturerID: "001a",
		ProductType: "4449",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0082,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New001a52440000() *Device{
	return &Device{
		Brand: "Aspire RF",
		Product: "RF Split Control Duplex Receptacle",
		Description: "\n            \n          ",

		ManufacturerID: "001a",
		ProductType: "5244",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0082,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New001a534c0000() *Device{
	return &Device{
		Brand: "Aspire RF",
		Product: "RF Single Pole Switch",
		Description: "\n            \n          ",

		ManufacturerID: "001a",
		ProductType: "534c",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0082,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0028,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New001a574d0000() *Device{
	return &Device{
		Brand: "Aspire RF",
		Product: "RF 5-Scene Controller",
		Description: "\n            \n          ",

		ManufacturerID: "001a",
		ProductType: "574d",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0021,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0077,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New001d01010316() *Device{
	return &Device{
		Brand: "Vizia rf &#43;TM",
		Product: "Scene Capable In-Wall Switch Module",
		Description: "\n            \n          ",

		ManufacturerID: "001d",
		ProductType: "0101",
		ProductID: "0316",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New001d03010209() *Device{
	return &Device{
		Brand: "Leviton",
		Product: "Scene Capable Push On/Off",
		Description: "\n            \n          ",

		ManufacturerID: "001d",
		ProductType: "0301",
		ProductID: "0209",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New001d04010209() *Device{
	return &Device{
		Brand: "Leviton",
		Product: "Scene Capable Push On/Off Dimmer",
		Description: "\n            \n          ",

		ManufacturerID: "001d",
		ProductType: "0401",
		ProductID: "0209",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New001d07020261() *Device{
	return &Device{
		Brand: "Leviton",
		Product: "4-Zone Controller",
		Description: "\n            \n          ",

		ManufacturerID: "001d",
		ProductType: "0702",
		ProductID: "0261",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0082,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x007c,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New001e00020001() *Device{
	return &Device{
		Brand: "Express Control",
		Product: "EZMotion",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "001e",
		ProductType: "0002",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0077,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Sensitivity",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "On time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Enable LED",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Light threshold",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "% of maximal luminosity",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Stay awake",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "On value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
		},
	}
}
func New001e00020002() *Device{
	return &Device{
		Brand: "Express Control",
		Product: "EZMotion",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "001e",
		ProductType: "0002",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x009b,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Sensitivity",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "On time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Enable LED",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Light threshold",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "% of maximal luminosity",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Stay awake",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "On value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "TempAdj",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 129,
						To: 127,
						Desc: "",
						Unit: "",
					},
				},
			},
		},
	}
}
func New001e00040001() *Device{
	return &Device{
		Brand: "Express Controls",
		Product: "EZMultiPli",
		Description: "\n            \n          ",

		ManufacturerID: "001e",
		ProductType: "0004",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "6",
			},
			&CommandClass{
				ID: 0x0033,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "OnTime",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "A value of 0 is a special mode where the lights are constantly sent a command to turn them on whenever motion is detected. EZMultiPli will NOT turn the lights off in this mode.",
						Unit: "min",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Number of minutes that the lights stay on when motion has not been detected.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "OnLevel",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "A value of 0 will turn the lights off (not recommended).",
						Unit: "%",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "A value between 1 and 99 will set the dim level to between 1% and 99% (99% is full on).",
						Unit: "%",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "A value of -1 will turn the light “on” which depends on the device but most will set the dim level to the last dim setting.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "LiteMin",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "A value between 1 and 127 sets time interval for luminance report.",
						Unit: "min",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "A value of zero turns this mode off. Luminance values can still be obtained at any time by the home-control application in this mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "TempMin",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "A value of zero turns this mode off. Temperature values can still be obtained at any time by the home-control application in this mode.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "A value between 1 and 127 sets time interval for temperature report.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "TempAdj",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 129,
						To: 127,
						Desc: "The value is in tenths of degree Fahrenheit. The temperature reading can be adjusted up to &#43;12.7F to -12.7F. A value of 1 will adjust the temperature reading by &#43;0.1F. A value of -1 will adjust the temperature by -0.1F. A value of 123 will adjust the temperature by &#43;12.3F.",
						Unit: "F",
					},
				},
			},
		},
	}
}
func New002080071398() *Device{
	return &Device{
		Brand: "Monster",
		Product: "Revolution 200 Remote",
		Description: "\n            \n          ",

		ManufacturerID: "0020",
		ProductType: "8007",
		ProductID: "1398",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0021,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002c,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002d,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New003000010001() *Device{
	return &Device{
		Brand: "Comfort",
		Product: "Comfort 9000 with UCM/Zwave",
		Description: "\n            \n          ",

		ManufacturerID: "0030",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New003352503031() *Device{
	return &Device{
		Brand: "Z-Wave",
		Product: "ABMHZ",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0033",
		ProductType: "5250",
		ProductID: "3031",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Calibration",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 2,
				Name: "Motor Direction",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "normal",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "reverse",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Tilt Feature",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
		},
	}
}
func New003352503032() *Device{
	return &Device{
		Brand: "Z-Wave",
		Product: "DBMZ",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0033",
		ProductType: "5250",
		ProductID: "3032",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Calibration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Normal",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Calibrate Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Motor Direction",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "normal",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "reverse",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Tilt Feature",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
		},
	}
}
func New003900000000() *Device{
	return &Device{
		Brand: "Honeywell",
		Product: "5800 Z Bridge",
		Description: "\n            \n          ",

		ManufacturerID: "0039",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New003900010001() *Device{
	return &Device{
		Brand: "Honeywell",
		Product: "Tuxedo Touch",
		Description: "\n            \n          ",

		ManufacturerID: "0039",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0042,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New003900110001() *Device{
	return &Device{
		Brand: "TH8320ZW1000",
		Product: "Z-Wave thermostat ",
		Description: "\n            \n          ",

		ManufacturerID: "0039",
		ProductType: "0011",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0042,
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0044,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0045,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New003900110003() *Device{
	return &Device{
		Brand: "TH3220ZW1034",
		Product: "Z-Wave Thermostat 2012",
		Description: "\n            \n          ",

		ManufacturerID: "0039",
		ProductType: "0011",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0044,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0045,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0042,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New00475a525400() *Device{
	return &Device{
		Brand: "Z-Wave to RTS Interface",
		Product: "ZRTSI",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0047",
		ProductType: "5a52",
		ProductID: "5400",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0021,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New005600010001() *Device{
	return &Device{
		Brand: "Eminent",
		Product: "E-Centre 2",
		Description: "\n            \n          ",

		ManufacturerID: "0056",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0021,
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New005900010001() *Device{
	return &Device{
		Brand: "Thermoplus ASR-RF Receiver",
		Product: "Thermoplus ASR-RF",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0059",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0040,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New005900010002() *Device{
	return &Device{
		Brand: "Z-Wave",
		Product: "AS2-RF",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0059",
		ProductType: "0001",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New005900010003() *Device{
	return &Device{
		Brand: "HRT4",
		Product: "HRT4-ZW ",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0059",
		ProductType: "0001",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
				Version: "0",
			},
			&CommandClass{
				ID: 0x0040,
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Enables Temperature Sensor",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 255,
						To: 128,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Temperature Scale",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Celsius",
						Unit: "",
					},
					Value{
						From: 255,
						To: 128,
						Desc: "Fahrenheit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Delta T",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Kelvin",
						Unit: "0.1 K",
					},
				},
			},
		},
	}
}
func New005900010004() *Device{
	return &Device{
		Brand: "Secure",
		Product: "SRT 323",
		Description: "\n            \n          ",

		ManufacturerID: "0059",
		ProductType: "0001",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0042,
			},
			&CommandClass{
				ID: 0x0040,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Parameter Number 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Disables the temperature sensor",
						Unit: "",
					},
					Value{
						From: 128,
						To: 255,
						Desc: "Enables the temperature sensor",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Parameter Number 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Celsius",
						Unit: "",
					},
					Value{
						From: 128,
						To: 255,
						Desc: "Fahrenheit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Parameter Number 3",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Changes temperature in 0.1°C steps.",
						Unit: "°C",
					},
				},
			},
		},
	}
}
func New005900010005() *Device{
	return &Device{
		Brand: "Secure Controls",
		Product: "SRT-321 (Thermostat-HVAC)",
		Description: "\n            \n          ",

		ManufacturerID: "0059",
		ProductType: "0001",
		ProductID: "0005",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0042,
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temperature Sensor",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Disables the temperature sensor.",
						Unit: "",
					},
					Value{
						From: 128,
						To: 255,
						Desc: "Enables temperature sensor.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Temperature Scale",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Celsius",
						Unit: "",
					},
					Value{
						From: 128,
						To: 255,
						Desc: "Fahrenheit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Delta Temperature",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New005900020002() *Device{
	return &Device{
		Brand: "Secure",
		Product: "CentaurPlus C17-ZW",
		Description: "\n            \n          ",

		ManufacturerID: "0059",
		ProductType: "0002",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New005900030001() *Device{
	return &Device{
		Brand: "HRT4 ",
		Product: "HRT4 ASR-ZW ",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0059",
		ProductType: "0003",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0040,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New005900030002() *Device{
	return &Device{
		Brand: "ASR2-RF",
		Product: "Thermoplus ASR2-RF",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0059",
		ProductType: "0003",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0040,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New005900040001() *Device{
	return &Device{
		Brand: "Horstmann (Secure)",
		Product: "SCSC17",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0059",
		ProductType: "0004",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0042,
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temperature unit",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "degree Celsius\n",
						Unit: "°C",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Kelvin",
						Unit: "K",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Lower temperature limit",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 30,
						Desc: "",
						Unit: " ̊C/ ̊F",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Upper temperature limit",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 30,
						Desc: "",
						Unit: " ̊C/ ̊F",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Delta T",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 50,
						Desc: "",
						Unit: "0.1  ̊C / ̊F",
					},
				},
			},
		},
	}
}
func New005900050001() *Device{
	return &Device{
		Brand: "S123R",
		Product: "E-Meter S123R",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0059",
		ProductType: "0005",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008a,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
			},
			&CommandClass{
				ID: 0x0035,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0036,
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New005900050005() *Device{
	return &Device{
		Brand: "Horstmann",
		Product: "Generation Meter Series P    ",
		Description: "\n            \n          ",

		ManufacturerID: "0059",
		ProductType: "0005",
		ProductID: "0005",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Delta instantaneous power",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 24000,
						Desc: "Define delta parameter for reporting the instantaneous power.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Delta Energy",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Define delta energy.\n\nControllers may only allow configuring signed values. In order to set values in the range of 32768…65535, the value sent in the application should be equal to desired value minus 65536.\nFor example, to set Delta Energy to 36000 Wh, you must set a value as 36000−65536=−29536.",
						Unit: "Wh",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Instantaneous power Reporting intervals",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 18204,
						Desc: "Define time interval for power report.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Energy Reporting intervals",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 18204,
						Desc: "Define time interval for energy report.",
						Unit: "sec",
					},
				},
			},
		},
	}
}
func New0059000d0001() *Device{
	return &Device{
		Brand: "Secure",
		Product: "SES301 Secure Temperature Sensor Z-Wave",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0059",
		ProductType: "000d",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temperature Scale",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Celsius",
						Unit: "",
					},
					Value{
						From: 128,
						To: 255,
						Desc: "Fahrenheit",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Default",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Delta Temperature",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "* 0,1 K",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "default is 10 (steps of 1,0C°) ",
						Unit: "",
					},
				},
			},
		},
	}
}
func New0059000d0002() *Device{
	return &Device{
		Brand: "Secure",
		Product: "Secure Environment Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0059",
		ProductType: "000d",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "6",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temperature",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Configure delta temperature in 0.1 °C steps.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Temperature reporting intervals",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Set reporting intervals in 1 min steps.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Humidity",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Set delta humidity in 0.1 %Rh steps.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Humidity reporting intervals",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Set delta humidity intervals in 1 min steps.",
						Unit: "min",
					},
				},
			},
		},
	}
}
func New0059000d0003() *Device{
	return &Device{
		Brand: "Secure ",
		Product: "Secure Environment Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0059",
		ProductType: "000d",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "6",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temperature",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable delta temperature",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Configure delta temperature in 0.1 °C steps.",
						Unit: "°C",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Temperature reporting intervals",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Set reporting intervals in 1 min steps.",
						Unit: "mins",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Disable temperature reporting intervals.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Humidity ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Set delta humidity in 0.1 %Rh steps.",
						Unit: "%Rh",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Disable delta humidity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Humidity reporting intervals",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Set delta humidity intervals in 1 min steps.",
						Unit: "mins",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Disable delta humidity intervals.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New0059000e0001() *Device{
	return &Device{
		Brand: "Secure ",
		Product: "SSP 301",
		Description: "\n            \n          ",

		ManufacturerID: "0059",
		ProductType: "000e",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Delta based switch Status reporting",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = disable status reporting",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = enable status reporting",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Time interval based Switch Status Reporting",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32768,
						To: 32767,
						Desc: "Define time interval.",
						Unit: "sec",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Relay &amp; LED configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Relay status after\npower cycle = off; LED status is ON for relay close and OFF for relay open.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Retain last status over the\npower cycle; LED status is ON for relay close and OFF for relay open.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Relay status after\npower cycle = off; LED status is ON for relay open and OFF for relay close.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Retain last status over the\npower cycle; LED status is ON for relay open and OFF for relay close.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New0059000e0002() *Device{
	return &Device{
		Brand: "Secure",
		Product: "SSP 301",
		Description: "\n            \n          ",

		ManufacturerID: "0059",
		ProductType: "000e",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Delta based switch Status reporting",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch status report is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch status report is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Time interval based Switch Status Reporting",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Define time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Relay &amp; LED configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Relay status after power cycle = off; LED status is ON for relay close and OFF for relay open.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Retain last status over the power cycle; LED status is ON for relay close and OFF for relay open.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Relay status after power cycle = off; LED status is ON for relay open and OFF for relay close.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "	Retain last status over the power cycle; LED status is ON for relay open and OFF for relay close.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New0059000f0001() *Device{
	return &Device{
		Brand: "SWM01",
		Product: "SWM01",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0059",
		ProductType: "000f",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0032,
			},
			&CommandClass{
				ID: 0x009c,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Accumulated Register Value",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 99999999,
						Desc: "m3/Hr",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Reading Reporting Interval",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 10000,
						Desc: "minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Delta Configuration Reading",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 10000,
						Desc: "m3/Hr",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Serial Number Water Meter",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 5,
				Name: "Serial Number Z-Wave Module",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
		},
	}
}
func New005900100002() *Device{
	return &Device{
		Brand: "Secure",
		Product: "RF Countdown Timer",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0059",
		ProductType: "0010",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0053,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Fail Save timer",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivate the Fail Save timer",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Temperature Scale",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Temperaturescale = Celsius",
						Unit: "",
					},
					Value{
						From: 128,
						To: 255,
						Desc: "Temperaturescale = Fahrenheit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Temperature reporting intervals",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "Reportinginterval in sec.",
						Unit: "sec",
					},
					Value{
						From: 32768,
						To: 65535,
						Desc: "Reportinginterval in sec.\nDefine time interval for temperature report. Values 128 to 255 are defined as -128 to -1.",
						Unit: "sec",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Delta configuration temperature reporting",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Set the delta-configuration of the temperature report in °C.",
						Unit: "C",
					},
					Value{
						From: 1,
						To: 500,
						Desc: "Set the delta-configuration of the temperature report in °F.",
						Unit: "F",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Temperature Cutoff",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 1000,
						Desc: "Temperatur Cutoff",
						Unit: "°C",
					},
					Value{
						From: 320,
						To: 2120,
						Desc: "Temperatur Cutoff",
						Unit: "°F",
					},
				},
			},
		},
	}
}
func New005900110001() *Device{
	return &Device{
		Brand: "Secure ",
		Product: "Secure Smart Plug",
		Description: "\n            \n          ",

		ManufacturerID: "0059",
		ProductType: "0011",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x003d,
			},
			&CommandClass{
				ID: 0x003c,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x008a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Switch Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Voltage",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 600,
						Desc: "Define delta parameter.\nRange is from 0.1V to 60V.\nResolution is 0.1.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Current",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1500,
						Desc: "Define current parameter.\nRange is from 0.01A to 15A. \nResolution is 0.01.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Power Factor",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1000,
						Desc: "Define parameter for Power Factor.\nRange is from 0.1% to 100%.\nResolution is 0.1.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Active Power",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 4000,
						Desc: "Define parameter for Active Power.\n",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Active Energy",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32000,
						Desc: "Define parameter for Active Energy.",
						Unit: "Wh",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Apparent Energy",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32000,
						Desc: "Define parameter for Apparent Energy.",
						Unit: "VAh",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Switch Status",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Set a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Voltage",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Set a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Current",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Set a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Power Factor",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Set a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Active Power",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Set a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Active Energy",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Set a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Apparent Energy",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Set a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Relay and LED configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Relay status after power cycle = Open; LED status is ON for relay close and OFF for relay open.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Retain last status over the power cycle; LED status is ON for relay close and OFF for relay open.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Relay status after power cycle = Open; LED status is ON for relay open and OFF for relay close.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Retain last status over the power cycle; LED status is ON for relay open and OFF for relay close.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Sleep current configuration",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Define the parameter. Range is from 0A to 1A. Resolution is 0.001. Example: 0.5A = 0.5/.001 = 500",
						Unit: "",
					},
				},
			},
		},
	}
}
func New005900110002() *Device{
	return &Device{
		Brand: "Secure",
		Product: "Secure Smart Plug",
		Description: "\n            \n          ",

		ManufacturerID: "0059",
		ProductType: "0011",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x003d,
			},
			&CommandClass{
				ID: 0x003c,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x008a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Switch Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Voltage",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 600,
						Desc: "Define delta parameter. Range is from 0.1V to 60V. Resolution is 0.1.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Current",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1500,
						Desc: "Define current parameter. Range is from 0.01A to 15A. Resolution is 0.01.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Power Factor",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1000,
						Desc: "Define parameter for Power Factor. Range is from 0.1% to 100%. Resolution is 0.1.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Active Power",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 4000,
						Desc: "Define parameter for Active Power.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Active Energy",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32000,
						Desc: "Define parameter for Active Energy.",
						Unit: "Wh",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Apparent Energy",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32000,
						Desc: "Define parameter for Apparent Energy.",
						Unit: "VAh",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Switch Status",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Set a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Voltage",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Set a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Current",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Set a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Power Factor",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Set a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Active Power",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Set a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Active Energy",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Set a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Apparent Energy",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.\n",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Set a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Relay and LED configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Relay status after power cycle = Open; LED status is ON for relay close and OFF for relay open.\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Retain last status over the power cycle; LED status is ON for relay close and OFF for relay open.\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Relay status after power cycle = Open; LED status is ON for relay open and OFF for relay close.\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Retain last status over the power cycle; LED status is ON for relay open and OFF for relay close.\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Sleep current configuration",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.\n",
						Unit: "",
					},
					Value{
						From: 32768,
						To: 32767,
						Desc: "Define the parameter. Range is from 0A to 1A. Resolution is 0.001. Example: 0.5A = 0.5/.001 = 500\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006000010001() *Device{
	return &Device{
		Brand: "MK",
		Product: "Wave PIR Movement Sensor(EU) - 300 Series",
		Description: "\n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Configuring the Phase Level of ON Command",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Device Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Device On",
						Unit: "",
					},
					Value{
						From: 100,
						To: 127,
						Desc: "Device On to the last phase (before the device was turned off)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Enabling/Disabling Power Saving Function",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Power saving enabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Power saving disabled",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006000010002() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "Z-Wave PIR Sensor(ANZ) - 300 Series",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0001",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006000020001() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "SM103",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0002",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Level sent on open event",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Level",
						Unit: "",
					},
					Value{
						From: 99,
						To: 99,
						Desc: "100%",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "OFF Delay",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Immediately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Seconds",
						Unit: "sec",
					},
				},
			},
		},
	}
}
func New006000030001() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "Z-Wave Dimmer/Lamp module Plug  – 300 Series",
		Description: "\n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0003",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006000030002() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "In Wall Dimmer Module -500 Series",
		Description: "\n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0003",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Basic Set Command Value",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "ON",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Time Delay",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 25,
						Desc: "Define the time delay.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Last Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "do not remember",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "remember",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Switch 1 Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: " Single Pole Double Throw",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Toggle switch",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Output Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "diming",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "on/off",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006000030003() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "Z-Wave Dimmer Plug -500 Series",
		Description: "\n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0003",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Basic Set Command value",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Delay Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 25,
						Desc: "Define the time delay.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Last Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Last status is not remembered.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Last status is remembered.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Output mode setting",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Dimming",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ON/OFF",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006000040001() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "AN145",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0004",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006000040002() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "AN158",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0004",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "True Period",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 120,
						Desc: "10 * 100 ms  = 1 sec",
						Unit: "* 100 ms",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Send Out Basic Command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 3240,
						Desc: "Interval = Wert * 10 sec",
						Unit: "* 10 s",
					},
				},
			},
		},
	}
}
func New006000040006() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "Z-Wave Meter Mini Plug -500 Series",
		Description: "\n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0004",
		ProductID: "0006",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Basic Set Command value",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Delay Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 25,
						Desc: "Define the delay time.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Last Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The last status is not remembered.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The last status is remembered.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Wattage Auto Report",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define the time interval.",
						Unit: "min",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "The automatic report is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Energy Auto report",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define the time interval.",
						Unit: "min",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "The automatic report is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Value of Wattage surpassed",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 2500,
						Desc: "Define the treshold of wattage.",
						Unit: "W",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Change of Wattage surpassed",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Define the level of change in percent.",
						Unit: "%",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006000040007() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "Z-Wave On/Off  Mini Plug -500 Series",
		Description: "\n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0004",
		ProductID: "0007",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Basic Set Command value",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Delay Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 25,
						Desc: "Define the time delay.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Last Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The last status is not remembered.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The last status is remembered.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006000040008() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "In Wall On/Off Module -500 Series",
		Description: "\n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0004",
		ProductID: "0008",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006000060001() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "Temperature/Humidity Sensor 2.0 ST814",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0006",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Basic Level Set",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Use value",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Temperature Trigger ON value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 236,
						To: 255,
						Desc: "Trigger On on",
						Unit: "°C",
					},
					Value{
						From: 0,
						To: 50,
						Desc: "Trigger On on",
						Unit: "°C",
					},
					Value{
						From: 99,
						To: 99,
						Desc: "Disable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Temperature Trigger OFF value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 236,
						To: 255,
						Desc: "Trigger Off on",
						Unit: "°C",
					},
					Value{
						From: 0,
						To: 50,
						Desc: "Trigger Off on",
						Unit: "°C",
					},
					Value{
						From: 99,
						To: 99,
						Desc: "Disable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Humidity Trigger ON value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 20,
						To: 90,
						Desc: "Trigger On on",
						Unit: "%",
					},
					Value{
						From: 99,
						To: 99,
						Desc: "Disable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Humidity Trigger OFF value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 20,
						To: 90,
						Desc: "Tigger Off on",
						Unit: "%",
					},
					Value{
						From: 99,
						To: 99,
						Desc: "Disable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Auto Report Time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 1439,
						Desc: "Auto report periodically",
						Unit: "min",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Auto Report Temperature",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 70,
						Desc: "Auto report on temp. change",
						Unit: "deg",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Auto Report Humidity",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 70,
						Desc: "Auto report on humidity change",
						Unit: "%",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006000070001() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "Z-Wave Illumination Sensor(US)-300 Series",
		Description: "\n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0007",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0070,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Send Basic Set level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "",
						Unit: "Dimmer level",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Lux trigger on value",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 30,
						To: 1000,
						Desc: "Lux",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Lux Trigger off value",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 30,
						To: 1000,
						Desc: "",
						Unit: "Lux",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Lux Trigger off Time value",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 480,
						Desc: "",
						Unit: "minutes",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Auto Report Time Interval",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 1439,
						Desc: "",
						Unit: "minutes",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Disable Auto Report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Auto Report Lux Trigger Interval",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 30,
						To: 1000,
						Desc: "",
						Unit: "Lux",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Disable Auto Report",
						Unit: "",
					},
				},
			},
		},
	}
}
func New0060000b0001() *Device{
	return &Device{
		Brand: "Everspring Flood Detector",
		Product: "Z-Wave Flood Sensor (US) - 300 Series",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0060",
		ProductType: "000b",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x009c,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Basic Level Set",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "on for binary switch, dim level for dimmers and motor control",
						Unit: "",
					},
				},
			},
		},
	}
}
func New0060000c0001() *Device{
	return &Device{
		Brand: "EVERSPRING",
		Product: "Z-WAVE INDOOR SIREN (ANZ) - 300 SERIES",
		Description: "\n            \n          ",

		ManufacturerID: "0060",
		ProductType: "000c",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New0060000d0001() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "Z-Wave Smoke Sensor (ANZ) - 300 Series",
		Description: "\n            \n          ",

		ManufacturerID: "0060",
		ProductType: "000d",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x009c,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New0060000e0001() *Device{
	return &Device{
		Brand: "Flex-Control Z-Wave Products",
		Product: "Z-Wave Gateway (EU) w/ Casiva Server Solution",
		Description: "\n            \n          ",

		ManufacturerID: "0060",
		ProductType: "000e",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006000100001() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "In-wall remote module HAC01",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0010",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Basic Set Level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "On (binary switch device);\ndim level (multilevel switch device)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Amount of delay",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "immediately Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "delay 1 ~ 127 second to Off",
						Unit: "1s",
					},
				},
			},
		},
	}
}
func New006001010001() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "SP103",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0101",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Phase Level for ON Command",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Set Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 96,
						Desc: "Set On",
						Unit: "",
					},
					Value{
						From: 97,
						To: 239,
						Desc: "Set On to the last Dimmer phase",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Unterdrücke Schlaf-Funktion",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006001030001() *Device{
	return &Device{
		Brand: "Everspring",
		Product: "AN142",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0103",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "0",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006002020001() *Device{
	return &Device{
		Brand: "Z-Wave",
		Product: "ST812 old",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0060",
		ProductType: "0202",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006344503030() *Device{
	return &Device{
		Brand: "GE",
		Product: "Lamp Module",
		Description: "\n            \n          ",

		ManufacturerID: "0063",
		ProductType: "4450",
		ProductID: "3030",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 29,
				Name: "Load Sensing",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Load sensing is disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable load sensing function",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Dim Rate Adjustments when receiving a Z-Wave Dim Command/ number of steps",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Dim Rate Adjustments when receiving a Z-Wave Dim Command/ timing of the steps",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Manual Control Dimming/ number of steps or levels",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Manual Control Dimming/ timing of steps",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Dim Rate Adjustments when receiving an All-On or All-Off Command/ number of steps or levels",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Dim Rate Adjustments when receiving an All-On or All-Off Command/ timing of steps",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Ignore start level when receiving dim commands",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Setting parameter 5 to a value of 0 will cause the\n45602 to dim or brighten from the start level embedded\nin the command.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore start level.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006344503130() *Device{
	return &Device{
		Brand: "GE",
		Product: "Energy Monitoring Lamp Module",
		Description: "\n            \n          ",

		ManufacturerID: "0063",
		ProductType: "4450",
		ProductID: "3130",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 7,
				Name: "Number of steps or levels when receiving a dim command",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "",
						Unit: "10miliseconds",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Timing of steps when receiving a Dim Command",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "",
						Unit: "10miliseconds",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Number of steps or levels when controlling manually",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "",
						Unit: "10miliseconds",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Timing of steps when controlling manually",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "",
						Unit: "10miliseconds",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Number of steps or levels when receiving All-On/All-Off Command",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "",
						Unit: "10miliseconds",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Timing of steps when receiving All-On/All-Off Command",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "",
						Unit: "10miliseconds",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Ignore Start Level when receiving dim commands",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Dim or brighten from the Start Level embedded in the command",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore Start Level when receiving dim command",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006344573230() *Device{
	return &Device{
		Brand: "GE",
		Product: "In-Wall Dimmer",
		Description: "\n            \n          ",

		ManufacturerID: "0063",
		ProductType: "4457",
		ProductID: "3230",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "LED",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The LED is set to turn ON when the connected light is turned OFF. This allows the LED to indicate the switch’s location in a dark room.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To make the LED turn ON when the light is turned ON, change parameter 3’s value to “1”",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Invert Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Normal rocker settings.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "If the switch is accidentally installed upside down with “On” at the bottom and “Off” at the top, the default On/Off rocker settings can be reversed by changing parameter 4’s value to “1”.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Dim Rate Adjustments when receiving a Z-Wave Dim Command/ Number of steps or levels",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Dim Rate Adjustments when receiving a Z-Wave Dim Command/ Timing of steps",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Manual Control Dimming/ Number of steps or levels",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Manual Control Dimming/ Timing of the steps",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Dim Rate Adjustments when receiving an All-On or All-Off Command/ Number of steps or levels",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Dim Rate Adjustments when receiving an All-On or All-Off Command/ Timing of steps",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Ignore start level when receiving dim commands",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Dim or brighten from the start level embedded in the command.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore the start level.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006350443131() *Device{
	return &Device{
		Brand: "Jasco",
		Product: "Plug-in Dual Smart Dimmer With USB Charging",
		Description: "\n            \n          ",

		ManufacturerID: "0063",
		ProductType: "5044",
		ProductID: "3131",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "3",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "All On/All Off ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "It will respond to ALL ON and the ALL OFF command.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "It will not respond to ALL ON or ALL OFF commands. ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "It will respond to the ALL OFF command but will not respond to the ALL ON command. ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "It will respond to the ALL ON command but will not respond to the ALL OFF command. ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Dim Rate Adjustments Endpoint 1 Number of Steps",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Define the number of steps.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Dim Rate Adjustments Endpoint 1 Timing of Steps",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Define the timing of the steps.",
						Unit: "x 10ms",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Dim Rate Adjustments Endpoint 2 Number of Steps",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Define the number of steps.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Dim Rate Adjustments Endpoint 2 Timing of Steps",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Define the timing of the steps.",
						Unit: "x 10ms",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Dim Rate Adjustments ALL Command Speed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Adjust the all command speed.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Dim Rate Adjustments ALL Command Timer",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Adjust the all command timer.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006352503030() *Device{
	return &Device{
		Brand: "GE",
		Product: "Fluorescent Light &amp; Appliance Module",
		Description: "\n            \n          ",

		ManufacturerID: "0063",
		ProductType: "5250",
		ProductID: "3030",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006352503031() *Device{
	return &Device{
		Brand: "GE",
		Product: "Energy Monitoring Fluorescent Light &amp; Appliance Module",
		Description: "\n            \n          ",

		ManufacturerID: "0063",
		ProductType: "5250",
		ProductID: "3031",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006352503130() *Device{
	return &Device{
		Brand: "GE",
		Product: "Outdoor Module",
		Description: "\n            \n          ",

		ManufacturerID: "0063",
		ProductType: "5250",
		ProductID: "3130",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006352523530() *Device{
	return &Device{
		Brand: "GE",
		Product: "Duplex Receptacle 3.0b",
		Description: "\n            \n          ",

		ManufacturerID: "0063",
		ProductType: "5252",
		ProductID: "3530",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "LED light",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The LED on the 45605 is\nset to turn ON when the connected outlet is turned OFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The LED turns ON when the light is turned ON",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006352573533() *Device{
	return &Device{
		Brand: "GE",
		Product: "In-Wall Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0063",
		ProductType: "5257",
		ProductID: "3533",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "LED Light",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The LED is set to turn ON when the connected light is turned OFF. ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The LED is set to ON when the connected light is turned ON.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Invert Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Default rocker settings.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Reverses the default On/Off rocker settings, if the switch is accidentally installed upside down with On at the bottom and Off at the top. ",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006400010000() *Device{
	return &Device{
		Brand: "Düwi",
		Product: "Insert dimmer",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0064",
		ProductType: "0001",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0082,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006410000002() *Device{
	return &Device{
		Brand: "Duwi",
		Product: "Flush-Mountable Switch for two-wire electric system 3.0",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0064",
		ProductType: "1000",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x002d,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Show switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Night mode (inverted switch state)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Operated by Indicator Command Class",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically switch off after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF off command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on if load is off else switch off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "What to do on button Down press",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On if load is Off, else switch Off",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Ignore start level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Dimming speed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Instantly",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Dimming long speed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Set maximum light level on On click",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "If already On",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Always",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Baby Dimming time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "in minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Target dimming level for Baby Dimming",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Typical click timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Switch by buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "By single press and hold",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "By double press and press-hold",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Action on button single press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Action on button double press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Limit minimal light level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 95,
						Desc: "Level limit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Limit maximal light level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Work as switch: use off and maximal level",
						Unit: "",
					},
					Value{
						From: 10,
						To: 99,
						Desc: "Level limit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Parameter 19",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Use previous light level",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define light level",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "The measurement of power consumption",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 300,
						Desc: "Watts",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 51,
				Name: "Pause before pulse",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 60,
						Desc: "",
						Unit: "10/156 ms",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "Pause after pulse",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 60,
						Desc: "",
						Unit: "10/156 ms",
					},
				},
			},
			&parameter{
				ID: 53,
				Name: "Pulse width",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 20,
						Desc: "",
						Unit: "10/156 ms",
					},
				},
			},
			&parameter{
				ID: 54,
				Name: "Pulse type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Long pulse",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Short pulse",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 55,
				Name: "Switch or Dimmer",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Dimmer",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch",
						Unit: "",
					},
				},
			},
		},
	}
}
func New006410010000() *Device{
	return &Device{
		Brand: "Duewi Z-Wave",
		Product: "Schuko Plug Dimmer",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0064",
		ProductType: "1001",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0082,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006420010000() *Device{
	return &Device{
		Brand: "Düwi",
		Product: "Insert switch",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0064",
		ProductType: "2001",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0082,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006430010000() *Device{
	return &Device{
		Brand: "Düwi",
		Product: "Schuko Plug Switch",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0064",
		ProductType: "3001",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0082,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006440010000() *Device{
	return &Device{
		Brand: "Düwi",
		Product: "Insert blind control",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0064",
		ProductType: "4001",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0082,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006450010000() *Device{
	return &Device{
		Brand: "Düwi Z-Wave",
		Product: "Remote Control",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0064",
		ProductType: "5001",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006450020000() *Device{
	return &Device{
		Brand: "Düwi",
		Product: "Wall controller",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0064",
		ProductType: "5002",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006450030000() *Device{
	return &Device{
		Brand: "Düwi",
		Product: "Switching Centre",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0064",
		ProductType: "5003",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006800000000() *Device{
	return &Device{
		Brand: "Good Way",
		Product: "SerialAPI PC Controller ",
		Description: "\n            \n          ",

		ManufacturerID: "0068",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
		},
		Parameters: []*parameter{
		},
	}
}
func New006800000004() *Device{
	return &Device{
		Brand: "Good Way",
		Product: "Z-Wave Power Monitor Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0068",
		ProductType: "0000",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0032,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006800000005() *Device{
	return &Device{
		Brand: "Good Way",
		Product: "Z-Wave Power Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0068",
		ProductType: "0000",
		ProductID: "0005",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006800000006() *Device{
	return &Device{
		Brand: "Good Way",
		Product: "Z-Wave Power Monitor",
		Description: "\n            \n          ",

		ManufacturerID: "0068",
		ProductType: "0000",
		ProductID: "0006",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New006b00000000() *Device{
	return &Device{
		Brand: "Z-Wave",
		Product: "Remote Control",
		Description: "\n            \n            \n          ",

		ManufacturerID: "006b",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
				Version: "0",
			},
			&CommandClass{
				ID: 0x0021,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New00710002035d() *Device{
	return &Device{
		Brand: "",
		Product: "E861C",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0071",
		ProductType: "0002",
		ProductID: "035d",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Delta Percentage",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 2,
						To: 56,
						Desc: "Delta",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Celsius/Fahrenheit",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 64,
						Desc: "Celsius",
						Unit: "",
					},
					Value{
						From: 64,
						To: 127,
						Desc: "Fahrenheit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Send setpoint when wakeup",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 64,
						Desc: "send",
						Unit: "",
					},
					Value{
						From: 64,
						To: 127,
						Desc: "do not send",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00710004035d() *Device{
	return &Device{
		Brand: "LS Control",
		Product: "E861H",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0071",
		ProductType: "0004",
		ProductID: "035d",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Delta Percentage",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 2,
						To: 10,
						Desc: "Delta",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Send setpoint when wakeup",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 64,
						Desc: "send",
						Unit: "",
					},
					Value{
						From: 64,
						To: 127,
						Desc: "do not send",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00710005035d() *Device{
	return &Device{
		Brand: "LS Control",
		Product: "E861P",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0071",
		ProductType: "0005",
		ProductID: "035d",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New007a00000000() *Device{
	return &Device{
		Brand: "CONNECT",
		Product: "506923",
		Description: "\n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x007b,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New007a00010002() *Device{
	return &Device{
		Brand: "CONNECT",
		Product: "5051xx",
		Description: "\n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "0001",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 0,
				Name: "Switching/dimming/shutters",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Switching single-surface",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Doorbell function ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 54,
				Name: "Move shutter single-surface",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "LOWER shutter as long as button is pressed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 55,
				Name: "RAISE shutter as long as button is pressed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
		},
	}
}
func New007a00010004() *Device{
	return &Device{
		Brand: "CONNECT",
		Product: "5052xx",
		Description: "\n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "0001",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 0,
				Name: "Switching/dimming/shutters",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Switching single-surface",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Doorbell function ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 54,
				Name: "Move shutter single-surface",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "LOWER shutter as long as button is pressed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 55,
				Name: "RAISE shutter as long as button is pressed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
		},
	}
}
func New007a00020001() *Device{
	return &Device{
		Brand: "CONNECT",
		Product: "5082xx",
		Description: "\n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "0002",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 4,
				Name: "Switching single-surface",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Doorbell function ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 54,
				Name: "Move shutter single-surface",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "LOWER shutter as long as button is pressed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 55,
				Name: "RAISE shutter as long as button is pressed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
		},
	}
}
func New007a00020004() *Device{
	return &Device{
		Brand: "Schneider",
		Product: "Remote Control",
		Description: "\n            \n          ",

		ManufacturerID: "007a",
		ProductType: "0002",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0021,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Group/Scene representation of zone 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No group or scene in zone1",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Group is assigned in zone 1",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Scene is assigned in zone 1",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Group/Scene representation of zone 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No group or scene in zone 2",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Group is assigned in zone 2",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Scene is assigned in zone 2",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Group/Scene representation of zone 3",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No group or scene in zone 3",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Group is assigned in zone 3",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Scene is assigned in zone 3",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Group/Scene representation of zone 4",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No group or scene in zone 4",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Group is assigned in zone 4",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Scene is assigned in zone 4",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Group/Scene representation of zone 5",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No group or scene in zone 5",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Group is assigned in zone 5",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Scene is assigned in zone 5",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Group/Scene representation of zone 6",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No group or scene in zone 6",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Group is assigned in zone 6",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Scene is assigned in zone 6",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Group/Scene representation of zone 7",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No group or scene in zone 7",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Group is assigned in zone 7",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Scene is assigned in zone 7",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Group/Scene representation of zone 8",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No group or scene in zone 8",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Group is assigned in zone 8",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Scene is assigned in zone 8",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Group/Scene representation of zone 9",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No group or scene in zone 9",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Group is assigned in zone 9",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Scene is assigned in zone 9",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Group/Scene representation of zone 10",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No group or scene in zone 10",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Group is assigned in zone 10",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Scene is assigned in zone 10",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Group/Scene representation of zone 11",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No group or scene in zone 11",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Group is assigned in zone 11",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Scene is assigned in zone 11",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Group/Scene representation of zone 12",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No group or scene in zone 12",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Group is assigned in zone 12",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Scene is assigned in zone 12",
						Unit: "",
					},
				},
			},
		},
	}
}
func New007a00030004() *Device{
	return &Device{
		Brand: "Merten",
		Product: "506004",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "0003",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0060,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x008e,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 0,
				Name: "Switching/dimming/shutters",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Switching single-surface",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Doorbell function ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 54,
				Name: "Move shutter single-surface",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "LOWER shutter as long as button is pressed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 55,
				Name: "RAISE shutter as long as button is pressed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
		},
	}
}
func New007a40020001() *Device{
	return &Device{
		Brand: "CONNECT",
		Product: "5044xx",
		Description: "\n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "4002",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0028,
			},
			&CommandClass{
				ID: 0x008e,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New007a40030001() *Device{
	return &Device{
		Brand: "CONNECT",
		Product: "5046xx",
		Description: "\n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "4003",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0028,
			},
			&CommandClass{
				ID: 0x008e,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New007a40030002() *Device{
	return &Device{
		Brand: "CONNECT",
		Product: "507900",
		Description: "\n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "4003",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0029,
			},
			&CommandClass{
				ID: 0x008e,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 196,
				Name: "Dimming Speed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
		},
	}
}
func New007a40040001() *Device{
	return &Device{
		Brand: "CONNECT",
		Product: "50x5xx",
		Description: "\n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "4004",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
			},
			&CommandClass{
				ID: 0x0050,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x009e,
				Version: "0",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 176,
				Name: "Break (motor protection)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "VBreak = value  * 0.1 sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 177,
				Name: "travel time UP, Byte 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 178,
				Name: "travel time UP, Byte 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 179,
				Name: "travel time DOWN, Byte 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 180,
				Name: "travel time DOWN, Byte 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
		},
	}
}
func New007a80010001() *Device{
	return &Device{
		Brand: "CONNECT",
		Product: "508519",
		Description: "\n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "8001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0028,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New007a80018002() *Device{
	return &Device{
		Brand: "CONNECT",
		Product: "507501",
		Description: "\n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "8001",
		ProductID: "8002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0028,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 176,
				Name: "Staircase timer, Byte 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 177,
				Name: "Staircase timer, Byte 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 183,
				Name: "Additional Limit duration (after brief interruption)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
		},
	}
}
func New007a80018003() *Device{
	return &Device{
		Brand: "CONNECT",
		Product: "507601",
		Description: "\n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "8001",
		ProductID: "8003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0028,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 176,
				Name: "Staircase timer, Byte 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 177,
				Name: "Staircase timer, Byte 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 183,
				Name: "Additional Limit duration (after brief interruption)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
		},
	}
}
func New007a80018004() *Device{
	return &Device{
		Brand: "CONNECT",
		Product: "507502",
		Description: "\n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "8001",
		ProductID: "8004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0028,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 176,
				Name: "Staircase timer, Byte 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 177,
				Name: "Staircase timer, Byte 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 183,
				Name: "Additional Limit duration (after brief interruption)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
		},
	}
}
func New007a80020001() *Device{
	return &Device{
		Brand: "CONNECT",
		Product: "508619",
		Description: "\n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "8002",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0029,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New007a80030001() *Device{
	return &Device{
		Brand: "CONNECT",
		Product: "507801",
		Description: "\n            \n            \n          ",

		ManufacturerID: "007a",
		ProductType: "8003",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0050,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				InNIF: "false",
				Version: "0",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x009e,
				InNIF: "false",
				Version: "0",
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 177,
				Name: "travel time UP, Byte 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 178,
				Name: "travel time UP, Byte 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 179,
				Name: "travel time DOWN, Byte 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 180,
				Name: "travel time DOWN, Byte 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Config Byte",
						Unit: "",
					},
				},
			},
		},
	}
}
func New007f00010001() *Device{
	return &Device{
		Brand: "Harmony",
		Product: "Harmony Home Hub Extender",
		Description: "\n            \n          ",

		ManufacturerID: "007f",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0022,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0021,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x004d,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0034,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0054,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0045,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0042,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "3",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New008000040001() *Device{
	return &Device{
		Brand: "DUCO",
		Product: "Z-Wave RH Sensor ",
		Description: "\n            \n          ",

		ManufacturerID: "0080",
		ProductType: "0004",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x007a,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Measure Level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "",
						Unit: "Sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "CO² set point",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 32768,
						To: 32767,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Humidity set point",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Button 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Button 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Button 3",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Rooster Min Open",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Temperature high setpoint",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32768,
						To: 32767,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Temperature low setpoint",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32768,
						To: 32767,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Temperature delta setpoint",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32768,
						To: 32767,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "RH high setpoint",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32768,
						To: 32767,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "RH low setpoint",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32768,
						To: 32767,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "RH delta setpoint",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32768,
						To: 32767,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "CO2 high setpoint",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32768,
						To: 32767,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "CO2 lowsetpoint",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32768,
						To: 32767,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "CO2deltasetpoint",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32768,
						To: 32767,
						Desc: "",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008100140001() *Device{
	return &Device{
		Brand: "Siegenia-Aubi",
		Product: "Aeropac wave",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0081",
		ProductType: "0014",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Time to run",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 4080218932,
						Desc: "seconds",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Run duration",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1080,
						Desc: "",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Timer",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32769,
						Desc: "seconds",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Configuration parameters",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Enable timer",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Repeat timer every 24 hours",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008100a00001() *Device{
	return &Device{
		Brand: "SensoAir",
		Product: "Siegenia-Aubi",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0081",
		ProductType: "00a0",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x009e,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Configuration",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send unsolicitated reports when the C02 level hits 600, 800, 100, 1500, 2000 or 2500 ppm.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enables regular unsolicited Sensor reports.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "A BASIC Set command is send, when the sensor hits the defined CO2 level.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Enables broadcast reports.",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Enables the front side LED.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Interval for unsolicited Sensor Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "sec.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008400210109() *Device{
	return &Device{
		Brand: "Fortrezz",
		Product: "WWA-02 Wireless Water &amp; Temperature Alarm - EU",
		Description: "\n            \n          ",

		ManufacturerID: "0084",
		ProductType: "0021",
		ProductID: "0109",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Low Temperature Trigger Point",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 246,
						To: 127,
						Desc: "",
						Unit: "degrees",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "High Temperature Trigger Point",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 70,
						Desc: "",
						Unit: "degrees",
					},
				},
			},
		},
	}
}
func New00840021010a() *Device{
	return &Device{
		Brand: "Fortrezz",
		Product: "WWA-2",
		Description: "\n            \n          ",

		ManufacturerID: "0084",
		ProductType: "0021",
		ProductID: "010a",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New00840023010a() *Device{
	return &Device{
		Brand: "Fortrezz",
		Product: "WWA-02 Wireless Water &amp; Temperature Alarm - US",
		Description: "\n            \n          ",

		ManufacturerID: "0084",
		ProductType: "0023",
		ProductID: "010a",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Low Temperature Trigger Point",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 246,
						To: 127,
						Desc: "",
						Unit: "degrees",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "High Temperature Trigger Point",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 70,
						Desc: "",
						Unit: "degrees",
					},
				},
			},
		},
	}
}
func New008403130108() *Device{
	return &Device{
		Brand: "FortrezZ",
		Product: "Siren &amp; Strobe Alarm",
		Description: "\n            \n          ",

		ManufacturerID: "0084",
		ProductType: "0313",
		ProductID: "0108",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Delay before accept of Basic Set Off",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 255,
						Desc: "Interpreted as unsigned integer for negative values sent in set command.",
						Unit: "seconds",
					},
				},
			},
		},
	}
}
func New008500030001() *Device{
	return &Device{
		Brand: "ZWS12",
		Product: "CHAIN ACTUATOR ZWS12 ",
		Description: "\n            \n          ",

		ManufacturerID: "0085",
		ProductType: "0003",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0025,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0026,
				Secure: true,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0075,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New008500160001() *Device{
	return &Device{
		Brand: "Part of roller shutter ARZ-Solar Z-Wave",
		Product: "ZWRS MODULE",
		Description: "\n            \n          ",

		ManufacturerID: "0085",
		ProductType: "0016",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New008600000000() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Water Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "sensor binary report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Open: 00, Close: FF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Open: FF, Close: 00",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Wake up",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Basic set value",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Close-&gt;Open: 00, Open-&gt;Close: FF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Close-&gt;Open: FF, Open-&gt;Close: 00",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 121,
				Name: "Reports that will be sent",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery: The Battery flag signals that whether the Water Sensor sends (1) or not sends (0) the battery Report when\nthe probe touches the water.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Sensor\nBinary: The Sensor Binary flag signals that whether the Water Sensor sends (1) or not sends (0) the Sensor Binary\nReport when the probe touches the water.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 7,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Basic\nSet: The Basic set flag signals that whether the Water Sensor sends (1) or not sends (0) the Basic Set Command\nwhen the probe touches the water.",
						Unit: "",
					},
					Value{
						From: 9,
						To: 11,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "Alarm: The Alarm flag signals that whether the Water Sensor sends (1) or not sends (0) the Alarm Command when\nthe probe touches the water.",
						Unit: "",
					},
					Value{
						From: 13,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New008600010003() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Minimote EU",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0001",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New008600010058() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Key Fob Gen5 EU",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0001",
		ProductID: "0058",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 250,
				Name: "Group/Scene Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Group mode",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Scene mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to Default Settings",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New00860001005a() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Z-Stick Gen 5 EU",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0001",
		ProductID: "005a",
		CommandClasses: []*CommandClass{
		},
		Parameters: []*parameter{
		},
	}
}
func New008600020001() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Z-Stick EU",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0002",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New008600020004() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Door/Window Sensor",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0002",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New008600020005() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Multi Sensor 1.18",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0002",
		ProductID: "0005",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Sensor report type on Get without instances",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Temperature, humidity and luminance",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Humidity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Wake up 10 minutes when batteries are inserted",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "On time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 15300,
						Desc: "sec",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Enable motion sensor",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Send unsolicited reports periodicaly. Interval group 1",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery report",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Luminosity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Humidity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Send unsolicited reports periodicaly. Intervcal group 2",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery report",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Luminosity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Humidity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Send unsolicited reports periodicaly. Intervcal group 3",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery report",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Luminosity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Humidity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Unsolicitate reports interval for timing groups 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2678400,
						Desc: "sec",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Unsolicitate reports interval for timing groups 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2678400,
						Desc: "sec",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Unsolicitate reports interval for timing groups 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2678400,
						Desc: "sec",
						Unit: "seconds",
					},
				},
			},
		},
	}
}
func New008600020009() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Home Energy Meter",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0002",
		ProductID: "0009",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Voltage",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 120,
						To: 120,
						Desc: "US",
						Unit: "",
					},
					Value{
						From: 240,
						To: 240,
						Desc: "EU, ANZ",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00860002001c() *Device{
	return &Device{
		Brand: "AeonLabs",
		Product: "HEMG2",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0002",
		ProductID: "001c",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "If the reverse clamping pliers, negative power is detected.",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Automated Report only when power is changed",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Minimum Change to send Report (Watt) for the whole HEM",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32000,
						Desc: "W",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Minimum Change to send Report (Watt) for clamp 1",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32000,
						Desc: "W",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Minimum Change to send Report (Watt) for clamp 2",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32000,
						Desc: "W",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Minimum Change to send Report (Watt) for clamp 3",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32000,
						Desc: "W",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Minimum Change to send Report (%) for the whole HEM",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "%",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Minimum Change to send Report (%) for clamp 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "%",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Minimum Change to send Report (%) for clamp 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "%",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Minimum Change to send Report (%) for clamp 3",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "%",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Enable /disable reporting CRC-16 Encapsulation Command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Report type send in Reporting Group 1",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Battery Report",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report for the whole device",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt for the whole device",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh for the whole device",
						Unit: "",
					},
					Value{
						From: 256,
						To: 256,
						Desc: "Meter Report for Watt for clamp 1",
						Unit: "",
					},
					Value{
						From: 512,
						To: 512,
						Desc: "Meter Report for Watt for clamp 2",
						Unit: "",
					},
					Value{
						From: 1024,
						To: 1024,
						Desc: "Meter Report for Watt for clamp 3",
						Unit: "",
					},
					Value{
						From: 2048,
						To: 2048,
						Desc: "Meter Report for kWh for clamp 1",
						Unit: "",
					},
					Value{
						From: 4096,
						To: 4096,
						Desc: "Meter Report for Watt for clamp 2",
						Unit: "",
					},
					Value{
						From: 8192,
						To: 8192,
						Desc: "Meter Report for kWh for clamp 3",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Report Type send in Reporting Group 2",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Battery Report",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report for the whole device",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt for the whole device",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh for the whole device",
						Unit: "",
					},
					Value{
						From: 256,
						To: 256,
						Desc: "Meter Report for Watt for clamp 1",
						Unit: "",
					},
					Value{
						From: 512,
						To: 512,
						Desc: "Meter Report for Watt for clamp 2",
						Unit: "",
					},
					Value{
						From: 1024,
						To: 1024,
						Desc: "Meter Report for Watt for clamp 3",
						Unit: "",
					},
					Value{
						From: 2048,
						To: 2048,
						Desc: "Meter Report for kWh for clamp 1",
						Unit: "",
					},
					Value{
						From: 4096,
						To: 4096,
						Desc: "Meter Report for Watt for clamp 2",
						Unit: "",
					},
					Value{
						From: 8192,
						To: 8192,
						Desc: "Meter Report for kWh for clamp 3",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Report Type send in Reporting Group 3",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Battery Report",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report for the whole device",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt for the whole device",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh for the whole device",
						Unit: "",
					},
					Value{
						From: 256,
						To: 256,
						Desc: "Meter Report for Watt for clamp 1",
						Unit: "",
					},
					Value{
						From: 512,
						To: 512,
						Desc: "Meter Report for Watt for clamp 2",
						Unit: "",
					},
					Value{
						From: 1024,
						To: 1024,
						Desc: "Meter Report for Watt for clamp 3",
						Unit: "",
					},
					Value{
						From: 2048,
						To: 2048,
						Desc: "Meter Report for kWh for clamp 1",
						Unit: "",
					},
					Value{
						From: 4096,
						To: 4096,
						Desc: "Meter Report for Watt for clamp 2",
						Unit: "",
					},
					Value{
						From: 8192,
						To: 8192,
						Desc: "Meter Report for kWh for clamp 3",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Send Interval for Reporting Group 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Seconds",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Send Interval for Reporting Group 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Seconds",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Send Interval for Reporting Group 3",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Seconds",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 100,
				Name: "Set 101-103 to default",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 110,
				Name: "Set 111-113 to default",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 252,
				Name: "Enable/disable Configuration Locked",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New008600020036() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "DSB54",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0002",
		ProductID: "0036",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "sensor binary report for magnet switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "open = 00; close = 0xFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "open =  0xFF; close = 00",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "basic set for magnet switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "open = 00; close = 0xFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "open = 0xFF; close = 00",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "low battery voltage check function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "battery low check Interval time",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 121,
				Name: "Flag values for triggered magnet switch",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 252,
				Name: "permit other configurations",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "unlock",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "lock",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
		},
	}
}
func New00860002004a() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Multi Sensor Gen5",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0002",
		ProductID: "004a",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0031,
				Secure: true,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Sensor report type on Get without instances",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Temperature, humidity and luminance",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Humidity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Wake up 10 minutes when batteries are inserted",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "On time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 15300,
						Desc: "delay",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Enable motion sensor",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Send unsolicited reports periodicaly. Interval group 1",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperatur\ne",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminan\nce",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Send unsolicited reports periodicaly. Intervcal group 2",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Send unsolicited reports periodicaly. Intervcal group 3",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Unsolicitate reports interval for timing groups 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Unsolicitate reports interval for timing groups 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Unsolicitate reports interval for timing groups 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Motion Detection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Send Basic Set CC.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send Sensor Binary Report CC.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Reports for Parameters 41-44",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Temperature Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 42,
				Name: "Humidity Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold for the humidity reports.",
						Unit: "% RH",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Luminance Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1000,
						Desc: "Define a treshold for the luminance reports.",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Battery Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold for the battery level reports.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 46,
				Name: "Low Temperature Alarm Report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable to send the alarm report of low temperature",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable to send the alarm report of low temperature",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable all configuration parameters to be locked.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable all configuration parameters to be locked.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008600020059() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Recessed Door Sensor Gen5 EU",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0002",
		ProductID: "0059",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "sensor binary report for magnet switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "open = 00; close = 0xFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "open =  0xFF; close = 00",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "basic set for magnet switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "open = 00; close = 0xFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "open = 0xFF; close = 00",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "low battery voltage check function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "battery low check Interval time",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 2147483647,
						Desc: "Define the time interval to check the battery status.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 121,
				Name: "Command to Associated Nodes",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Sensor\nBinary",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Basic\nSet ",
						Unit: "",
					},
					Value{
						From: 9,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Unlock",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Lock",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008600020064() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "MultiSensor 6 EU",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0002",
		ProductID: "0064",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Wake up 10 minutes when batteries are inserted",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "On time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 15300,
						Desc: "delay",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Enable/disable the function of motion sensor. ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " enable, the current PIR sensitivity level=1. (minimum level) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "enable, the current PIR sensitivity level = 2.   ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: " enable, the current PIR sensitivity level=3.   ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "enable, the current PIR sensitivity level=4.  ",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "enable, the current PIR sensitivity level=5. (maximum level) ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Motion Detection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Send Basic Set CC.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send Sensor Binary Report CC.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: " low battery value.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 10,
						To: 50,
						Desc: "default value = 20 %",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Reports for Parameters 41-44",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Temperature Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 42,
				Name: "Humidity Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold for the humidity reports.",
						Unit: "% RH",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Luminance Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1000,
						Desc: "Define a treshold for the luminance reports.",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Battery Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold for the battery level reports.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "Threshold change in ultraviolet to induce an automatic report. ",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 11,
						Desc: "Define a treshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 46,
				Name: "Low Temperature Alarm Report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable to send the alarm report of low temperature",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable to send the alarm report of low temperature",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Send unsolicited reports periodicaly. Interval group 1",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Ultraviolet",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperatur\ne",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminan\nce",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Send unsolicited reports periodicaly. Intervcal group 2",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Ultraviolet",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Send unsolicited reports periodicaly. Intervcal group 3",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Ultraviolet",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Unsolicitate reports interval for timing groups 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Unsolicitate reports interval for timing groups 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Unsolicitate reports interval for timing groups 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 201,
				Name: "Temperature calibration",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 202,
				Name: "Humidity sensor calibration",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 203,
				Name: "Luminance sensor calibration",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 204,
				Name: "Ultraviolet sensor calibration",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable all configuration parameters to be locked.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable all configuration parameters to be locked.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008600030006() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Smart Energy Switch 1.43",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0003",
		ProductID: "0006",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Multilevel Sensor Report Content",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Power",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Voltage",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Blink",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Configuration Value 1 is\nto Specify the time\nthat SES need\nblink,The unit is\nSecond;",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Configuration Value 2 is\nto Specify the Cycle\nof on/off,the unit of it\nis 0.1 second.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Automatic Notifications",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "nothing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "hail",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "basic CC report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Enable Parameter 91 ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Minimum change in wattage",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 92,
				Name: "Minimum change in wattage (%)",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 100,
				Name: "Set 101-103 to default",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 101,
				Name: "Reports group 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Report group 2",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Report group 3",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 110,
				Name: "Set 111-113 to default",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 111,
				Name: "Interval group 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "interval (in seconds) to\nsend out Report group 1",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Interval group 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "interval (in seconds) to\nsend out Report group 2",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Interval group 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "interval (in seconds) to\nsend out Report group 3",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "Tag",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Factory Reset",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New00860003000a() *Device{
	return &Device{
		Brand: "Binary Power Switch",
		Product: "HDS",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0003",
		ProductID: "000a",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "Current Overload Protection",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Activate Overload Protection",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Deactivate Overload Protection",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Output Load Status",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "last status",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "always on",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "always off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notification on Status Change",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "nothing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "hail",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "basic CC report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Enables/disables parameter 91/92",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Enabled parameter 91/92",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disabled parameter 91/92",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Minimum Change to send Report (Watt)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32000,
						Desc: "The value represents the minimum change in wattage.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Minimum Change to send Report (%)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "The value represents the minimum change in wattage Percent.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "others",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Enable/disable Configuration Locking",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivate ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Activate  ",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00860003000b() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Aeon Labs Smart Strip",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0003",
		ProductID: "000b",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x00ef,
			},
			&CommandClass{
				ID: 0x0082,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 4,
				Name: "Wattage Report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Automatic Report Whole Smart Strip",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 38303,
						Desc: "Define a change in wattage to induce a report.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Automatic Report Socket 1",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 38303,
						Desc: "Define a change in wattage to induce a report.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Automatic Report Socket 2",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 38303,
						Desc: "Define a change in wattage to induce a report.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Automatic Report Socket 3",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 38303,
						Desc: "Define a change in wattage to induce a report.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Automatic Report Socket 4",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 38303,
						Desc: "Define a change in wattage to induce a report.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Automatic Report Socket 5",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 38303,
						Desc: "Define a change in wattage to induce a report.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Automatic Report Socket 6",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 38303,
						Desc: "Define a change in wattage to induce a report.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Automatic Report Whole Smart Strip",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a change in wattage to induce a report.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Automatic Report Socket 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a change in wattage to induce a report.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Automatic Report Socket 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a change in wattage to induce a report.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Automatic Report Socket 3",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a change in wattage to induce a report.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Automatic Report Socket 4",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a change in wattage to induce a report.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Automatic Report Socket 5",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a change in wattage to induce a report.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Automatic Report Socket 6",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a change in wattage to induce a report.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Status of Load",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No send.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send Hail CC.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send Basic report.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Get Temperature",
				Type: "bitset",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "2^-8",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "2^-7",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2^-6",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "2^-5",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "2^-4",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "2^-3",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "2^-2",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "2^-1",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "2^0",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "2^1",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "2^2",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "2^3",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "2^4",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "2^5",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "2^6",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "-(2^7)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 100,
				Name: "Reset Parameters 0x65~0x67",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 101,
				Name: "Auto Report Item 1",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nreport\nthe total\npower\nconsum\nption of\nall\nchannels\nwith\nspecified\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nreport\npower\nconsum\nption\nwith\nspecified\ntime\ninterval\n(channel\n1)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nreport\npower\nconsump\ntion with\nspecified\ntime\ninterval\n(channel\n2)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nreport\npower\nconsump\ntion with\nspecified\ntime\ninterval\n(channel\n3)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Auto\nreport\npower\nconsump\ntion with\nspecified\ntime\ninterval\n(channel\n4)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Auto\nreport\npower\nconsump\ntion with\nspecified\ntime\ninterval\n(channel\n5)",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Auto\nreport\npower\nconsump\ntion with\nspecified\ntime\ninterval\n(channel\n6)",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Auto\nreport\nthe total\npower\nlevel of\nall\nchannels\nWith\nspecified\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n1)",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n2)",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n3)",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n4)",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n5)",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n6)",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 16,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Auto Report Item 2",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nreport\nthe total\npower\nconsum\nption of\nall\nchannels\nwith\nspecified\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nreport\npower\nconsum\nption\nwith\nspecified\ntime\ninterval\n(channel\n1)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nreport\npower\nconsum\nption\nwith\nspecified\ntime\ninterval\n(channel\n2)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nreport\npower\nconsum\nption\nwith\nspecified\ntime\ninterval\n(channel\n3)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Auto\nreport\npower\nconsum\nption\nwith\nspecified\ntime\ninterval\n(channel\n4)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Auto\nreport\npower\nconsum\nption\nwith\nspecified\ntime\ninterval\n(channel\n5)",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Auto\nreport\npower\nconsum\nption\nwith\nspecified\ntime\ninterval\n(channel\n6)",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Auto\nreport\nthe total\npower\nlevel of\nall\nchannels\nWith\nspecified\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n1)",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n2)",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n3)",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n4)",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n5)",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n6)",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 16,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Auto Report Item 3",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nreport\nthe total\npower\nconsum\nption of\nall\nchannels\nwith\nspecified\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nreport\npower\nconsum\nption\nwith\nspecified\ntime\ninterval\n(channel\n1)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nreport\npower\nconsum\nption\nwith\nspecified\ntime\ninterval\n(channel\n2)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nreport\npower\nconsum\nption\nwith\nspecified\ntime\ninterval\n(channel\n3)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Auto\nreport\npower\nconsum\nption\nwith\nspecified\ntime\ninterval\n(channel\n4)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Auto\nreport\npower\nconsum\nption\nwith\nspecified\ntime\ninterval\n(channel\n5)",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Auto\nreport\npower\nconsum\nption\nwith\nspecified\ntime\ninterval\n(channel\n6)",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Auto\nreport\nthe total\npower\nlevel of\nall\nchannels\nWith\nspecified\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n1)",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n2)",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n3)",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n4)",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n5)",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "Auto\nreport\npower\nlevel\nwith\nspecified\ntime\ninterval\n(channel\n6)",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 16,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 110,
				Name: "Reset Parameters 0x6F~0x71",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 111,
				Name: "Auto Report Time Interval Item 1",
				Type: "range",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 112,
				Name: "Auto Report Time Interval Item 2",
				Type: "range",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 113,
				Name: "Auto Report Time Interval Item 3",
				Type: "range",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Parameter",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "unlock",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Lock",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 253,
				Name: "Enter Meter Calibration Mode",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 255,
				Name: "Restore All",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New00860003000c() *Device{
	return &Device{
		Brand: "Micro Modules",
		Product: "MSES",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0003",
		ProductID: "000c",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Type of Sensor Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Power",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Voltage",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Blinking Behavior",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "Configuration Bytes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notification on Status Change",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Hail sent",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "BASIC Report Sent",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Disables Function of automated sending of a Report triggered by minimal change of value.",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Minimum Change to send Report (Watt)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32000,
						Desc: "W",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Minimum Change to send Report (%)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "%",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Report type send in Reporting Group 1",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Report Type send in Reporting Group 2",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Report Type send in Reporting Group 3",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Send Interval for Reporting Group 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "Interval",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Send Interval for Reporting Group 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "Interval",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Send Interval for Reporting Group 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 32000,
						Desc: "Interval",
						Unit: "s",
					},
				},
			},
		},
	}
}
func New00860003000d() *Device{
	return &Device{
		Brand: "Micro Modules",
		Product: "MSEI",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0003",
		ProductID: "000d",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Type of Sensor Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Power",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Voltage",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Blinking Behavior",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "Configuration Bytes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notification on Status Change",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Hail sent",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "BASIC Report Sent",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Disables Function of automated sending of a Report triggered by minimal change of value.",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Minimum Change to send Report (Watt)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32000,
						Desc: "W",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Minimum Change to send Report (%)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "%",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Report type send in Reporting Group 1",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Report Type send in Reporting Group 2",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Report Type send in Reporting Group 3",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Send Interval for Reporting Group 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "Interval",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Send Interval for Reporting Group 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "Interval",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Send Interval for Reporting Group 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 32000,
						Desc: "Interval",
						Unit: "s",
					},
				},
			},
		},
	}
}
func New00860003000e() *Device{
	return &Device{
		Brand: "Micro Modules",
		Product: "MSEM",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0003",
		ProductID: "000e",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
				InNIF: "false",
				Version: "0",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Type of Sensor Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Power",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Voltage",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Blinking Behavior",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "Configuration Bytes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notification on Status Change",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Hail sent",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "BASIC Report Sent",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Disables Function of automated sending of a Report triggered by minimal change of value.",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Minimum Change to send Report (Watt)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32000,
						Desc: "W",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Minimum Change to send Report (%)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "%",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Report type send in Reporting Group 1",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Report Type send in Reporting Group 2",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Report Type send in Reporting Group 3",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 2,
						To: 2,
						Desc: "MultiSensor Report",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Meter Report for Watt",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Meter Report for kWh",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Send Interval for Reporting Group 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "Interval",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Send Interval for Reporting Group 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "Interval",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Send Interval for Reporting Group 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 32000,
						Desc: "Interval",
						Unit: "s",
					},
				},
			},
		},
	}
}
func New008600030018() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Aeon Labs Smart Switch (2nd Edition)",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0003",
		ProductID: "0018",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x00ef,
			},
			&CommandClass{
				ID: 0x0082,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Make Smart Switch blink",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "Current Overload Protection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "send nothing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Hail CC",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Basic CC report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Enables/disables parameter 91 and 92",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Automatic Report(W)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 38303,
						Desc: "Define a  treshold to induce a report.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Automatic Report(%)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a  treshold to induce a report.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 100,
				Name: "Set Paremeters 101-103 to Default",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 101,
				Name: "Reports in Group 1",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nvoltage\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\ncurrent)\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nwatt) at\nthe\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nkWh) at\nthe\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Reports in Group 2",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nkWh) at\nthe\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nwatt) at\nthe\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\ncurrent)\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nvoltage\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Reports in Group 3",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nvoltage\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\ncurrent)\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nwatt) at\nthe\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nkWh) at\nthe\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 110,
				Name: "Set Parameters 111-113 to Default",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 111,
				Name: "Report Interval Group 1",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 4294967295,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Report Interval Group 2",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 4294967295,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Report Interval Group 3",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 4294967295,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "AT&amp;T",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Enable/disable the Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset All",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New00860003001a() *Device{
	return &Device{
		Brand: "Aeolabs MES",
		Product: "MES",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0003",
		ProductID: "001a",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New00860003003e() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Garage Door Controller Gen5 EU",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0003",
		ProductID: "003e",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0066,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 32,
				Name: "Startup Ringtone",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable the startup ringtone. \n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Enable and select a startup ringtone for the Garage Door Controller.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "Sensor Calibration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Enable calibration.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "Timeout of Calibration Steps",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Set the timeout of calibration.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 36,
				Name: "Alarm Music",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Get the number of alarm music.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 37,
				Name: "Alarm Mode When Opening",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "Configure the flash frequency of the alarm LED, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 256,
						To: 356,
						Desc: "Select an alarm sound, there are 4 alarm sounds in the flash memory card can be selected.",
						Unit: "",
					},
					Value{
						From: 65535,
						To: 65545,
						Desc: "Configure the volume of alarm sound, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 16777215,
						To: 16777215,
						Desc: "Disable the alarm mode.",
						Unit: "",
					},
					Value{
						From: 16777216,
						To: 16777216,
						Desc: "Enable the alarm mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 38,
				Name: "Alarm Mode When Closing",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "Configure the flash frequency of the alarm LED, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 256,
						To: 356,
						Desc: "Select an alarm sound, there are 4 alarm sounds in the flash memory card can be selected.",
						Unit: "",
					},
					Value{
						From: 65535,
						To: 65545,
						Desc: "Configure the volume of alarm sound, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 16777215,
						To: 16777215,
						Desc: "Disable the alarm mode.",
						Unit: "",
					},
					Value{
						From: 16777216,
						To: 16777216,
						Desc: "Enable the alarm mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "Alarm Mode Unknown Position",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "Configure the flash frequency of the alarm LED, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 256,
						To: 356,
						Desc: "Select an alarm sound, there are 4 alarm sounds in the flash memory card can be selected.",
						Unit: "",
					},
					Value{
						From: 65535,
						To: 65545,
						Desc: "Configure the volume of alarm sound, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 16777215,
						To: 16777215,
						Desc: "Disable the alarm mode.",
						Unit: "",
					},
					Value{
						From: 16777216,
						To: 16777216,
						Desc: "Enable the alarm mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Alarm Mode Closed Position",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "Configure the flash frequency of the alarm LED, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 256,
						To: 356,
						Desc: "Select an alarm sound, there are 4 alarm sounds in the flash memory card can be selected.",
						Unit: "",
					},
					Value{
						From: 65535,
						To: 65545,
						Desc: "Configure the volume of alarm sound, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 16777215,
						To: 16777215,
						Desc: "Disable the alarm mode.",
						Unit: "",
					},
					Value{
						From: 16777216,
						To: 16777216,
						Desc: "Enable the alarm mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Tamper Switch State",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The Sensor is installed on the garage door.",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "The Sensor is removed from the garage door.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Battery State of Sensor",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery is in normal state.",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "Battery is in low battery state.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Ringtone",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "stop playing ringtone",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Start playing the ringtone that you\nselected. \n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Ringtone Volume",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "There are 10 volume levels can be set for testing.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "Temperature",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 47,
				Name: "Function of Button- or Button&#43;",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Pressing it once, the Button&#43; and Button- are defined to be used to increase and decrease the volume. Press and hold it, the Button&#43; and Button- are defined to be the control item of Next and Previous.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Pressing it once, the Button&#43; and Button- are defined to be the control item of Next and Previous. Press and hold it, the Button&#43; and Button- are defined to be used to increase and decrease the volume.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications to Associated Devices",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send Nothing (Disabled)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send HAIL Command",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send BARRIER OPERATOR Report Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 241,
				Name: "Pair Sensor with Garage Door Controller",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1431655681,
						To: 1431655681,
						Desc: "Start the Sensor pairing mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All configuration parameters are configurable.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All configuration parameters are not configurable (Locked).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to Default Factory Setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Reset all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00860003004b() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Smart Switch Gen5 EU",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0003",
		ProductID: "004b",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0056,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Make Smart Switch blink.",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "Overload Protection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications to Associated Devices",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send Nothing (Disabled)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send HAIL Command",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send BASIC Report Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Function of Parameters 91 and 92",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Configuration Parameters 91 and 92 are Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Configuration Parameters 91 and 92 are Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Automatic Report(W)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 38303,
						Desc: "Define a treshold.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Automatic Report(%)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Group 1 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nvoltage\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\ncurrent)\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nwatt) at\nthe\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nkWh) at\nthe\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Group 2 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nvoltage\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\ncurrent)\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nwatt) at\nthe\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nkWh) at\nthe\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Group 3 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nvoltage\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\ncurrent)\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nwatt) at\nthe\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nkWh) at\nthe\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Time Interval Group 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Time Interval Group 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Time Interval Group 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All configuration parameters are configurable.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All configuration parameters are not configurable (Locked).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00860003004e() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Heavy Duty Smart Switch Gen5 EU",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0003",
		ProductID: "004e",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0056,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "Current Overload Protection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "The load status after power on",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The load state will back to the last state after power on.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The load state will always on after re-power on.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "The load state will always off stare after re-power on.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications to Associated Devices",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send Nothing (Disabled)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send HAIL Command",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send BASIC Report Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Function of Parameters 91 and 92",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Configuration Parameters 91 and 92 are Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Configuration Parameters 91 and 92 are Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Induce an automatic report (W)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 38303,
						Desc: "Define a treshold.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Induce an automatic report (%)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Group 1 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nvoltage\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\ncurrent)\nat the\ngroup\ntime\ninterval ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nwatt) at\nthe\ngroup\ntime\ninterval \n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nkWh) at\nthe\ngroup\ntime\ninterval ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Group 2 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nvoltage\nat the\ngroup\ntime\ninterval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\ncurrent)\nat the\ngroup\ntime\ninterval \n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nwatt) at\nthe\ngroup\ntime\ninterval \n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nkWh) at\nthe\ngroup\ntime\ninterval \n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Group 3 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nvoltage\nat the\ngroup\ntime\ninterval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\ncurrent)\nat the\ngroup\ntime\ninterval \n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nwatt) at\nthe\ngroup\ntime\ninterval \n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nkWh) at\nthe\ngroup\ntime\ninterval \n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Time Interval Group 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Time Interval Group 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Time Interval Group 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: " Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008600030060() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Smart Switch 6 EU",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0003",
		ProductID: "0060",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "Current Overload Protection",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Output Load Status",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "last status",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "always on",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "always off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Set the RGB LED color value for testing",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 256,
						To: 65535,
						Desc: "Range of red color value.",
						Unit: "",
					},
					Value{
						From: 65536,
						To: 16777215,
						Desc: "Range of green color value.",
						Unit: "",
					},
					Value{
						From: 16777216,
						To: 2147483647,
						Desc: "Range of blue color value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "notifications to associated devices",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "nothing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "hail CC",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "basic CC report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 81,
				Name: "Configure the state of LED",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The LED will follow the status (on/off) of its load (Energy \nmode). \n\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "When the state of Switch’s load changed, The LED will \nfollow the status (on/off) of its load, but the red LED will \nturn off after 5 seconds if there is no any switch action \n(momentary indicate mode)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Night light mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 83,
				Name: "RGB value",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Set the indication value of red Led.\n\n",
						Unit: "",
					},
					Value{
						From: 256,
						To: 65535,
						Desc: "Set the indication value of green Led.\n",
						Unit: "",
					},
					Value{
						From: 65536,
						To: 16777215,
						Desc: "Set the indication value of blue Led.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 84,
				Name: "Configure the brightness level of RGB LED",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a brightness level.\n\n",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Enables/disables parameter 91/92",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Report of minimum change in wattage ",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 60000,
						Desc: " minimum change in wattage",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Minimum change in wattage in percent ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "minimum change in wattage \npercent ",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 100,
				Name: "Set 101-103 to default",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "default value not available",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Which reports need to send in Report group 1 ",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nvoltage\nat the\ngroup\ntime\ninterval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\ncurrent)\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nwatt)\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nkWh) at\nthe\ngroup\ntime\ninterval ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Which reports need to send in Report group 2 ",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nvoltage\nat the\ngroup\ntime\ninterval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\ncurrent)\nat the\ngroup\ntime\ninterval \n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nwatt)\nat the\ngroup\ntime\ninterval \n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nkWh) at\nthe\ngroup\ntime\ninterval \n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Which reports need to send in Report group 3",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nvoltage\nat the\ngroup\ntime\ninterval",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\ncurrent)\nat the\ngroup\ntime\ninterval \n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPOR\nT (for\nwatt)\nat the\ngroup\ntime\ninterval \n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for\nkWh) at\nthe\ngroup\ntime\ninterval \n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 110,
				Name: "Set 111-113 to default. ",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 111,
				Name: " time interval 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 268435456,
						Desc: "Define a time interval.",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: " time interval 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 268435456,
						Desc: "Define a time interval.",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: " time interval 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 268435456,
						Desc: "Define a time interval.",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner  ID ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Enable/disable Configuration Locked",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset configuration",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008600030062() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "LED Bulb EU",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0003",
		ProductID: "0062",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0033,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 34,
				Name: "Use of External Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "Use of External Switch(Color)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "send nothing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send HAIL Command",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send BASIC Report Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All configuration parameters are configurable.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAll configuration parameters are not configurable (Locked).\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset Parameters",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "\nReset all configuration parameters to default setting.\n",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "\nReset the product to default factory setting and be excluded from the Z-wave network.\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008600030063() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Smart Dimmer 6",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0003",
		ProductID: "0063",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0081,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Make Dimmer blink.",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Specify the time that Dimmer \nneed blink",
						Unit: "seconds",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Specify the Cycle of on/off,\nUnit of it is 0.1 second.\nFor example: if we set Configuration Value 1 to \n&#39;15&#39;,Configuration Value 2 to &#39;10&#39;,then Dimmer will open 0.5 \nsecond, close 0.5 second, and repeat for 14 times. ",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Current Overload Protection",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Output Load Status",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "last status",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "always on",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "always off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Set the RGB LED color value for testing. ",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "reserved",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Red value ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Green value",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Blue value ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "notifications to associated devices",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "nothing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "hail CC",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "basic CC report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 81,
				Name: "Configure the state of LED",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: " The LED will follow the status (on/off) of its load (Energy \nmode). ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " When the state of Dimmer’s load changed, The LED will \nfollow the status (on/off) of its load, but the red LED will \nturn off after 5 seconds if there is no any switch action \n(momentary indicate mode). ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " Night light mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 83,
				Name: "Configure the RGB value",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Red color value \n(default = 0xDD)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " Green color value \n(default = 0xA0)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Blue color value \n(default = 0xDD)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 84,
				Name: "Configure the brightness level of RGB LED",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "green color value=50",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "yellow color value=50",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "red color value=50",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Enables/disables parameter 91/92",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Report of minimum change in wattage",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 60000,
						Desc: " minimum change in wattage",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: " minimum change in wattage percent",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "minimum change in wattage \npercent ",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 100,
				Name: "Set 101-103 to default. ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "default value not available",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Which reports need to send in Report group 1",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "0-7=reserved",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "0-7=reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "0-7=reserved",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "0= auto send meter report (for voltage) at the group time interval\n1= auto send meter report (for current) at the group time interval\n2= auto send meter report (for watt) at the group time interval\n3= auto send meter report (for kWh) at the group time interval\n4-7=reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Which reports need to send in Report group 2 ",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "0-7=reserved",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "0-7=reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "0-7=reserved",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "0= auto send meter report (for voltage) at the group time interval\n1= auto send meter report (for current) at the group time interval\n2= auto send meter report (for watt) at the group time interval\n3= auto send meter report (for kWh) at the group time interval\n4-7=reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Which reports need to send in Report group 3",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "0-7=reserved",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "0-7=reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "0-7=reserved",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "0= auto send meter report (for voltage) at the group time interval\n1= auto send meter report (for current) at the group time interval\n2= auto send meter report (for watt) at the group time interval\n3= auto send meter report (for kWh) at the group time interval\n4-7=reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 110,
				Name: "Set 111-113 to default. ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "default value not available",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: " time interval 1",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "time interval 1",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: " time interval 2",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "time interval 2",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: " time interval 3",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "time interval 3",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner  ID ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "others",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Enable/disable Configuration Locked ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "default value 0",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset configuration",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "default value not available",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008600040025() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Repeater",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0004",
		ProductID: "0025",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0= Aeon Labs’s Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1= AT&amp;T",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2= Jean",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "3= Telefonica",
						Unit: "",
					},
					Value{
						From: 4,
						To: 255,
						Desc: "4-255 = Reserved for other Partner",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New008600040050() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Siren Gen 5 EU",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0004",
		ProductID: "0050",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Siren Sound/Volume",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Set the volume to 88 dB",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Set the volume to 100 dB",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Set the volume to 105 dB",
						Unit: "",
					},
					Value{
						From: 256,
						To: 256,
						Desc: "The siren sound 1 is selected",
						Unit: "",
					},
					Value{
						From: 512,
						To: 512,
						Desc: "The siren sound 2 is selected",
						Unit: "",
					},
					Value{
						From: 768,
						To: 768,
						Desc: "The siren sound 3 is selected",
						Unit: "",
					},
					Value{
						From: 1024,
						To: 1024,
						Desc: "The siren sound 4 is selected",
						Unit: "",
					},
					Value{
						From: 1280,
						To: 1280,
						Desc: "The siren sound 5 is selected",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "nothing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Hail CC",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Basic CC report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to Default Factory Settings",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008601010058() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Key Fob Gen5 US",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0101",
		ProductID: "0058",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 250,
				Name: "Group/Scene Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Group mode",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Scene mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to Default Settings",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New00860101005a() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Z-Stick Gen 5 US",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0101",
		ProductID: "005a",
		CommandClasses: []*CommandClass{
		},
		Parameters: []*parameter{
		},
	}
}
func New00860102004a() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Multi Sensor Gen5 US",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0102",
		ProductID: "004a",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0031,
				Secure: true,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Sensor report type on Get without instances",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Temperature, humidity and luminance",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Humidity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Wake up 10 minutes when batteries are inserted",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "On time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 15300,
						Desc: "delay",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Enable motion sensor",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Motion Detection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Send Basic Set CC.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send Sensor Binary Report CC.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Reports for Parameters 41-44",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Temperature Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 42,
				Name: "Humidity Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold for the humidity reports.",
						Unit: "% RH",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Luminance Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1000,
						Desc: "Define a treshold for the luminance reports.",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Battery Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold for the battery level reports.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 46,
				Name: "Low Temperature Alarm Report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable to send the alarm report of low temperature",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable to send the alarm report of low temperature",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Send unsolicited reports periodicaly. Interval group 1",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperatur\ne",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminan\nce",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Send unsolicited reports periodicaly. Intervcal group 2",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Send unsolicited reports periodicaly. Intervcal group 3",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Unsolicitate reports interval for timing groups 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Unsolicitate reports interval for timing groups 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Unsolicitate reports interval for timing groups 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable all configuration parameters to be locked.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable all configuration parameters to be locked.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008601020059() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Recessed Door Sensor Gen5 US",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0102",
		ProductID: "0059",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "sensor binary report for magnet switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "open = 00; close = 0xFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "open =  0xFF; close = 00",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "basic set for magnet switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "open = 00; close = 0xFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "open = 0xFF; close = 00",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "low battery voltage check function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "battery low check Interval time",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 2147483647,
						Desc: "Define the time interval to check the battery status.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 121,
				Name: "Command to Associated Nodes",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Sensor\nBinary",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Basic\nSet ",
						Unit: "",
					},
					Value{
						From: 9,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Unlock",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Lock",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00860102005f() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Home Energy Meter Gen5",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0102",
		ProductID: "005f",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0056,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Energy Detection Mode Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "report Wattage and the absolute KWH value",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "report positive/negative Wattage and the algebraic sum KWH value",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "report positive/negative Wattage and the positive KWH value (consuming electricity)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "report positive/negative Wattage and the negative KWH value (generating electricity)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Enable/Disable the Function of Parameters 4 to 10.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Induce an automatic report of whole HEM.",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define a value.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Induce an automatic report for Clamp 1.",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define a value.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Induce an automatic report for Clamp 2.",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define a value.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Induce an automatic report of whole HEM(%)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Induce an automatic report for Clamp 1(%)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Induce an automatic report for Clamp 2(%)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Enable /Disable CRC-16 Encapsulation",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Reports Group 1",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto send\nMeter\nREPORT\n(for KWH)\nat the\ngroup time\ninterval\n(Whole\nHEM)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto send\nMeter\nREPORT\n(for\nwattage)\nat the\ngroup time\ninterval\n(Whole\nHEM)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for V) at\nthe\ngroup\ntime\ninterval\n(Whole\nHEM)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto send\nMeter\nREPORT\n(for A) at\nthe group\ntime\ninterval\n(Whole\nHEM)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 7,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Auto send\nMeter\nREPORT\n(for Watt)\nat the\ngroup time\ninterval\n(Clamp 1)",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Auto send\nMeter\nREPORT\n(for Watt)\nat the\ngroup time\ninterval\n(Clamp 2)",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "Auto send\nMeter\nREPORT\n(for kWh)\nat the\ngroup time\ninterval\n(Clamp 1)",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "Auto send\nMeter\nREPORT\n(for kWh)\nat the\ngroup time\ninterval\n(Clamp 2)",
						Unit: "",
					},
					Value{
						From: 13,
						To: 15,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "Auto send\nMeter\nREPORT\n(for V) at\nthe group\ntime\ninterval\n(Clamp 1)",
						Unit: "",
					},
					Value{
						From: 17,
						To: 17,
						Desc: "Auto send\nMeter\nREPORT\n(for V) at\nthe group\ntime\ninterval\n(Clamp 2)",
						Unit: "",
					},
					Value{
						From: 18,
						To: 18,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 19,
						To: 19,
						Desc: "Auto send\nMeter\nREPORT\n(for A) at\nthe group\ntime\ninterval\n(Clamp 1)",
						Unit: "",
					},
					Value{
						From: 20,
						To: 20,
						Desc: "Auto send\nMeter\nREPORT\n(for A) at\nthe group\ntime\ninterval\n(Clamp 2)",
						Unit: "",
					},
					Value{
						From: 21,
						To: 23,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Reports Group 2",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto send\nMeter\nREPORT\n(for KWH)\nat the\ngroup time\ninterval\n(Whole\nHEM)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto send\nMeter\nREPORT\n(for\nwattage)\nat the\ngroup time\ninterval\n(Whole\nHEM)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for V) at\nthe\ngroup\ntime\ninterval\n(Whole\nHEM)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto send\nMeter\nREPORT\n(for A) at\nthe group\ntime\ninterval\n(Whole\nHEM)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 7,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Auto send\nMeter\nREPORT\n(for Watt)\nat the\ngroup time\ninterval\n(Clamp 1)",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Auto send\nMeter\nREPORT\n(for Watt)\nat the\ngroup time\ninterval\n(Clamp 2)",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "Auto send\nMeter\nREPORT\n(for kWh)\nat the\ngroup time\ninterval\n(Clamp 1)",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "Auto send\nMeter\nREPORT\n(for kWh)\nat the\ngroup time\ninterval\n(Clamp 2)",
						Unit: "",
					},
					Value{
						From: 13,
						To: 15,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "Auto send\nMeter\nREPORT\n(for V) at\nthe group\ntime\ninterval\n(Clamp 1)",
						Unit: "",
					},
					Value{
						From: 17,
						To: 17,
						Desc: "Auto send\nMeter\nREPORT\n(for V) at\nthe group\ntime\ninterval\n(Clamp 2)",
						Unit: "",
					},
					Value{
						From: 18,
						To: 18,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 19,
						To: 19,
						Desc: "Auto send\nMeter\nREPORT\n(for A) at\nthe group\ntime\ninterval\n(Clamp 1)",
						Unit: "",
					},
					Value{
						From: 20,
						To: 20,
						Desc: "Auto send\nMeter\nREPORT\n(for A) at\nthe group\ntime\ninterval\n(Clamp 2)",
						Unit: "",
					},
					Value{
						From: 21,
						To: 23,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Reports Group 3",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto send\nMeter\nREPORT\n(for KWH)\nat the\ngroup time\ninterval\n(Whole\nHEM)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto send\nMeter\nREPORT\n(for\nwattage)\nat the\ngroup time\ninterval\n(Whole\nHEM)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto\nsend\nMeter\nREPORT\n(for V) at\nthe\ngroup\ntime\ninterval\n(Whole\nHEM)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto send\nMeter\nREPORT\n(for A) at\nthe group\ntime\ninterval\n(Whole\nHEM)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 7,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Auto send\nMeter\nREPORT\n(for Watt)\nat the\ngroup time\ninterval\n(Clamp 1)",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Auto send\nMeter\nREPORT\n(for Watt)\nat the\ngroup time\ninterval\n(Clamp 2)",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "Auto send\nMeter\nREPORT\n(for kWh)\nat the\ngroup time\ninterval\n(Clamp 1)",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "Auto send\nMeter\nREPORT\n(for kWh)\nat the\ngroup time\ninterval\n(Clamp 2)",
						Unit: "",
					},
					Value{
						From: 13,
						To: 15,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "Auto send\nMeter\nREPORT\n(for V) at\nthe group\ntime\ninterval\n(Clamp 1)",
						Unit: "",
					},
					Value{
						From: 17,
						To: 17,
						Desc: "Auto send\nMeter\nREPORT\n(for V) at\nthe group\ntime\ninterval\n(Clamp 2)",
						Unit: "",
					},
					Value{
						From: 18,
						To: 18,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 19,
						To: 19,
						Desc: "Auto send\nMeter\nREPORT\n(for A) at\nthe group\ntime\ninterval\n(Clamp 1)",
						Unit: "",
					},
					Value{
						From: 20,
						To: 20,
						Desc: "Auto send\nMeter\nREPORT\n(for A) at\nthe group\ntime\ninterval\n(Clamp 2)",
						Unit: "",
					},
					Value{
						From: 21,
						To: 23,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Time Interval Report Group 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Time Interval Report Group 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Time Interval Report Group 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Others",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All configuration parameters are configurable.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All configuration parameters are not configurable (Locked).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to Default Factory Setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008601020064() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "MultiSensor 6 US",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0102",
		ProductID: "0064",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Wake up 10 minutes when batteries are inserted",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "On time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 15300,
						Desc: "delay",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Enable/disable the function of motion sensor. ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " enable, the current PIR sensitivity level=1. (minimum level) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "enable, the current PIR sensitivity level = 2.   ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: " enable, the current PIR sensitivity level=3.   ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "enable, the current PIR sensitivity level=4.  ",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "enable, the current PIR sensitivity level=5. (maximum level) ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Motion Detection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Send Basic Set CC.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send Sensor Binary Report CC.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: " low battery value.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 10,
						To: 50,
						Desc: "default value = 20 %",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Reports for Parameters 41-44",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Temperature Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 42,
				Name: "Humidity Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold for the humidity reports.",
						Unit: "% RH",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Luminance Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1000,
						Desc: "Define a treshold for the luminance reports.",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Battery Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold for the battery level reports.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "Threshold change in ultraviolet to induce an automatic report. ",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 11,
						Desc: "Define a treshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 46,
				Name: "Low Temperature Alarm Report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable to send the alarm report of low temperature",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable to send the alarm report of low temperature",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Send unsolicited reports periodicaly. Interval group 1",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Ultraviolet",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperatur\ne",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminan\nce",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Send unsolicited reports periodicaly. Intervcal group 2",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Ultraviolet",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Send unsolicited reports periodicaly. Intervcal group 3",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Ultraviolet",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Unsolicitate reports interval for timing groups 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Unsolicitate reports interval for timing groups 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Unsolicitate reports interval for timing groups 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 201,
				Name: "Temperature calibration",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 202,
				Name: "Humidity sensor calibration",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 203,
				Name: "Luminance sensor calibration",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 204,
				Name: "Ultraviolet sensor calibration",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable all configuration parameters to be locked.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable all configuration parameters to be locked.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00860103003e() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Garage Door Controller Gen5 US",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0103",
		ProductID: "003e",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0066,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 32,
				Name: "Startup Ringtone",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable the startup ringtone. \n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Enable and select a startup ringtone for the Garage Door Controller.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "Sensor Calibration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Enable calibration.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "Timeout of Calibration Steps",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Set the timeout of calibration.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 36,
				Name: "Alarm Music",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Get the number of alarm music.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 37,
				Name: "Alarm Mode When Opening",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "Configure the flash frequency of the alarm LED, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 256,
						To: 356,
						Desc: "Select an alarm sound, there are 4 alarm sounds in the flash memory card can be selected.",
						Unit: "",
					},
					Value{
						From: 65535,
						To: 65545,
						Desc: "Configure the volume of alarm sound, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 16777215,
						To: 16777215,
						Desc: "Disable the alarm mode.",
						Unit: "",
					},
					Value{
						From: 16777216,
						To: 16777216,
						Desc: "Enable the alarm mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 38,
				Name: "Alarm Mode When Closing",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "Configure the flash frequency of the alarm LED, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 256,
						To: 356,
						Desc: "Select an alarm sound, there are 4 alarm sounds in the flash memory card can be selected.",
						Unit: "",
					},
					Value{
						From: 65535,
						To: 65545,
						Desc: "Configure the volume of alarm sound, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 16777215,
						To: 16777215,
						Desc: "Disable the alarm mode.",
						Unit: "",
					},
					Value{
						From: 16777216,
						To: 16777216,
						Desc: "Enable the alarm mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "Alarm Mode Unknown Position",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "Configure the flash frequency of the alarm LED, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 256,
						To: 356,
						Desc: "Select an alarm sound, there are 4 alarm sounds in the flash memory card can be selected.",
						Unit: "",
					},
					Value{
						From: 65535,
						To: 65545,
						Desc: "Configure the volume of alarm sound, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 16777215,
						To: 16777215,
						Desc: "Disable the alarm mode.",
						Unit: "",
					},
					Value{
						From: 16777216,
						To: 16777216,
						Desc: "Enable the alarm mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Alarm Mode Closed Position",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "Configure the flash frequency of the alarm LED, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 256,
						To: 356,
						Desc: "Select an alarm sound, there are 4 alarm sounds in the flash memory card can be selected.",
						Unit: "",
					},
					Value{
						From: 65535,
						To: 65545,
						Desc: "Configure the volume of alarm sound, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 16777215,
						To: 16777215,
						Desc: "Disable the alarm mode.",
						Unit: "",
					},
					Value{
						From: 16777216,
						To: 16777216,
						Desc: "Enable the alarm mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Tamper Switch State",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The Sensor is installed on the garage door.",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "The Sensor is removed from the garage door.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Battery State of Sensor",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery is in normal state.",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "Battery is in low battery state.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Ringtone",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "stop playing ringtone",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Start playing the ringtone that you\nselected. \n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Ringtone Volume",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "There are 10 volume levels can be set for testing.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "Temperature",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 47,
				Name: "Function of Button- or Button&#43;",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Pressing it once, the Button&#43; and Button- are defined to be used to increase and decrease the volume. Press and hold it, the Button&#43; and Button- are defined to be the control item of Next and Previous.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Pressing it once, the Button&#43; and Button- are defined to be the control item of Next and Previous. Press and hold it, the Button&#43; and Button- are defined to be used to increase and decrease the volume.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications to Associated Devices",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send Nothing (Disabled)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send HAIL Command",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send BARRIER OPERATOR Report Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 241,
				Name: "Pair Sensor with Garage Door Controller",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1431655681,
						To: 1431655681,
						Desc: "Start the Sensor pairing mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All configuration parameters are configurable.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All configuration parameters are not configurable (Locked).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to Default Factory Setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Reset all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00860103004b() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Smart Switch Gen5 US",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0103",
		ProductID: "004b",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0056,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Make Smart Switch blink.",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "Overload Protection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications to Associated Devices",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send Nothing (Disabled)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send HAIL Command",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send BASIC Report Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Function of Parameters 91 and 92",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Configuration Parameters 91 and 92 are Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Configuration Parameters 91 and 92 are Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Automatic Report(W)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 38303,
						Desc: "Define a treshold.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Automatic Report(%)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Group 1 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPORT (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Group 2 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPORT (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Group 3 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPORT (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Time Interval Group 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Time Interval Group 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Time Interval Group 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All configuration parameters are configurable.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAll configuration parameters are not configurable (Locked).\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "\nResets all configuration parameters to default setting.\n",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "\nReset the product to default factory setting and be excluded from the Z-wave network.\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00860103004e() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Heavy Duty Smart Switch Gen5 US",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0103",
		ProductID: "004e",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0056,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "Current Overload Protection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "The load status after power on",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nThe load state will back to the last state after power on.\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The load state will always on after re-power on.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nThe load state will always off stare after re-power on.\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications to Associated Devices",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send Nothing (Disabled)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send HAIL Command",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send BASIC Report Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Function of Parameters 91 and 92",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Configuration Parameters 91 and 92 are Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Configuration Parameters 91 and 92 are Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Induce an automatic report (W)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 38303,
						Desc: "Define a treshold.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Induce an automatic report (%)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Group 1 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPORT (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Group 2 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPORT (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Group 3 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPORT (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Time Interval Group 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Time Interval Group 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Time Interval Group 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "\nResets all configuration parameters to default setting.\n",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "\nReset the product to default factory setting and be excluded from the Z-wave network.\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008601030060() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Smart Switch 6 US",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0103",
		ProductID: "0060",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0033,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "Current Overload Protection",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Output Load Status",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "last status",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "always on",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "always off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Set the RGB LED color value for testing",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 256,
						To: 65535,
						Desc: "Range of red color value.",
						Unit: "",
					},
					Value{
						From: 65536,
						To: 16777215,
						Desc: "Range of green color value.",
						Unit: "",
					},
					Value{
						From: 16777216,
						To: 2147483647,
						Desc: "Range of blue color value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "notifications to associated devices",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "nothing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "hail CC",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "basic CC report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 81,
				Name: "Configure the state of LED",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nThe LED will follow the status (on/off) of its load (Energy mode).\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nWhen the state of Switch’s load changed, The LED will follow the status (on/off) of its load, but the red LED will turn off after 5 seconds if there is no any switch action (momentary indicate mode)\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Night light mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 83,
				Name: "RGB value",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Set the indication value of red Led.",
						Unit: "",
					},
					Value{
						From: 256,
						To: 65535,
						Desc: "Set the indication value of green Led.",
						Unit: "",
					},
					Value{
						From: 65536,
						To: 16777215,
						Desc: "Set the indication value of blue Led.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 84,
				Name: "Configure the brightness level of RGB LED",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a brightness level.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Enables/disables parameter 91/92",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Report of minimum change in wattage",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 60000,
						Desc: "minimum change in wattage",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Minimum change in wattage in percent",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "minimum change in wattage percent",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 100,
				Name: "Set 101-103 to default",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "default value not available",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Which reports need to send in Report group 1",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPOR T (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Which reports need to send in Report group 2",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPOR T (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Which reports need to send in Report group 3",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPOR T (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 110,
				Name: "Set 111-113 to default.",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 111,
				Name: "time interval 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 268435456,
						Desc: "Define a time interval.",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "time interval 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 268435456,
						Desc: "Define a time interval.",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "time interval 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 268435456,
						Desc: "Define a time interval.",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Enable/disable Configuration Locked",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset configuration",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "\nResets all configuration parameters to default setting.\n",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "\nReset the product to default factory setting and be excluded from the Z-wave network.\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008601030062() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "LED Bulb US",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0103",
		ProductID: "0062",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0033,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 34,
				Name: "Use of External Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "Use of External Switch(Color)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "send nothing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send HAIL Command",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send BASIC Report Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All configuration parameters are configurable.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAll configuration parameters are not configurable (Locked).\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset Parameters",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "\nReset all configuration parameters to default setting.\n",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "\nReset the product to default factory setting and be excluded from the Z-wave network.\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008601040038() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Doorbell Gen5",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0104",
		ProductID: "0038",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x009b,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0090,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Doorbell Repetitions",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ignore ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Define number of repetitions.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Doorbell Ringtone",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Define a ringtone.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Select a Ringtone to Play",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Stop playing.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Play the specified ringtone.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Control Items",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "play ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "stop",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "pause",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "next ",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "previous",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Volume",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 10,
						Desc: "Define the volume.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Button Functions",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "“Button -” is previous, “Button&#43;” is next",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Swap functions of the two buttons.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Button Functions/ Input Options",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Pressing it once, which will change the volume. Long pressing it, which will change the default ringtone.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Pressing it once, which will change the default ringtone. Long pressing it, which will change the the volume.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Battery Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Read only: Normal battery level",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Read only: Low battery level",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Set value: Low battery alarm is cancelled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Type of Notifications",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send Nothing (Disabled)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send HAIL Command",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send BASIC Report Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 81,
				Name: "Notifications Low Battery State",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 241,
				Name: "Pair the Wireless Button with Doorbell",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Start the Wireless Button pairing mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All configuration parameters are configurable.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All configuration parameters are not configurable (Locked).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008601040050() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Siren Gen 5 US",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0104",
		ProductID: "0050",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Siren Sound/Volume",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Set the volume to 88 dB",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Set the volume to 100 dB",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Set the volume to 105 dB",
						Unit: "",
					},
					Value{
						From: 256,
						To: 256,
						Desc: "The siren sound 1 is selected",
						Unit: "",
					},
					Value{
						From: 512,
						To: 512,
						Desc: "The siren sound 2 is selected",
						Unit: "",
					},
					Value{
						From: 768,
						To: 768,
						Desc: "The siren sound 3 is selected",
						Unit: "",
					},
					Value{
						From: 1024,
						To: 1024,
						Desc: "The siren sound 4 is selected",
						Unit: "",
					},
					Value{
						From: 1280,
						To: 1280,
						Desc: "The siren sound 5 is selected",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "nothing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Hail CC",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Basic CC report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to Default Factory Settings",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008602010058() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Key Fob Gen5 ANZ",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0201",
		ProductID: "0058",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 250,
				Name: "Group/Scene Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Group mode",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Scene mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to Default Settings",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New00860201005a() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Z-Stick Gen 5 ANZ",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0201",
		ProductID: "005a",
		CommandClasses: []*CommandClass{
		},
		Parameters: []*parameter{
		},
	}
}
func New00860202004a() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Multi Sensor Gen5 ANZ",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0202",
		ProductID: "004a",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0031,
				Secure: true,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Sensor report type on Get without instances",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Temperature, humidity and luminance",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Humidity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Wake up 10 minutes when batteries are inserted",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "On time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 15300,
						Desc: "delay",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Enable motion sensor",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Motion Detection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Send Basic Set CC.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send Sensor Binary Report CC.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Reports for Parameters 41-44",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Temperature Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 42,
				Name: "Humidity Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold for the humidity reports.",
						Unit: "% RH",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Luminance Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1000,
						Desc: "Define a treshold for the luminance reports.",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Battery Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold for the battery level reports.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 46,
				Name: "Low Temperature Alarm Report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable to send the alarm report of low temperature",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable to send the alarm report of low temperature",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Send unsolicited reports periodicaly. Interval group 1",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperatur\ne",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminan\nce",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Send unsolicited reports periodicaly. Intervcal group 2",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Send unsolicited reports periodicaly. Intervcal group 3",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Unsolicitate reports interval for timing groups 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Unsolicitate reports interval for timing groups 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Unsolicitate reports interval for timing groups 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable all configuration parameters to be locked.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable all configuration parameters to be locked.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008602020059() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Recessed Door Sensor Gen5 ANZ",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0202",
		ProductID: "0059",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "sensor binary report for magnet switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "open = 00; close = 0xFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "open =  0xFF; close = 00",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "basic set for magnet switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "open = 00; close = 0xFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "open = 0xFF; close = 00",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "low battery voltage check function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "battery low check Interval time",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 2147483647,
						Desc: "Define the time interval to check the battery status.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 121,
				Name: "Command to Associated Nodes",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Sensor\nBinary",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Basic\nSet ",
						Unit: "",
					},
					Value{
						From: 9,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Unlock",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Lock",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008602020064() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "MultiSensor 6 ANZ",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0202",
		ProductID: "0064",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Wake up 10 minutes when batteries are inserted",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "On time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 15300,
						Desc: "delay",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Enable/disable the function of motion sensor. ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " enable, the current PIR sensitivity level=1. (minimum level) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "enable, the current PIR sensitivity level = 2.   ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: " enable, the current PIR sensitivity level=3.   ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "enable, the current PIR sensitivity level=4.  ",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "enable, the current PIR sensitivity level=5. (maximum level) ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Motion Detection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Send Basic Set CC.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send Sensor Binary Report CC.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: " low battery value.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 10,
						To: 50,
						Desc: "default value = 20 %",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Reports for Parameters 41-44",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Temperature Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 42,
				Name: "Humidity Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold for the humidity reports.",
						Unit: "% RH",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Luminance Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1000,
						Desc: "Define a treshold for the luminance reports.",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Battery Automatic Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold for the battery level reports.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "Threshold change in ultraviolet to induce an automatic report. ",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 11,
						Desc: "Define a treshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 46,
				Name: "Low Temperature Alarm Report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable to send the alarm report of low temperature",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable to send the alarm report of low temperature",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Send unsolicited reports periodicaly. Interval group 1",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Ultraviolet",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperatur\ne",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminan\nce",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Send unsolicited reports periodicaly. Intervcal group 2",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Ultraviolet",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Send unsolicited reports periodicaly. Intervcal group 3",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Ultraviolet",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Temperature",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Humidity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Luminance",
						Unit: "",
					},
					Value{
						From: 8,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Unsolicitate reports interval for timing groups 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Unsolicitate reports interval for timing groups 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Unsolicitate reports interval for timing groups 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 2678400,
						Desc: "Define an interval time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 201,
				Name: "Temperature calibration",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 202,
				Name: "Humidity sensor calibration",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 203,
				Name: "Luminance sensor calibration",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 204,
				Name: "Ultraviolet sensor calibration",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable all configuration parameters to be locked.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable all configuration parameters to be locked.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00860203003e() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Garage Door Controller Gen5 ANZ",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0203",
		ProductID: "003e",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0066,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 32,
				Name: "Startup Ringtone",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable the startup ringtone. \n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Enable and select a startup ringtone for the Garage Door Controller.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "Sensor Calibration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Enable calibration.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "Timeout of Calibration Steps",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Set the timeout of calibration.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 36,
				Name: "Alarm Music",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Get the number of alarm music.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 37,
				Name: "Alarm Mode When Opening",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "Configure the flash frequency of the alarm LED, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 256,
						To: 356,
						Desc: "Select an alarm sound, there are 4 alarm sounds in the flash memory card can be selected.",
						Unit: "",
					},
					Value{
						From: 65535,
						To: 65545,
						Desc: "Configure the volume of alarm sound, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 16777215,
						To: 16777215,
						Desc: "Disable the alarm mode.",
						Unit: "",
					},
					Value{
						From: 16777216,
						To: 16777216,
						Desc: "Enable the alarm mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 38,
				Name: "Alarm Mode When Closing",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "Configure the flash frequency of the alarm LED, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 256,
						To: 356,
						Desc: "Select an alarm sound, there are 4 alarm sounds in the flash memory card can be selected.",
						Unit: "",
					},
					Value{
						From: 65535,
						To: 65545,
						Desc: "Configure the volume of alarm sound, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 16777215,
						To: 16777215,
						Desc: "Disable the alarm mode.",
						Unit: "",
					},
					Value{
						From: 16777216,
						To: 16777216,
						Desc: "Enable the alarm mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "Alarm Mode Unknown Position",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "Configure the flash frequency of the alarm LED, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 256,
						To: 356,
						Desc: "Select an alarm sound, there are 4 alarm sounds in the flash memory card can be selected.",
						Unit: "",
					},
					Value{
						From: 65535,
						To: 65545,
						Desc: "Configure the volume of alarm sound, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 16777215,
						To: 16777215,
						Desc: "Disable the alarm mode.",
						Unit: "",
					},
					Value{
						From: 16777216,
						To: 16777216,
						Desc: "Enable the alarm mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Alarm Mode Closed Position",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "Configure the flash frequency of the alarm LED, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 256,
						To: 356,
						Desc: "Select an alarm sound, there are 4 alarm sounds in the flash memory card can be selected.",
						Unit: "",
					},
					Value{
						From: 65535,
						To: 65545,
						Desc: "Configure the volume of alarm sound, there are 10 levels can be set.",
						Unit: "",
					},
					Value{
						From: 16777215,
						To: 16777215,
						Desc: "Disable the alarm mode.",
						Unit: "",
					},
					Value{
						From: 16777216,
						To: 16777216,
						Desc: "Enable the alarm mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Tamper Switch State",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The Sensor is installed on the garage door.",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "The Sensor is removed from the garage door.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Battery State of Sensor",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Battery is in normal state.",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "Battery is in low battery state.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Ringtone",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "stop playing ringtone",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Start playing the ringtone that you\nselected. \n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Ringtone Volume",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "There are 10 volume levels can be set for testing.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "Temperature",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 47,
				Name: "Function of Button- or Button&#43;",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Pressing it once, the Button&#43; and Button- are defined to be used to increase and decrease the volume. Press and hold it, the Button&#43; and Button- are defined to be the control item of Next and Previous.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Pressing it once, the Button&#43; and Button- are defined to be the control item of Next and Previous. Press and hold it, the Button&#43; and Button- are defined to be used to increase and decrease the volume.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications to Associated Devices",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send Nothing (Disabled)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send HAIL Command",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send BARRIER OPERATOR Report Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 241,
				Name: "Pair Sensor with Garage Door Controller",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1431655681,
						To: 1431655681,
						Desc: "Start the Sensor pairing mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All configuration parameters are configurable.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All configuration parameters are not configurable (Locked).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to Default Factory Setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Reset all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00860203004b() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Smart Switch Gen5 ANZ",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0203",
		ProductID: "004b",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0056,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Make Smart Switch blink.",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "Overload Protection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications to Associated Devices",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send Nothing (Disabled)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send HAIL Command",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send BASIC Report Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Function of Parameters 91 and 92",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Configuration Parameters 91 and 92 are Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Configuration Parameters 91 and 92 are Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Automatic Report(W)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 38303,
						Desc: "Define a treshold.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Automatic Report(%)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Group 1 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPORT (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Group 2 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPORT (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Group 3 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPORT (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Time Interval Group 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Time Interval Group 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Time Interval Group 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All configuration parameters are configurable.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAll configuration parameters are not configurable (Locked).\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "\nResets all configuration parameters to default setting.\n",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "\nReset the product to default factory setting and be excluded from the Z-wave network.\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00860203004e() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Heavy Duty Smart Switch Gen5 ANZ",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0203",
		ProductID: "004e",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0056,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "Current Overload Protection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "The load status after power on",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nThe load state will back to the last state after power on.\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The load state will always on after re-power on.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nThe load state will always off stare after re-power on.\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications to Associated Devices",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send Nothing (Disabled)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send HAIL Command",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send BASIC Report Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Function of Parameters 91 and 92",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Configuration Parameters 91 and 92 are Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Configuration Parameters 91 and 92 are Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Induce an automatic report (W)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 38303,
						Desc: "Define a treshold.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Induce an automatic report (%)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a treshold.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Group 1 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPORT (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Group 2 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPORT (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Group 3 Reports",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPORT (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 111,
				Name: "Time Interval Group 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "Time Interval Group 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "Time Interval Group 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 2147483647,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to default factory setting",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "\nResets all configuration parameters to default setting.\n",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "\nReset the product to default factory setting and be excluded from the Z-wave network.\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008602030060() *Device{
	return &Device{
		Brand: "Aeon Labs",
		Product: "Smart Switch 6 ANZ",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0203",
		ProductID: "0060",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "Current Overload Protection",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Output Load Status",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "last status",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "always on",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "always off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Set the RGB LED color value for testing",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 256,
						To: 65535,
						Desc: "Range of red color value.",
						Unit: "",
					},
					Value{
						From: 65536,
						To: 16777215,
						Desc: "Range of green color value.",
						Unit: "",
					},
					Value{
						From: 16777215,
						To: 2147483647,
						Desc: "Range of blue color value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "notifications to associated devices",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "nothing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "hail CC",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "basic CC report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 81,
				Name: "Configure the state of LED",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nThe LED will follow the status (on/off) of its load (Energy mode).\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nWhen the state of Switch’s load changed, The LED will follow the status (on/off) of its load, but the red LED will turn off after 5 seconds if there is no any switch action (momentary indicate mode)\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Night light mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 83,
				Name: "RGB value",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Set the indication value of red Led.",
						Unit: "",
					},
					Value{
						From: 256,
						To: 65535,
						Desc: "Set the indication value of green Led.",
						Unit: "",
					},
					Value{
						From: 65536,
						To: 16777215,
						Desc: "Set the indication value of blue Led.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 84,
				Name: "Configure the brightness level of RGB LED",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a brightness level.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Enables/disables parameter 91/92",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 91,
				Name: "Report of minimum change in wattage",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 60000,
						Desc: "minimum change in wattage",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Minimum change in wattage in percent",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "minimum change in wattage percent",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 100,
				Name: "Set 101-103 to default",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "default value not available",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Which reports need to send in Report group 1",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPOR T (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Which reports need to send in Report group 2",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPOR T (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 103,
				Name: "Which reports need to send in Report group 3",
				Type: "bitset",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nAuto send Meter REPOR T (for voltage at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAuto send Meter REPORT (for current) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nAuto send Meter REPOR T (for watt) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nAuto send Meter REPORT (for kWh) at the group time interval\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 31,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 110,
				Name: "Set 111-113 to default.",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 111,
				Name: "time interval 1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 268435456,
						Desc: "Define a time interval.",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 112,
				Name: "time interval 2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 268435456,
						Desc: "Define a time interval.",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 113,
				Name: "time interval 3",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 268435456,
						Desc: "Define a time interval.",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Enable/disable Configuration Locked",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Device Tag",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset configuration",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "\nResets all configuration parameters to default setting.\n",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "\nReset the product to default factory setting and be excluded from the Z-wave network.\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008602030062() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "LED Bulb ANZ",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0203",
		ProductID: "0062",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0033,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 34,
				Name: "Use of External Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "Use of External Switch(Color)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "send nothing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send HAIL Command",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send BASIC Report Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All configuration parameters are configurable.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nAll configuration parameters are not configurable (Locked).\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset Parameters",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "\nReset all configuration parameters to default setting.\n",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "\nReset the product to default factory setting and be excluded from the Z-wave network.\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008602040050() *Device{
	return &Device{
		Brand: "Aeotec",
		Product: "Siren Gen 5 ANZ",
		Description: "\n            \n          ",

		ManufacturerID: "0086",
		ProductType: "0204",
		ProductID: "0050",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Siren Sound/Volume",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Set the volume to 88 dB",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Set the volume to 100 dB",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Set the volume to 105 dB",
						Unit: "",
					},
					Value{
						From: 256,
						To: 256,
						Desc: "The siren sound 1 is selected",
						Unit: "",
					},
					Value{
						From: 512,
						To: 512,
						Desc: "The siren sound 2 is selected",
						Unit: "",
					},
					Value{
						From: 768,
						To: 768,
						Desc: "The siren sound 3 is selected",
						Unit: "",
					},
					Value{
						From: 1024,
						To: 1024,
						Desc: "The siren sound 4 is selected",
						Unit: "",
					},
					Value{
						From: 1280,
						To: 1280,
						Desc: "The siren sound 5 is selected",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Notifications",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "nothing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Hail CC",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Basic CC report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 200,
				Name: "Partner ID",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Aeon Labs Standard Product",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Partner ID of Partner Product",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 252,
				Name: "Lock Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Reset to Default Factory Settings",
				Type: "constant",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Resets all configuration parameters to default setting.",
						Unit: "",
					},
					Value{
						From: 1431655765,
						To: 1431655765,
						Desc: "Reset the product to default factory setting and be excluded from the Z-wave network.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008900010101() *Device{
	return &Device{
		Brand: "Easy Light",
		Product: "Switch Link",
		Description: "\n            \n          ",

		ManufacturerID: "0089",
		ProductType: "0001",
		ProductID: "0101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 0,
				Name: "Last Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "To enable the module to resume the last status\nbefore the AC power goes down.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To enable the module to always turn the lights\nON when the AC power goes up.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "To enable the module to always turn the light\nOFF when AC power line goes up.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 1,
				Name: "Night Light",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "When the light is turn ON, LED on the module is\nturn ON and vice versa.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "When the light is turn ON, LED on the module is\nturn OFF and vice versa.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Enable LED",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable LED.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable LED to operate according to night light\nparameter.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Enable All ON/All OFF",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable both All ON and All OFF command.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable only All OFF command.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable only All ON command.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Enable both All ON and All OFF command.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Button Protection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User can use button for ON/OFF manual control.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "This setting value is used to protect a module\nagainst unintentional control. To operate a\nmanual control requires pressing button 3 times\nwithin 1.5 seconds, the light will toggle to the\nnext stage. The light will turn off instantly if it is\nbeing on before setting.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Disable button from manual control. The light\nwill turn off instantly if it is being on before\nsetting.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Delay In Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The light will be ON instantaneously once ON\ncommand is received.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 5,
						Desc: "The module will detain the ON process for 1-5\nseconds up to user preferences.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Delay Out Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The light will be OFF instantaneously once OFF\ncommand is received.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 5,
						Desc: "The module will detain the OFF process for 1-5\nseconds up to user preferences.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "FACTORY DEFAULT",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New008900020101() *Device{
	return &Device{
		Brand: "Easy Light",
		Product: "Dimmer Link",
		Description: "\n            \n          ",

		ManufacturerID: "0089",
		ProductType: "0002",
		ProductID: "0101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 0,
				Name: "Last Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "To enable the module to resume the last status\nbefore the AC power goes down.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To enable the module to always turn the lights\nON when the AC power goes up.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "To enable the module to always turn the lights\nOFF when AC power line goes up.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 1,
				Name: "Night Light",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "When the light is turn ON, LED on the module is\nturn ON and vice versa.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "When the light is turn ON, LED on the module is\nturn OFF and vice versa.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Enable LED",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable LED.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable LED to operate according to night light\nparameter.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Enable All ON/All OFF",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable both All ON and All OFF command.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable only All OFF command.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable only All ON command.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Enable both All ON and All OFF command.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Button Protection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User can use button for ON/OFF manual control.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "This setting value is used to protect a module\nagainst unintentional control. To operate a\nmanual control requires pressing button 3 times\nwithin 1.5 seconds, the light will toggle to the\nnext stage. The light will turn off instantly if it is\nbeing on before setting.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Disable button from manual control. The light\nwill turn off instantly if it is being on before\nsetting.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Fade In Slope",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 14,
						Desc: "These valid values control a ramp up time\nperiod. With default value (7), the lights will\nturn on from zero to the last dimming level by 7\nseconds. Usually this command designed for\nprolonging a filament and making the room to\nbe more attraction.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Fade Out Slope",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 14,
						Desc: "Fade in Slope and Fade Out Slope is the same\nconcept in which Fade Out Slope command\ncontrols a turn off time period, so Fade Out\nSlope will ramp an intensity of the light down to\nzero within 7 seconds if the valid value sets to\nthe default.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Dim Slope",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 14,
						Desc: "Dim Slope command can control a dim step by\nshrinking or extending dimming time period. If\nthe value sets to the default, the dimming step\nduration will be 7 seconds from minimum to\nmaximum level or vice versa.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Minimum Dim Level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 50,
						Desc: "This is a minimum threshold value to avoid the\nconfusion between low dim value stage and\nturn-off stage especially with the low wattage\nlamps. The light bulbs will illuminate a little\nportion of intensity if the value sets to the\ndefault (20).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Maximum Dim Level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 51,
						To: 99,
						Desc: "Maximum dim level is a mirror of minimum dim\nlevel that means it is used to defining the\nheadroom of the light level which does not\nexceed default value (99). The Maximum dim\nlevel will influence the value of maximum on\nlevel in multilevel switch command class.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Ignore Start Level",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "This value indicated to use the start level\nspecified in the Multilevel Switch Start Level\nChange Command.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "This indicates to start dimming from the latest\nlight level.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Jump to Dim",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable Jump to dim level. The master remote\ncontrol cannot dim the lights from the off stage",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable Jump to dim level which means user can\njump to dim stage from the off stage without\nturning on the light.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Dim Direction",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The first time user dims the light, it will go in\nthe dim up direction to the maximum dim level\nand follow by dim down direction respectively.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The first time user dims the light, it will go in\nthe dim down direction to the minimum dim\nlevel and follow by dim up direction respectively.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "The dim direction will be a toggle mode. The\nfirst time user dims the light it will go in\nopposite direction of previous dim direction.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "FACTORY DEFAULT",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New008900030001() *Device{
	return &Device{
		Brand: "Easy Light",
		Product: "Zuper Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0089",
		ProductType: "0003",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New008900030101() *Device{
	return &Device{
		Brand: "Easy Light",
		Product: "Zuper Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0089",
		ProductType: "0003",
		ProductID: "0101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New008a00010100() *Device{
	return &Device{
		Brand: "myGate",
		Product: "myGate",
		Description: "\n            \n          ",

		ManufacturerID: "008a",
		ProductType: "0001",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008a,
			},
			&CommandClass{
				ID: 0x008c,
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0092,
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x009a,
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0075,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0093,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Current Lifestyle",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No lifestyle selected",
						Unit: "",
					},
					Value{
						From: 32,
						To: 32,
						Desc: "Home 1",
						Unit: "",
					},
					Value{
						From: 34,
						To: 34,
						Desc: "Home 2",
						Unit: "",
					},
					Value{
						From: 35,
						To: 35,
						Desc: "Home 3",
						Unit: "",
					},
					Value{
						From: 36,
						To: 36,
						Desc: "Home 4",
						Unit: "",
					},
					Value{
						From: 64,
						To: 64,
						Desc: "Away 1",
						Unit: "",
					},
					Value{
						From: 66,
						To: 66,
						Desc: "Away 2",
						Unit: "",
					},
					Value{
						From: 67,
						To: 67,
						Desc: "Away 3",
						Unit: "",
					},
					Value{
						From: 68,
						To: 68,
						Desc: "Away 4",
						Unit: "",
					},
					Value{
						From: 96,
						To: 96,
						Desc: "Sleep",
						Unit: "",
					},
					Value{
						From: 128,
						To: 128,
						Desc: "Party",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Lifestyle lock",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No Lock",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Locked",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "External Screen page",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008a00020100() *Device{
	return &Device{
		Brand: "myDisplay",
		Product: "myDisplay",
		Description: "\n            \n          ",

		ManufacturerID: "008a",
		ProductType: "0002",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0093,
			},
			&CommandClass{
				ID: 0x0092,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 0,
				Name: "myDisplay ",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New008a00030100() *Device{
	return &Device{
		Brand: "MoLiTe Sensor",
		Product: "MoLiTe Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "008a",
		ProductType: "0003",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0071,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Set to default",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "set to default",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Mode timeout",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "time until the sensor turns off",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Switch off time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "time until the switch turns off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Sensitivity",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "sensitivity value",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "The mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "no detection possible. Battery save mode",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "normal operation mode: send on after detection and off after\ngiven time no detection",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Z-Wave chip is always on to request e.g. version or\nmanufacturer id",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "The temperature offset",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "A signed integer to determine the offset off the temperature",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008a00040100() *Device{
	return &Device{
		Brand: "Door Sensor",
		Product: "Door Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "008a",
		ProductType: "0004",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Set to default",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "If 0xFF then set to default",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "External contact",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send a alarm report with type 2",
						Unit: "",
					},
					Value{
						From: 255,
						To: 1,
						Desc: "Send a Basic set frame to all nodes in association group 2.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "The mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Normal operating mode.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Z-Wave chip is always on to request e.g. version or\nmanufacturer id.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "If any mode other then 3, that value will be reported after a get but\nwill be handled in SW as mode 1.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 127,
						Desc: "If any mode other then 3, that value will be reported after a get but\nwill be handled in SW as mode 1.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "The temperature offset",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32768,
						To: 32767,
						Desc: "A signed integer to determine the offset off the temperature.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008a00060100() *Device{
	return &Device{
		Brand: "Energy Switch",
		Product: "Energy Switch",
		Description: "\n            \n          ",

		ManufacturerID: "008a",
		ProductType: "0006",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Set to default",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "Set to default",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Measure Decimals",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 decimals",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 decimal",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 decimals",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "3 decimals. Every value higher then 3 will be reported as the value that is set but\nhandled in SW as if it was 3",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Power limit",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no power limit is selected",
						Unit: "",
					},
					Value{
						From: 1,
						To: 3600,
						Desc: "variable power limit. &gt; 3600 will be reported as the set value but will be handled in SW as\n3600",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Startup with last known socket status",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "when power applied socket is always off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "when power applied socket is the state bevore power was disconnected",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Temperature offset",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "A signed integer to determine the offset off the temperature",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008a00070100() *Device{
	return &Device{
		Brand: "Tag Reader",
		Product: "Tag Reader",
		Description: "\n            \n          ",

		ManufacturerID: "008a",
		ProductType: "0007",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0063,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Set to default",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "If 0xFF (-1) then set to default",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Feedback time",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Endless",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Feedback timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "0x00 means disabled ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Feedback beeps per second",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "Number of beeps per second",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "The mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Normal operating mode",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Z‐Wave chip is always on to request e.g. version or manufacturer id.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "If any mode other then 3, that value will be reported after a get but\nwill be handled in SW as mode 1.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 127,
						Desc: "If any mode other then 3, that value will be reported after a get but\nwill be handled in SW as mode 1.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008a00080100() *Device{
	return &Device{
		Brand: "Power Switch",
		Product: "Power Switch",
		Description: "\n            \n          ",

		ManufacturerID: "008a",
		ProductType: "0008",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Set to default",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "All values (0x00 – 0xFF) except for 0x55 can be used to default all the\nconfiguration params.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Startup with last known socket status",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "When power applied socket is always off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "When power applied socket is the state before power\nwas disconnected.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Temperature offset",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32768,
						To: 32767,
						Desc: "A signed integer to determine the offset off the temperature.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New008a00180100() *Device{
	return &Device{
		Brand: "BeNext",
		Product: "Plug-in Dimmer",
		Description: "\n            \n            \n          ",

		ManufacturerID: "008a",
		ProductType: "0018",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New008c00010001() *Device{
	return &Device{
		Brand: "MIOS",
		Product: "Vera Lite",
		Description: "\n            \n            \n          ",

		ManufacturerID: "008c",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0021,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0081,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New008e01010101() *Device{
	return &Device{
		Brand: "Raritan",
		Product: "SM 230",
		Description: "\n            \n            \n          ",

		ManufacturerID: "008e",
		ProductType: "0101",
		ProductID: "0101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0028,
			},
			&CommandClass{
				ID: 0x0032,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x007a,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Frequency",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "50 Hz mains",
						Unit: "Hz",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "60 Hz mains",
						Unit: "hz",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Protection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "on",
						Unit: "",
					},
				},
			},
		},
	}
}
func New009000010001() *Device{
	return &Device{
		Brand: "Kwikset",
		Product: "Smart Code with Home Connect Technology 2012",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0090",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0086,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0080,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0070,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0062,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0075,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0063,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x004e,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x004c,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008b,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005d,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "User Code Type 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "User Code Type 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "User Code Type 3",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "User Code Type 4",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "User Code Type 5",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "User Code Type 6",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)Reserved ",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "User Code Type 7",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "User Code Type 8",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "User Code Type 9",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "User Code Type 10",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "User Code Type 11",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "User Code Type 12",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "User Code Type 13",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "User Code Type 14",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "User Code Type 15",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "User Code Type 16",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "User Code Type 17",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "User Code Type 18",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "User Code Type 19",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "User Code Type 20",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "User Code Type 21",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "User Code Type 22",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "User Code Type 23",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "User Code Type 24",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "User Code Type 25",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "User Code Type 26",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "User Code Type 27",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 28,
				Name: "User Code Type 28",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 29,
				Name: "User Code Type 29",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "User Code Type 30",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Owner",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Worker (Required for Week Day Schedules)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "Reserved ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Value of 0xFF is returned when there is no corresponding user\ncode for the requested. (Ignored for write)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Dipswitches state",
				Type: "bitset",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 32,
				Name: "Power level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Low power inclusion/exclusion",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Normal power inclusion/exclusion",
						Unit: "",
					},
					Value{
						From: 2,
						To: 255,
						Desc: "Undefined (ignored)",
						Unit: "",
					},
				},
			},
		},
	}
}
func New009000010236() *Device{
	return &Device{
		Brand: "Kwikset",
		Product: "Smart Code with Home Connect Technology",
		Description: "\n            \n          ",

		ManufacturerID: "0090",
		ProductType: "0001",
		ProductID: "0236",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0075,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0062,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0063,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x004e,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x004c,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008b,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0020,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005d,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 28,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 29,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "User Code",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "User Code Type: Owner (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nUser Code Type: Guest (Required for Year Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nUser Code Type: Worker (Required for Week Day Schedules)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 254,
						Desc: "User Code Type: Reserved",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Dip Switches",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 33,
				Name: "SKU Part Numbers",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 34,
				Name: "SKU Part Numbers",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 40,
				Name: "Default Factory Set",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "read only",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "perform factory reset.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Type of Inclusion/Exclusion",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Low power inclusion/exclusion (default value)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Normal power inclusion/exclusion",
						Unit: "",
					},
					Value{
						From: 2,
						To: 255,
						Desc: "Undefined (ignored)",
						Unit: "",
					},
				},
			},
		},
	}
}
func New009201010001() *Device{
	return &Device{
		Brand: "FZ1-A-230",
		Product: "APz- Empfänger",
		Description: "\n            \n          ",

		ManufacturerID: "0092",
		ProductType: "0101",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New009201020002() *Device{
	return &Device{
		Brand: "FZ1-U-230",
		Product: "UPz- Empfänger",
		Description: "\n            \n          ",

		ManufacturerID: "0092",
		ProductType: "0102",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 0,
				Name: "Self-retaining time &#34;Up&#34; ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "",
						Unit: "Sec",
					},
				},
			},
			&parameter{
				ID: 1,
				Name: "Self-retaining time &#34;Up&#34;",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "",
						Unit: "Sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Self-retaining time &#34;Down&#34;",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "",
						Unit: "Sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Self-retaining time &#34;Down&#34;",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "",
						Unit: "Sec",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Switch-over time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "",
						Unit: "20ms",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Change of direction",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Change-Direction-Duration ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "",
						Unit: "Sec",
					},
				},
			},
		},
	}
}
func New009400010101() *Device{
	return &Device{
		Brand: "Alarm.com",
		Product: "Alarm.com Interlogix Simon XT/i Radio Module",
		Description: "\n            \n          ",

		ManufacturerID: "0094",
		ProductType: "0001",
		ProductID: "0101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0021,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x007a,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x004e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0045,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0042,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0047,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x008b,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New009400010102() *Device{
	return &Device{
		Brand: "Alarm.com",
		Product: "Alarm.com Hub",
		Description: "\n            \n          ",

		ManufacturerID: "0094",
		ProductType: "0001",
		ProductID: "0102",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0021,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New009500000000() *Device{
	return &Device{
		Brand: "QEES",
		Product: "QEES MyKey (EU)",
		Description: "\n            \n          ",

		ManufacturerID: "0095",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0021,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002c,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New009500010000() *Device{
	return &Device{
		Brand: "QEES",
		Product: "QEES Ring",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0095",
		ProductType: "0001",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
				Version: "2",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New009500010001() *Device{
	return &Device{
		Brand: "ai power",
		Product: "QEES Ring",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0095",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 0,
				Name: "??Network rediscovery",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 1,
				Name: "Double press delay",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Delay",
						Unit: "",
					},
				},
			},
		},
	}
}
func New009500030000() *Device{
	return &Device{
		Brand: "ai power",
		Product: "QEES Power",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0095",
		ProductType: "0003",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x00ef,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 0,
				Name: "Network rediscovery",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 1,
				Name: "Automatic network update delay",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "Time = (256 * value) seconds",
						Unit: "",
					},
				},
			},
		},
	}
}
func New009531010001() *Device{
	return &Device{
		Brand: "",
		Product: "RETO Switch Plus 2013",
		Description: "\n            \n          ",

		ManufacturerID: "0095",
		ProductType: "3101",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New009531030001() *Device{
	return &Device{
		Brand: "",
		Product: "Schuko Switch Plus 2013",
		Description: "\n            \n          ",

		ManufacturerID: "0095",
		ProductType: "3103",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New009600010001() *Device{
	return &Device{
		Brand: "NorthQ",
		Product: "Electrical Meter (Energy Guard)",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0096",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008b,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x003d,
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Pulse Factor",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "Pulses",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "IR listening period",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: ".",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "IR pulse width",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: ".",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Poll frequency",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 50,
						Desc: "times",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Pulse Threshold Low",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 143,
						Desc: ".",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Pulse Threshold High",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 143,
						Desc: ".",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Wakeup Interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "s",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Keep Alive Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "s",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Realtime Mode",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "s",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Pulse Count",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 4294967295,
						Desc: "Pulses",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Sensor Type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Pulse Meter",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Rotating Wheel",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Debug",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED blinks at pulse counting",
						Unit: "",
					},
				},
			},
		},
	}
}
func New009600100001() *Device{
	return &Device{
		Brand: "NorthQ",
		Product: "Gas Meter (Energy Guard)",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0096",
		ProductType: "0010",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008b,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x003d,
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Pulse Factor",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "Pulses",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Sensor Type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "magnetic contact",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "silver spot meter",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "IR listening period",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: ".",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "IR pulse width",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: ".",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Poll frequency",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 50,
						Desc: "times",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Pulse Threshold Low",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 143,
						Desc: ".",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Pulse Threshold High",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 143,
						Desc: ".",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Wakeup Interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "s",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Keep Alive Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "s",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Realtime Mode",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "s",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Pulse Count",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 4294967295,
						Desc: "Pulses",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Debug",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED blinks at pulse counting",
						Unit: "",
					},
				},
			},
		},
	}
}
func New009700000000() *Device{
	return &Device{
		Brand: "Wintop",
		Product: "iLED",
		Description: "\n            \n          ",

		ManufacturerID: "0097",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Send NIF and start re-inclusion on",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "power on",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "magnet button",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically switch off after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "in seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Interpret RF Off command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "switch on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "switch on if off else off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Ignore start level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Dimming speed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Instantly",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "in 10ms",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Dimming long speed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "in 1s",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Set maximum light level on On command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "If alredy on",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Always",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Dimmer calibration bottom level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 95,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Dimmer calibration top level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Work as switch: only off and maximum",
						Unit: "",
					},
					Value{
						From: 10,
						To: 99,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Default on level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled (use previous)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "%",
						Unit: "",
					},
				},
			},
		},
	}
}
func New009700240045() *Device{
	return &Device{
		Brand: "Wintop",
		Product: "iShutter",
		Description: "\n            \n          ",

		ManufacturerID: "0097",
		ProductType: "0024",
		ProductID: "0045",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Buttons Mode ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "One push button (default)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Two paddles with Power and Direction",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Two toggle switch",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Two buttons with neutral position",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Two paddles with Power and Direction toggle",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically close after ",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled (default)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Close after this time (in s)",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF off command ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off (default)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Open if close, otherwise close",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Typical click timeout ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Invert buttons ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No (default)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Action on button  press or hold ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On, Off and dim using Multilevel start/stop (default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Send Scene",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "LED mode ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Show working state (default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "always on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "show opened state",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Indicator Command Class",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Full close time ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "keep in permanent motion",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "in s",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Full open time ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "keep in permanent motion",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "in s",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Node Id of the blocking device ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled (default)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 232,
						Desc: "Node Id of the blocking device ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "On which command from blocking node to enable the protection ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on “On” (default)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "on “Off” ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Invert Open and Close relays ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No (default)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 254,
				Name: "Reset to factory Default ",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New009711824501() *Device{
	return &Device{
		Brand: "Wintop",
		Product: "iTemp",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0097",
		ProductType: "1182",
		ProductID: "4501",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Reset",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "normal operation",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "reset",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Command Sent on Dry Input",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Alarm Report Type 2",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Basic On or Off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Operation Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "normal mode",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "always awake",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Temperature Offset",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 K",
						Unit: "",
					},
					Value{
						From: 206,
						To: 50,
						Desc: "Temperature Offset in K",
						Unit: "",
					},
				},
			},
		},
	}
}
func New009761314501() *Device{
	return &Device{
		Brand: "Zipato (Wintop)",
		Product: "Mini Keypad &amp; RFID Reader",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0097",
		ProductType: "6131",
		ProductID: "4501",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0063,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Set to default",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "Set to default",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Feedback time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Feedback timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 128,
						To: 127,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Feedback beeps per second",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "The mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Normal operating mode",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Z‐Wave chip is always on to request e.g. version or manufacturer id.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New009761315101() *Device{
	return &Device{
		Brand: "Zipato (Wintop)",
		Product: "Mini Keypad &amp; RFID Reader",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0097",
		ProductType: "6131",
		ProductID: "5101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0063,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Set to default",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "Set to default",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Feedback time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Feedback timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 128,
						To: 127,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Feedback beeps per second",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 128,
						To: 127,
						Desc: "",
						Unit: "10ms",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "The mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Normal operating mode",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Z‐Wave chip is always on to request e.g. version or manufacturer id.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New009769415501() *Device{
	return &Device{
		Brand: "Wintop",
		Product: "iPlug",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0097",
		ProductType: "6941",
		ProductID: "5501",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Set to default",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 84,
						Desc: "default all the\nconfiguration parameters",
						Unit: "",
					},
					Value{
						From: 86,
						To: 255,
						Desc: "default all the\nconfiguration parameters",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Startup with last known socket status",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "When power applied socket is always off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "When power applied socket is the state before power was disconnected.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Temperature offset",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32768,
						To: 32767,
						Desc: "A signed integer to determine the offset off the temperature.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00980001001e() *Device{
	return &Device{
		Brand: "RTCOA",
		Product: "RTM Z-Wave Module",
		Description: "\n            \n          ",

		ManufacturerID: "0098",
		ProductType: "0001",
		ProductID: "001e",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0093,
			},
			&CommandClass{
				ID: 0x0092,
			},
			&CommandClass{
				ID: 0x0044,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New00981e12015e() *Device{
	return &Device{
		Brand: "Radio Thermostat",
		Product: "CT 30",
		Description: "\n            \n          ",

		ManufacturerID: "0098",
		ProductType: "1e12",
		ProductID: "015e",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0042,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0044,
			},
			&CommandClass{
				ID: 0x0045,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temperature Reporting Threshold",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "0.5 °F",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "1.0 °F",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "1.5 °F",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "2.0°F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "HVAC Settings",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "HVAC Setup: Normal (0x01) or Heat Pump (0x02)",
						Unit: "",
					},
					Value{
						From: 8,
						To: 11,
						Desc: "Number of Auxiliary Stages (Heat Pump) / Number of Heat Stages (Normal)",
						Unit: "",
					},
					Value{
						From: 12,
						To: 15,
						Desc: "Aux Setup:\nGas (0x01) or Electric (0x02)",
						Unit: "",
					},
					Value{
						From: 16,
						To: 23,
						Desc: "Number of Heat Pump Stages",
						Unit: "",
					},
					Value{
						From: 24,
						To: 31,
						Desc: "Number of Cool Stages",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Utility Lock Enable/Disable",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Utility lock disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Utility lock enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "C-Wire / Battery Status",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "C-Wire",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Battery",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Humidity Reporting Threshold",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "3% RH",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "5% RH",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "10%RH",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Auxiliary/Emergency",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auxiliary/Emergency heat disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auxiliary/Emergency heat enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Thermostat Swing Temperature",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 8,
						Desc: "1 = 0.05F, 2 = 0.1F, 8 = 4F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Thermostat Diff Temperature",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 4,
						To: 4,
						Desc: "2.0F",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "4.0F",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "6.0F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Thermostat Recovery Mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Recovery Mode fast ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Recovery Mode economy ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Temperature Reporting Filter",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 124,
						Desc: "",
						Unit: "F",
					},
				},
			},
		},
	}
}
func New009820020100() *Device{
	return &Device{
		Brand: "RTCOA",
		Product: "Thermostat",
		Description: "\n            \n          ",

		ManufacturerID: "0098",
		ProductType: "2002",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005d,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0042,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0044,
			},
			&CommandClass{
				ID: 0x0045,
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temp Reporting Threshold",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "0.5°F",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "1°F",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "1.5°F",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "2°F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "HVAC Settings (get only)",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "Utility Lock Enable/Disable ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "C-Wire/Battery Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The thermostat is being powered from a C-wire.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The thermostat is being powered off of batteries.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Humidity Reporting Threshold",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "3% RH",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "5% RH",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "10% RH",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Auxiliary/Emergency",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Thermostat Swing Temp",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "0.5°F",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "1°F",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "1.5°F",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "2°F",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "2.5°F",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "3°F",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "3.5°F",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "4°F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Thermostat Diff Temp",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 9,
				Name: "Thermostat Recovery Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Recovery Mode is set to fast.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Recovery Mode is set to economy.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Temp Reporting Filter",
				Type: "bitset",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 11,
				Name: "Simple UI Mode Enable/Disable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Multicast Enable/Disable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New009820120100() *Device{
	return &Device{
		Brand: "RTCOA",
		Product: "Thermostat",
		Description: "\n            \n          ",

		ManufacturerID: "0098",
		ProductType: "2012",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005d,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0040,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0042,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0044,
			},
			&CommandClass{
				ID: 0x0045,
			},
			&CommandClass{
				ID: 0x0043,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temp Reporting Threshold",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "0.5°F",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "1°F",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "1.5°F",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "2°F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "HVAC Settings (get only)",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "Utility Lock Enable/Disable",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "C-Wire/Battery Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The thermostat is being powered from a C-wire.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The thermostat is being powered off of batteries.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Humidity Reporting Threshold",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "3% RH",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "5% RH",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "10% RH",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Auxiliary/Emergency",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Thermostat Swing Temp",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "0.5°F",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "1°F",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "1.5°F",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "2°F",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "2.5°F",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "3°F",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "3.5°F",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "4°F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Thermostat Diff Temp",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 9,
				Name: "Thermostat Recovery Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Recovery Mode is set to fast.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Recovery Mode is set to economy.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Temp Reporting Filter",
				Type: "bitset",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 11,
				Name: "Simple UI Mode Enable/Disable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Multicast Enable/Disable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New009850020100() *Device{
	return &Device{
		Brand: "Radio Thermostat",
		Product: "CT 80 - 7 Day Programmable",
		Description: "\n            \n          ",

		ManufacturerID: "0098",
		ProductType: "5002",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0042,
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0044,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0088,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0092,
			},
			&CommandClass{
				ID: 0x0093,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New009864010015() *Device{
	return &Device{
		Brand: "RTCOA",
		Product: "CT100 Z-Wave Thermostat",
		Description: "\n            \n          ",

		ManufacturerID: "0098",
		ProductType: "6401",
		ProductID: "0015",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0044,
			},
			&CommandClass{
				ID: 0x0045,
			},
			&CommandClass{
				ID: 0x0042,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New00986501000d() *Device{
	return &Device{
		Brand: "RTCOA",
		Product: "CT101",
		Description: "\n            \n          ",

		ManufacturerID: "0098",
		ProductType: "6501",
		ProductID: "000d",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0042,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0044,
			},
			&CommandClass{
				ID: 0x0045,
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x005d,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temp Reporting Threshold",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "0.5°F",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "1°F",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "1.5°F",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "2°F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "HVAC Settings (get only)",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "Utility Lock Enable/Disable",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "C-Wire/Battery Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The thermostat is being powered from a C-wire.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The thermostat is being powered off of batteries.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Humidity Reporting Threshold",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "3% RH",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "5% RH",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "10% RH",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Auxiliary/Emergency",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Thermostat Swing Temp",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "0.5°F",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "1°F",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "1.5°F",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "2°F",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "2.5°F",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "3°F",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "3.5°F",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "4°F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Thermostat Diff Temp",
				Type: "bitset",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 9,
				Name: "Thermostat Recovery Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Recovery Mode is set to fast.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Recovery Mode is set to economy.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Temp Reporting Filter",
				Type: "bitset",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 11,
				Name: "Simple UI Mode Enable/Disable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Multicast Enable/Disable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00986e010100() *Device{
	return &Device{
		Brand: "RTCOA",
		Product: "Thermostat",
		Description: "\n            \n          ",

		ManufacturerID: "0098",
		ProductType: "6e01",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005d,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0042,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0044,
			},
			&CommandClass{
				ID: 0x0045,
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temp Reporting Threshold",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "0.5°F",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "1°F",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "1.5°F",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "2°F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "HVAC Settings (get only)",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "Utility Lock Enable/Disable",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "C-Wire/Battery Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "The thermostat is being powered from a C-wire.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "The thermostat is being powered off of batteries.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Humidity Reporting Threshold",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "3% RH",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "5% RH",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "10% RH",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Auxiliary/Emergency",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Thermostat Swing Temp",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "0.5°F",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "1°F",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "1.5°F",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "2°F",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "2.5°F",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "3°F",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "3.5°F",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "4°F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Thermostat Diff Temp",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 9,
				Name: "Thermostat Recovery Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Recovery Mode is set to fast.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Recovery Mode is set to economy.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Temp Reporting Filter",
				Type: "bitset",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 11,
				Name: "Simple UI Mode Enable/Disable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Multicast Enable/Disable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New0098c801000c() *Device{
	return &Device{
		Brand: "Vivint",
		Product: "CT200",
		Description: "\n            \n          ",

		ManufacturerID: "0098",
		ProductType: "c801",
		ProductID: "000c",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005d,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "6",
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0042,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0044,
			},
			&CommandClass{
				ID: 0x0045,
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temperature Reporting Threshold",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "0.5°F",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "1.0°F",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "1.5°F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "HVAC Settings (get only)",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "Utility Lock",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Lock is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "C-Wire/Battery Status(get only)",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 5,
				Name: "Humidity Reporting Threshold",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "3% RH",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "5% RH",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "10% RH",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Auxiliary/Emergency",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "auxiliary / emergency heat is disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "auxiliary / emergency heat is enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Thermostat Swing Temp",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 8,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Thermostat Diff Temp",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 4,
						To: 12,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Thermostat Recovery Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "fast ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "economy",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "When setting parameter 10, the set command must contain 4\nbytes whereas the report frame will only contain 2 bytes. This is\nbecause the additional 2 bytes in the set command qualify the\nvalues being set. In this way the temperature threshold values can\nbe set in either Fahrenheit or Celsius.\nSo a set command will look like this: 0A 04 aa bb cc dd, where:\naa = either 01 to indicate that bb is in Celsius, or 09 to indicate that\nbb is in Fahrenheit, \nbb = the value of the lower bound (0 to 124), \ncc = either 01 to indicate Celsius that dd is in, or 09 to indicate that\ndd is in Fahrenheit, \ndd = the value of the upper bound (0 to 124)",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 12,
				Name: "Multicast Enable/Disable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Fan Timer",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 60,
						Desc: "Define a time interval.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Humidity Activation",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 17,
				Name: "Temperature Calibration",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 250,
						To: 6,
						Desc: "Define a value to compensate the temperature offset.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Display Units",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New009900010002() *Device{
	return &Device{
		Brand: "Greenwave One Gateway",
		Product: "Greenwave One Gateway",
		Description: "\n            \n          ",

		ManufacturerID: "0099",
		ProductType: "0001",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008a,
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0092,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x003d,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0045,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0042,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New00990001a001() *Device{
	return &Device{
		Brand: "AXON™",
		Product: "AXON™ Home Router",
		Description: "\n            \n          ",

		ManufacturerID: "0099",
		ProductType: "0001",
		ProductID: "a001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "7",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New009900020002() *Device{
	return &Device{
		Brand: "GreenWave Reality ",
		Product: "Smart PowerNode ",
		Description: "\n            \n          ",

		ManufacturerID: "0099",
		ProductType: "0002",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New009900030004() *Device{
	return &Device{
		Brand: "GreenWave Reality ",
		Product: "Smart PowerNodes ",
		Description: "\n            \n          ",

		ManufacturerID: "0099",
		ProductType: "0003",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0056,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New009900060001() *Device{
	return &Device{
		Brand: "GreenWave Reality",
		Product: "In Home Display",
		Description: "\n            \n          ",

		ManufacturerID: "0099",
		ProductType: "0006",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0093,
			},
			&CommandClass{
				ID: 0x0092,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0084,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New00a500010001() *Device{
	return &Device{
		Brand: "nodon",
		Product: "Smart Plug",
		Description: "\n            \n            \n          ",

		ManufacturerID: "00a5",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0087,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: " 	Default State",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0=Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1=ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2=Status before Power Failure",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Power Failure",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0=Power Failure detection disable ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1=Power Failure enable (report to Lifeline only)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " 2=Enable group 4",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: " 4=Enable group 5",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "8=Enable group 6",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "16=Enable group 7",
						Unit: "",
					},
					Value{
						From: 32,
						To: 32,
						Desc: "32=Enable group 8",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Follow State",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0= Group 2 &amp; Group 3 disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1= Group 2 enable",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2= Group 3 enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Always On",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: " 0= Always ON disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " 1= Always ON enable",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00a500020001() *Device{
	return &Device{
		Brand: "nodon",
		Product: "Octan Remote",
		Description: "\n            \n            \n          ",

		ManufacturerID: "00a5",
		ProductType: "0002",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Version: "0",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
				Version: "0",
			},
			&CommandClass{
				ID: 0x005b,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0022,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "BUTTONS 1&amp;3 PROFILE",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "SCENE",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "MONO",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "DUO",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "BUTTONS 2&amp;4 PROFILE",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "SCENE",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "MONO",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "DUO",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "SCENE TYPE",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "CENTRAL SCENE",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "SCENE ACTIVATION",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "BUTTON 1 CONFIGURATION",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 2",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switches ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switches OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "BUTTON 2 CONFIGURATION",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 3",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switches ON\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switches OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "BUTTON 3 CONFIGURATION",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 4",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switches ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switches OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "BUTTON 4 CONFIGURATION",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 5",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switches ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switches OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "LED MANAGEMENT",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No LED",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flash Blue after button press",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Blinking to confirm command",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Both options above (1&amp;2)",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00a500020002() *Device{
	return &Device{
		Brand: "nodon",
		Product: "SOFT REMOTE Softberry",
		Description: "\n            \n            \n          ",

		ManufacturerID: "00a5",
		ProductType: "0002",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Version: "0",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
				Version: "0",
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "BUTTONS 1&amp;3 PROFILE",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "SCENE",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "MONO",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "DUO",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "BUTTONS 2&amp;4 PROFILE",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "SCENE",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "MONO",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "DUO",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "SCENE-TYP",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "CENTRAL SCENE",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "SCENE ACTIVATION",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "BUTTON 1 CONFIGURATION",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 2",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switches ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switches OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "BUTTON 2 CONFIGURATION",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 3",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switches ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switches OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "BUTTON 3 CONFIGURATION",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 4",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switches ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switches OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "BUTTON 4 CONFIGURATION",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 5",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switches ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switches OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "LED MANAGEMENT",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No LED",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flash Blue after button press",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Blinking to confirm command",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Both options above (1&amp;2)",
						Unit: "",
					},
				},
			},
		},
	}
}
func New00a500020003() *Device{
	return &Device{
		Brand: "nodon",
		Product: "Wall Switch  Cozy White",
		Description: "\n            \n            \n          ",

		ManufacturerID: "00a5",
		ProductType: "0002",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Version: "0",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
				Version: "0",
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "BUTTONS 1&amp;3 PROFILE",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "SCENE",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "MONO",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "DUO",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "BUTTONS 2&amp;4 PROFILE",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "SCENE",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "MONO",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "DUO",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "SCENE TYPE",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "CENTRAL SCENE",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "SCENE ACTIVATION",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "BUTTON 1 CONFIGURATION",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 2",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switches ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switches OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "BUTTON 2 CONFIGURATION",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 3",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switches ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switches OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "BUTTON 3 CONFIGURATION",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 4",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switches ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switches OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "BUTTON 4 CONFIGURATION",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 5",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switches ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switches OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "LED MANAGEMENT",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New010000010020() *Device{
	return &Device{
		Brand: "Insignia",
		Product: "LED TV 32",
		Description: "\n            \n          ",

		ManufacturerID: "0100",
		ProductType: "0001",
		ProductID: "0020",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0088,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0094,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010200010001() *Device{
	return &Device{
		Brand: "ZAGG",
		Product: "Teleprtall Remote",
		Description: "\n            \n          ",

		ManufacturerID: "0102",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0094,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010300010002() *Device{
	return &Device{
		Brand: "DiehlControls",
		Product: "Plug Actuator 2.0",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0103",
		ProductType: "0001",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0022,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Default switch state",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "On",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Restore last active state.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Energy minimum report time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "minimum time in seconds between two energy values",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Energy maximum report time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "maximum time in seconds between two energy values.",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Power minimum report time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "minimum time in seconds between two power values",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Power maximum report time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "maximum time in seconds between two energy values",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Energy delta value",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "minimum energy value change to send ernergy value",
						Unit: "Wh",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Power delta value",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "minimum power value change to send power value",
						Unit: "Wh",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Security shutdown configuration ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "device stays off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "relaunch of the device if temperature falls after overheat  or three minutes after overload.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Reset of overcurrent shutdown",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reset",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "reset the counter for safety shutdown and activate the device",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Night mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "night mode off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "night mode on, LEDs will light up for one second on after activating the device, otherwise the LEDs stay off.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Info LED Color",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Info-LED off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Info-LED green",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Info-LED yellow",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Info-LED red",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010300020002() *Device{
	return &Device{
		Brand: "DiehlControls",
		Product: "Dimmer Actuator",
		Description: "\n            \n          ",

		ManufacturerID: "0103",
		ProductType: "0002",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0022,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New01080002000d() *Device{
	return &Device{
		Brand: "D-Link",
		Product: "mydlink™ Home Door/Window Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0108",
		ProductType: "0002",
		ProductID: "000d",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0080,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0030,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Dimmer light strength (00 = Dimmer off)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "Light is on",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Define a value for dimming purposes.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "0 means turn off the light.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Illumination threshold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 100,
						To: 100,
						Desc: "100 means turn off illumination\ndetected function. And always turn on\nthe light.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define a treshold.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "0 means turn off illumination detected\nfunction. And never turn on the light.\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Operation mode",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " 1 means test mode,\n 0 means normal mode. Notice:\nThis bit only effect by the DIP Switch\nsetting to “customer mode”, otherwise\nit decides by DIP Switch setting to Test\nor Normal Mode.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Disable the door/window\nfunction. (1:Disable, 0:Enable)\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: " Setting the temperature scale.\n 0: Fahrenheit, 1:Celsius\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Disable the illumination report\nafter event triggered. (1:Disable,\n0:Enable)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: " Disable the temperature report\nafter event triggered. (1:Disable,\n0:Enable)\n",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Disable the back key release\ninto test mode. (1:Disable,\n0:Enable)\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Mult-Sensor Function Switch",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable magnetic integrate\nillumination to turn ON the lighting\nnodes in the association group 2.\n(1:Disable, 0:Enable)\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " Disable PIR integrate\nIllumination to turn ON the lighting\nnodes in the association group 2.\n(1:Disable, 0:Enable)\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Disable magnetic integrate PIR\nto turn ON the lighting nodes in the\nassociation group 2. (1:Disable,\n0:Enable) (Default is Disable)\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: " When Bit2 is 0 (Enable), Are the\ndevice and the lighting in the same\nroom?\n 0: In the same room(Default),\n 1: In the different room.\nNotice: If this bit is 1, it is\nrecommended also set the Bit1 to 1,\ncause the PIR triggered, doesn&#39;t\nmean the people in that room.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: " Disable delay 5 seconds to turn\noff the light, when door/window\nclosed. (1:Disable, 0:Enable)\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: " Disable auto turn off the light,\nafter door/window opened to turn on\nthe light. (1:Disable, 0:Enable)\nNotice: If bit2 is zero, this setting is useless.\nNotice: If the configuration No.9 is\nzero, this setting is useless",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Customer Function",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable sending motion OFF\nreport. (0:Disable, 1:Enable)\nNote: Depends on the Bit4,\n0: Report Notification CC,\nType: 0x07, Event: 0xFE\n1: Sensor Binary Report,\nType: 0x0C, Value: 0x00",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable PIR super sensitivity\nmode. (0:Disable, 1:Enable)\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Disable send out BASIC OFF\nafter door closed. (1:Disable,\n0:Enable)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: " Notification Type,\n 0: Using Notification Report.\n 1: Using Sensor Binary Report.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable Multi CC in auto report.\n(1:Disable, 0:Enable)\n",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Disable to report battery state\nwhen the device triggered. (1:Disable, 0:Enable)\n",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Turn Off Light Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Light is off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Delay time to turn off the lighting",
						Unit: " ticks",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Auto Report Battery Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Auto report inverval.",
						Unit: " ticks",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Auto Report Door/Windows State Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Auto report inverval.",
						Unit: " ticks",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Auto Report Illumination Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Auto report inverval.",
						Unit: " ticks",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Auto Report Temperature Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Auto report inverval.",
						Unit: " ticks",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Auto Report Tick Interval",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Auto report inverval.",
						Unit: " ticks",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Temperature Differential Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Auto report inverval.",
						Unit: " ticks",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Illumination Differential Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Auto report inverval.",
						Unit: " ticks",
					},
				},
			},
		},
	}
}
func New01080002000e() *Device{
	return &Device{
		Brand: "D-Link",
		Product: "mydlink™ Home Door/Window Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0108",
		ProductType: "0002",
		ProductID: "000e",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0080,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0030,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0084,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Dimmer light strength (00 = Dimmer off)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "Light is on",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: " For dimmer\nequipment 1 to 100 means the light\nstrength.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "0 means turn off the light.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Illumination threshold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 100,
						To: 100,
						Desc: "100 means turn off illumination\ndetected function. And always turn on\nthe light.\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define a treshold.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "0 means turn off illumination detected\nfunction. And never turn on the light.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Operation mode",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch test/normal mode (0=Normal)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Disable the door/window function (0=Enabled)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Setting the temperature scale (0:Fahrenheit, 1:Celsius)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Disable the illumination report after event triggered. (0=Enabled)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable the temperature report after event triggered. (0=Enabled)",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Disable the back key release into test mode. (0=Enabled)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Mult-Sensor Function Switch",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable magnetic integrate\nillumination to turn ON the lighting\nnodes in the association group 2.\n(1:Disable, 0:Enable)\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " Disable PIR integrate\nIllumination to turn ON the lighting\nnodes in the association group 2.\n(1:Disable, 0:Enable)\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Disable magnetic integrate PIR\nto turn ON the lighting nodes in the\nassociation group 2. (1:Disable,\n0:Enable) (Default is Disable)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "When Bit2 is 0 (Enable), Are the\ndevice and the lighting in the same\nroom?\n 0: In the same room(Default),\n 1: In the different room.\nNotice: If this bit is 1, it is\nrecommended also set the Bit1 to 1,\ncause the PIR triggered, doesn&#39;t\nmean the people in that room.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: " Disable delay 5 seconds to turn\noff the light, when door/window\nclosed. (1:Disable, 0:Enable)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: " Disable auto turn off the light,\nafter door/window opened to turn on\nthe light. (1:Disable, 0:Enable)\nNotice: If bit2 is zero, this setting is useless.\nNotice: If the configuration No.9 is\nzero, this setting is useless.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Customer Function",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " Enable sending motion OFF\nreport. (0:Disable, 1:Enable)\nNote: Depends on the Bit4,\n0: Report Notification CC,\nType: 0x07, Event: 0xFE\n1: Sensor Binary Report,\nType: 0x0C, Value: 0x00",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable PIR super sensitivity\nmode. (0:Disable, 1:Enable)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Disable send out BASIC OFF\nafter door closed. (1:Disable,\n0:Enable)\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Notification Type,\n 0: Using Notification Report.\n 1: Using Sensor Binary Report.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable Multi CC in auto report.\n(1:Disable, 0:Enable)",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: " Disable to report battery state\nwhen the device triggered. (1:Disable, 0:Enable)",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Turn Off Light Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 means never send turn off light\ncommand.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Delay time to turn off the lighting",
						Unit: " ticks",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Auto Report Battery Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Auto report inverval.",
						Unit: " ticks",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Auto Report Door/Windows State Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Auto report inverval.",
						Unit: " ticks",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Auto Report Illumination Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Auto report inverval.",
						Unit: " ticks",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Auto Report Temperature Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Auto report inverval.",
						Unit: " ticks",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Auto Report Tick Interval",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Define a report inverval in ticks.",
						Unit: " ticks",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Temperature Differential Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Auto report inverval.",
						Unit: " ticks",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Illumination Differential Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Auto report inverval.",
						Unit: " ticks",
					},
				},
			},
		},
	}
}
func New010800200001() *Device{
	return &Device{
		Brand: "D-Link",
		Product: "mydlink™ Connected Home Hub",
		Description: "\n            \n          ",

		ManufacturerID: "0108",
		ProductType: "0020",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010828010001() *Device{
	return &Device{
		Brand: "D-Link",
		Product: "Staples Connect v2",
		Description: "\n            \n          ",

		ManufacturerID: "0108",
		ProductType: "2801",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0066,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0062,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0087,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002d,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x004e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0042,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008a,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008b,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010900000000() *Device{
	return &Device{
		Brand: "Vision ",
		Product: "USB Dongle",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
		},
		Parameters: []*parameter{
		},
	}
}
func New01090002ffff() *Device{
	return &Device{
		Brand: "Yale real Living",
		Product: "Push Button Deadbolt",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "0002",
		ProductID: "ffff",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0062,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010910010102() *Device{
	return &Device{
		Brand: "Vision ",
		Product: "USB Dongle",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "1001",
		ProductID: "0102",
		CommandClasses: []*CommandClass{
		},
		Parameters: []*parameter{
		},
	}
}
func New010910020202() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Keyfob",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "1002",
		ProductID: "0202",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010910040402() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Wall Remote Control",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "1004",
		ProductID: "0402",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920010101() *Device{
	return &Device{
		Brand: "Vision",
		Product: "ZD2102BR",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2001",
		ProductID: "0101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920010102() *Device{
	return &Device{
		Brand: "Vision",
		Product: "ZD2102IN ",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2001",
		ProductID: "0102",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920010104() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Door Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2001",
		ProductID: "0104",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920010105() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Door Sensor ",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2001",
		ProductID: "0105",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "External Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "External Switch is disabled.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "External Switch is enabled.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010920010106() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Door Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2001",
		ProductID: "0106",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "External Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "enable",
						Unit: "",
					},
				},
			},
		},
	}
}
func New0109200101a1() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Door Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2001",
		ProductID: "01a1",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920020201() *Device{
	return &Device{
		Brand: "VISION",
		Product: "ZP3102",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2002",
		ProductID: "0201",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Delay of Off Command",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 129,
						Desc: "Seconds",
						Unit: "s",
					},
				},
			},
		},
	}
}
func New010920020202() *Device{
	return &Device{
		Brand: "Vision",
		Product: "ZP3102BR",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2002",
		ProductID: "0202",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920020203() *Device{
	return &Device{
		Brand: "Vision",
		Product: "ZP3102RU",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2002",
		ProductID: "0203",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Delay of Off Command",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "Minutes",
						Unit: "min",
					},
				},
			},
		},
	}
}
func New010920020204() *Device{
	return &Device{
		Brand: "Vision",
		Product: "PIR Motion Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2002",
		ProductID: "0204",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920020205() *Device{
	return &Device{
		Brand: " Vision",
		Product: "PIR Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2002",
		ProductID: "0205",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Re-trigger Duration",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Define the re-trigger time.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Temperature Scale",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Celsius",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Fahrenheit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Infrared Sensor Sensitivity Adjustment",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 7,
						Desc: "Adjust the sensitivity.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "User defined Celsius Adjustment",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 246,
						To: 255,
						Desc: "Adjust the temperature readings if necessary.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 10,
						Desc: "Adjust the temperature readings if necessary.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010920030302() *Device{
	return &Device{
		Brand: "",
		Product: "ZS5101EU 2013",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2003",
		ProductID: "0302",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920040403() *Device{
	return &Device{
		Brand: "Vision Security",
		Product: "ZS6101EU 2013",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2004",
		ProductID: "0403",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920040404() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Smoke Detector",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2004",
		ProductID: "0404",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New0109200404a4() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Smoke Detector",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2004",
		ProductID: "04a4",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920050503() *Device{
	return &Device{
		Brand: "Vision Security",
		Product: "ZM1601EU 2013",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2005",
		ProductID: "0503",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 0,
				Name: "Siren Strobe Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Strobe and Siren",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Siren only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Strobe only",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 1,
				Name: "Alarm auto stop",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "60 seconds",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "120 seconds",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "no automated off",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "30 seconds",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010920050505() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Wireless Siren &amp; Strobe Alarm, Battery Type",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2005",
		ProductID: "0505",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Siren/Strobe Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All Enable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Siren Only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Strobe Only",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Alarm Auto StopTime",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "30s",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "60s",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "120s",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Will Not Automatically Stop",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010920050508() *Device{
	return &Device{
		Brand: "Vision ",
		Product: "Wireless Siren &amp; Strobe Alarm, Battery Type  ",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2005",
		ProductID: "0508",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Siren/Strobe Mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All Enable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Siren only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Strobe only",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Alarm Auto Stop Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "30 seconds",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "60 seconds",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "120 seconds",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Will Not Automatically Stop",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010920060610() *Device{
	return &Device{
		Brand: "Vision Security",
		Product: "ZM1701",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2006",
		ProductID: "0610",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0062,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0076,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0098,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920060620() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Door Lock for Security",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2006",
		ProductID: "0620",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0062,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0063,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
			},
			&CommandClass{
				ID: 0x008b,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x004c,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x004e,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0098,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920070703() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Lamp and Appliance Switch Module",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2007",
		ProductID: "0703",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920070706() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Plugin ON/OFF",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2007",
		ProductID: "0706",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920080803() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Lamp Dimmer Module",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2008",
		ProductID: "0803",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920090901() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Wireless Siren &amp; Strobe Alarm, Backup battery type",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2009",
		ProductID: "0901",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 0,
				Name: "Siren/Strobe Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Siren and strobe enable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Siren only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Strobe only",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 1,
				Name: "Alarm auto stop time command",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "30 seconds",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "60 seconds",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "120 seconds",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Siren will not stop automatically",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010920090908() *Device{
	return &Device{
		Brand: "Vision ",
		Product: "Siren with DC adapter",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2009",
		ProductID: "0908",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0025,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Siren/Strobe Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All Enable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Siren Only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Strobe Only",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Alarm Auto Stop Time",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The auto stop time is set to 30 sec.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The auto stop time is set to 60 sec.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "The auto stop time is set to 120 sec.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Will Not Automatically Stop",
						Unit: "",
					},
				},
			},
		},
	}
}
func New0109200a0a02() *Device{
	return &Device{
		Brand: "Vision Security",
		Product: "ZG8101EU 2013",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "200a",
		ProductID: "0a02",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New0109200c0c02() *Device{
	return &Device{
		Brand: "Vision",
		Product: "In-Wall 1 relay switch ",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "200c",
		ProductID: "0c02",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Type of Light Control",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "&#34;to control light with 1 wall switch &amp; to control light with 2 wall switches.&#34;",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "&#34;to control 1 light witch 1 wall switch that has light indicator.&#34;",
						Unit: "",
					},
				},
			},
		},
	}
}
func New0109200c0c06() *Device{
	return &Device{
		Brand: "Vision",
		Product: "IN WALL ONE RELAY",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "200c",
		ProductID: "0c06",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Type of Light Control",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "To Control Light with 1 Wall Switch &amp; to Control Light With 2 Wall Switches",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "To Control Light with 1 Wall Switch That Has Light Indicator",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Switch Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "With common on/off type switch button used",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "With momentary type switch button used",
						Unit: "",
					},
				},
			},
		},
	}
}
func New0109200f0f02() *Device{
	return &Device{
		Brand: "Vision Security",
		Product: "ZG6301EU 2013",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "200f",
		ProductID: "0f02",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x009c,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New0109200f0f04() *Device{
	return &Device{
		Brand: "Vision ",
		Product: "CO Detector",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "200f",
		ProductID: "0f04",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920121203() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Repeater",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2012",
		ProductID: "1203",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920121206() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Repeater",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2012",
		ProductID: "1206",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920121207() *Device{
	return &Device{
		Brand: "Vision ",
		Product: "Repeater ",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2012",
		ProductID: "1207",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
				NonSecure: false,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920141401() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Plug-in Dimmer &amp; CT-Clamp Module",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2014",
		ProductID: "1401",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920171717() *Device{
	return &Device{
		Brand: "Vision ",
		Product: "In-Wall 2 relays switch ",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2017",
		ProductID: "1717",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010920171719() *Device{
	return &Device{
		Brand: "Vision",
		Product: "In-wall Two Relay",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2017",
		ProductID: "1719",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0027,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0025,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Button Mode Switching",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Toggle",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010920181805() *Device{
	return &Device{
		Brand: "Vision ",
		Product: "Curtain Module",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2018",
		ProductID: "1805",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0025,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0026,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Curtain Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Pure AC motor curtain (with curtain learn mode function)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Normal motor curtain (control curtain by &#34;curtain total distance time&#34; and &#34;curtain motor wake up time&#34;)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Curtain Total Distance Time (Type 2 curtain only)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 100,
						To: 65535,
						Desc: "Available settings: 0,01 sec. to 655,35 sec.; Define a total distance time.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Curtain Motor wake Up Time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1000,
						Desc: "Define a wake up time. Available settings: 0 sec. to 10 sec.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New0109201a1a02() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Power Monitor",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "201a",
		ProductID: "1a02",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Auto report timing",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 60,
						To: 255,
						Desc: "Define the auto report timing.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Report when Watt change",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 5,
						To: 3600,
						Desc: "Set the maximum variation in wattage, if  a report should be sent.",
						Unit: "W",
					},
				},
			},
		},
	}
}
func New0109201b1b02() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Keyfob",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "201b",
		ProductID: "1b02",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0021,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New0109201c1c03() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Flood Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "201c",
		ProductID: "1c03",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New0109201f1f10() *Device{
	return &Device{
		Brand: "Vision",
		Product: "4in1 Door Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "201f",
		ProductID: "1f10",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				Secure: true,
				NonSecure: false,
				Version: "7",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0098,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temperature Scale",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "°C",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "°F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Temperature",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 50,
						Desc: "Set up from 0.1° to 5°",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Humidity",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 50,
						Desc: "Set up from 1% to 50%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Light",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "OFF",
						Unit: "",
					},
					Value{
						From: 5,
						To: 50,
						Desc: "Set up from 5% to 50%",
						Unit: "",
					},
				},
			},
		},
	}
}
func New0109201f1f20() *Device{
	return &Device{
		Brand: "Vision",
		Product: "4in1 Door Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "201f",
		ProductID: "1f20",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "7",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temperature Measurement Unit",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "°C",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "°F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Temperature Range",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 50,
						Desc: "1~50 (Set up from 0.1°C~5°C)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Humidity",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 50,
						Desc: "1~50 (Set up from 1%~50%)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Light",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function disabled",
						Unit: "",
					},
					Value{
						From: 5,
						To: 50,
						Desc: "Set up from 5% to 50%",
						Unit: "%",
					},
				},
			},
		},
	}
}
func New010920212101() *Device{
	return &Device{
		Brand: "Vision",
		Product: "4 in 1 PIR Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2021",
		ProductID: "2101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "7",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0098,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Temperature Scale",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Celsius",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Fahrenheit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Temperature Range",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 50,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Humidity",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 50,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Light",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 50,
						Desc: "Define a value.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Re-trigger Duration",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Infrared Sensor Sensitivity Adjustment",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 7,
						Desc: "Set a sensitivity.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010920222201() *Device{
	return &Device{
		Brand: "Vision",
		Product: "Door Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0109",
		ProductType: "2022",
		ProductID: "2201",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010930010104() *Device{
	return &Device{
		Brand: "Vision Security",
		Product: "ZM 1602 Wireless Siren",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0109",
		ProductType: "3001",
		ProductID: "0104",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 0,
				Name: "Siren/Strobe Mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Siren and Strobe enable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Siren only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Strobe only",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 1,
				Name: "Alarm auto stop time command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "30 seconds",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "60 seconds",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "120 seconds",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Siren will not automatically stop",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010a11004900() *Device{
	return &Device{
		Brand: "Vitrum",
		Product: "Vitrum I EU dimmer wireless",
		Description: "\n            \n          ",

		ManufacturerID: "010a",
		ProductType: "1100",
		ProductID: "4900",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010a11004a00() *Device{
	return &Device{
		Brand: "Vitrum",
		Product: "Vitrum II EU dimmer wireless",
		Description: "\n            \n          ",

		ManufacturerID: "010a",
		ProductType: "1100",
		ProductID: "4a00",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010a12005100() *Device{
	return &Device{
		Brand: "Vitrum",
		Product: "Vitrum I EU on-off wireless",
		Description: "\n            \n          ",

		ManufacturerID: "010a",
		ProductType: "1200",
		ProductID: "5100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010a12005200() *Device{
	return &Device{
		Brand: "Vitrum",
		Product: "Vitrum II EU on-off wireless",
		Description: "\n            \n          ",

		ManufacturerID: "010a",
		ProductType: "1200",
		ProductID: "5200",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010a13005a00() *Device{
	return &Device{
		Brand: "Vitrum",
		Product: "VITRUM II Control of Roller Blinds - EU BOX",
		Description: "\n            \n          ",

		ManufacturerID: "010a",
		ProductType: "1300",
		ProductID: "5a00",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010b43110001() *Device{
	return &Device{
		Brand: "SMART TAP",
		Product: "SMART TAPTMSH",
		Description: "\n            \n          ",

		ManufacturerID: "010b",
		ProductType: "4311",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0032,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010c00010001() *Device{
	return &Device{
		Brand: "There",
		Product: "ThereGate",
		Description: "\n            \n          ",

		ManufacturerID: "010c",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x008b,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0035,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x003d,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010e00030002() *Device{
	return &Device{
		Brand: "Poly-control",
		Product: "DanaLock",
		Description: "\n            \n            \n          ",

		ManufacturerID: "010e",
		ProductType: "0003",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x004e,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0062,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0063,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0070,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x008a,
				InNIF: "false",
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Invert lock direction",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The motor goes clockwise when unlatched",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The motor goes counterclockwise when unlatched",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Lock Speed",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Slowest",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Slow",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Normal",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Fast",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Fastest",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Lock Mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Stepper motor mode wave drive (Power saving)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Stepper motor mode full drive(Normal)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Lock Turn degrees",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Lock Normal closed time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 60,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Lock Sound",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Battery type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "3.6 V",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "3.0 V",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Battery alarm percent",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Battery level %",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010e00080001() *Device{
	return &Device{
		Brand: "Danalock.com",
		Product: "Danalock100",
		Description: "\n            \n          ",

		ManufacturerID: "010e",
		ProductType: "0008",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0062,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x008a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008b,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x004e,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0063,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0053,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Direction",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = The motor goes clockwise when latched",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = The motor goes counterclockwise when latched",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Speed (Torque)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "1 = Slowest",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 = Slow",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "3 = Normal",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "4 = Fast",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "5 = Fastest",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = Stepper motor mode wave drive(power saving)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = Stepper motor mode full drive(Normal)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 = Relay mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Turn degrees",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "\nFactor 10 turn degrees ( 1 = 10 degrees, 9 = 90 degrees etc.)\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Auto Latch time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 60,
						Desc: "\nSet time interval until the lock should automatically close again after unlatching.\n",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Sound",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Battery Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = 3,6 Volt battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = 3.0 Volt",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\n2 = Mains power, changing from and to mains power requires the Danalock to be excluded and included.\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Battery alarm value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Set battery level to notify user.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Turn and Go",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = Turn and Go",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = Turn and Go on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Brake and GoBack",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 15,
						Desc: "\nSet time interval for lock to brake and then turning back.\n",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Async",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = Async off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = Async on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Door lock operation report type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\n0 = Simple supported by all controllers that support door locks.\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\n1 = Advanced, more specific reports through notification Command Class.\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\n2 = No Door lock operation reports are sent unsolicited.\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010e00080002() *Device{
	return &Device{
		Brand: "Danalock.com",
		Product: "Danalock100",
		Description: "\n            \n          ",

		ManufacturerID: "010e",
		ProductType: "0008",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0062,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x008a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008b,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x004e,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0063,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0053,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Direction",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = The motor goes clockwise when latched",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = The motor goes counterclockwise when latched",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Speed (Torque)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "1 = Slowest",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 = Slow",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "3 = Normal",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "4 = Fast",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "5 = Fastest",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = Stepper motor mode wave drive(power saving)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = Stepper motor mode full drive(Normal)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 = Relay mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Turn degrees",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "\nFactor 10 turn degrees ( 1 = 10 degrees, 9 = 90 degrees etc.)\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Auto Latch time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 60,
						Desc: "\nSet time interval until the lock should automatically close again after unlatching.\n",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Sound",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Battery Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = 3,6 Volt battery",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = 3.0 Volt",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\n2 = Mains power, changing from and to mains power requires the Danalock to be excluded and included.\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Battery alarm value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Set battery level to notify user.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Turn&amp;Go",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = Turn&amp;Go",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = Turn&amp;Go on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Brake&amp;GoBack",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 15,
						Desc: "\nSet time interval for lock to brake and then turning back.\n",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Async",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = Async off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = Async on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Door lock operation report type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\n0 = Simple supported by all controllers that support door locks.\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\n1 = Advanced, more specific reports through notification Command Class.\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\n2 = No Door lock operation reports are sent unsolicited.\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f00000000() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGRGBWM-441",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0033,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "ALL ON / ALL OFF",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ALL ON inactive, ALL OFF inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALL ON inactive, ALL OFF active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALL ON active, ALL OFF inactive",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON active, ALL OFF active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Associations command class choice",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "NORMAL (DIMMER) - BASIC SET/SWITCH_MULTILEVEL_-\nSTART/STOP",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "NORMAL (RGBW) - COLOR_CONTROL_SET/START/\nSTOP_STATE_CHANGE",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "NORMAL (RGBW) - COLOR_CONTROL_SET",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "BRIGHTNESS - BASIC SET/SWITCH_MULTILEVEL_START/\nSTOP",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "RAINBOW (RGBW) - COLOR_CONTROL_SET",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Outputs state change mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "MODE1 (related parameters: 9-step value, 10-time between\nsteps)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "MODE2 (related parameters: 11-time to change value, relevant\nfor RGB/RGBW)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Step value (relevant for MODE1)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Set the number of steps.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Time between steps (relevant for MODE1)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "immediate change of state",
						Unit: "",
					},
					Value{
						From: 1,
						To: 60001,
						Desc: "Define the time interval between each step.",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Time for changing from start to end value",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "immediate change",
						Unit: "",
					},
					Value{
						From: 1,
						To: 63,
						Desc: "Define the time interval from start to end value in ms. Range is from 20 to 216.",
						Unit: "ms",
					},
					Value{
						From: 65,
						To: 127,
						Desc: "Define the time interval from start to end value in sec. Range is from 1 to 63 sec.",
						Unit: "sec",
					},
					Value{
						From: 129,
						To: 191,
						Desc: "Define the time interval from start to end value in sec. Range is from 10 to 630 sec.",
						Unit: "x10sec",
					},
					Value{
						From: 193,
						To: 255,
						Desc: "Define the time interval from start to end value in min. Range is from 1 to 63 min.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Maximum brightening level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 255,
						Desc: "Define the maximum level of brightness.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Minimum dim level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 255,
						Desc: "Define the minimum dim level.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Inputs / Outputs configuration ",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 16,
				Name: "Memorize device status at power cut. Device will be set to status memorized before power cut.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "device does not memorize its status at the power cut. Load is\ndisconnected",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "device memorizes its status at the power cut. Load will be set\nto the status from before power cut (parameters, current outputs\nstatus, energy)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Alarm of any type (general alarm, flood alarm, smoke alarm: CO, CO2, temperature alarm).",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "INACTIVE - the device doesn&#39;t respond to alarm frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM ON - the device turns on once alarm is detected (all\nchannels set to 99%)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM OFF - the device turns off once alarm is detected (all\nchannels set to 0%)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM PROGRAM - alarm sequence turns on (program\nselected in parameter 38)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 38,
				Name: "Alarm sequence program",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 39,
				Name: "Active PROGRAM alarm time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "Define the length of the alarm time.",
						Unit: "sec.",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Command class reporting Outputs status change",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "reporting as a result of inputs and controllers actions (SWITCH\nMULTILEVEL)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "reporting as a result inputs actions (SWITCH MULTILEVEL)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "reporting as a result of inputs actions (COLOR CONTROL)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Reporting 0-10v analog inputs change threshold.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Power load reporting frequency",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reports are not sent. Reports will only be sent in case of polling\nor at turning OFF the device.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Define the time interval between reports.",
						Unit: "sec.",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "Reporting changes in energy consumed by controlled devices.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Changes in consumed energy will not be reported. Reports will\nbe sent only in case of polling.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 254,
						Desc: "Define the value of consumed energy by which a report will be sent.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 71,
				Name: "Response to BRIGHTNESS set to 0%",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "illumination colour set to white (all channels controlled together)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "last set colour is memorized",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 72,
				Name: "Starting predefined program when device set to work in RGB/RGBW mode (parameter 14) - relevant for main controllers other than Home Center 2 only.",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 73,
				Name: "Triple click action",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "NODE INFO control frame is sent.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "starting favourite program",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f00011000() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "Home Center 2",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0001",
		ProductID: "1000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0045,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010f00021000() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "Home Center Lite",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0002",
		ProductID: "1000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0045,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				Version: "4",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010f00021001() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "Home Center Lite",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0002",
		ProductID: "1001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				Version: "4",
			},
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0045,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New010f01000103() *Device{
	return &Device{
		Brand: "Wall Insert",
		Product: "FGD-211",
		Description: "\n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0100",
		ProductID: "0103",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "All on/off function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "neither ALL ON nor ALL OFF are active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "only ALL OFF is active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "only ALL ON is active",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON and ALL OFF are active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Commands Sent to Association Group 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning on and turning off sends out a wireless command",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Turning off sends a wireless command. All devices can be turned on using a double click, dimmers will return to their last dimming state.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Turning ff sends a wireless command. All devices can be turned on using a double click, dimmers will dim to 100 %. ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Check status before sending a control command on external switch no 2.",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Not checked",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Checked",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "The percentage of a dimming step at automated control",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Time between extreme values of manual dimming",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "* 10 ms",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Time between extreme values of automatic dimming",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "* 10 ms",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "The percentage of a dimming step at manual control",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "The maximal dimming level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 98,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "The minimal dimming level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 98,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "External Switch Type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bistable switch",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Double Click Option",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Saving of the device state after power failure",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "off state",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "last dim state",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Allows to double the key number 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Light intensity synchronization",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Function on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Defines how to use bistable external switches",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Every Switch on toggles the device",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Closing external contact turns on, opening external contacts turns off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Length of the Dimmer control pulse",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 100,
						To: 170,
						Desc: " ",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f01000109() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGD211 V1.9",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0100",
		ProductID: "0109",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0000,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Parameter no.1 - Activation/Deactivation",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON active ALL OFF active",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "ALL ON non active ALL OFF non active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALL ON non active ALL OFF active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALL ON active ALL OFF non active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Parameter no.6 - Sending commands to control devices assigned to 1-st association group (key № 1)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "commands are sent when device it turned on and off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "commands are sent when device it turned off. Enabling device does not sent control commands. Double-clicking key sends &#34;turn on&#34; command, dimmers memorize the last saved state (e.g. 50% brightness)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "commands are sent when device it turned off. Enabling device does not sent control commands. Double-clicking key sends &#34;turn on&#34; command and dimmers are set to 100% brightness",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Parameter no.7 - Checking the device status before sending a control frame from the key no. 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Device status is not checked",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Device status is checked",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Parameter no.8 - The percentage of a dimming step at automatic control",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Parameter no.9 - Time of manually moving the Dimmer between the extreme dimming values",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Parameter no.10 - Time of Automatic moving the Dimmer between the extreme dimming values",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled the smooth change in light intensity",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Parameter no.11 - The percentage of a dimming step at manual control",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Parameter no.12 - Maximum Dimmer level control",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 2,
						To: 99,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Parameter no.13 - Minimum Dimmer level control",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 98,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Parameter no.14 - Switch Type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bistable switch",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Roller blind switch (UP/DOWN) - two switch keys operate the Dimmer",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Parameter no.15 - Double click option (set lighting at 100%)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Double click disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Double click enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Parameter no.16 - Saving device state after power failure",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "the Dimmer does not save the state after a power fialure, it returns to &#34;off&#34; position",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "the Dimmer saves its state before power failure",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Parameter no.17 - The function of 3-way switch, provides the option to double key no. 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "the function of 3-way switch is disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "the function of 3-way switch is enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Parameter no.18 - The function of synchronizing the light level for associated devices",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "function enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Parameter no.19 - Assigns bistable key status to the device status",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "[On/Off] device changes status on key status change",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Device status depends on key status: ON when the key is ON, OFF when the key is OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Parameter no.20 - The function enabling the change of control impulse length",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 100,
						To: 170,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Parameter no.30 - Alarm of any type (general alarm, water flooding alarm, smoke alarm: CO, CO2, temperature alarm)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – the device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM DIMMER ON – the device turns on after detection an alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM DIMMER OFF - the device turns off after detection an alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM FLASHING – the device periodically changes its states to the opposite, when it detects an alarm within 10 min",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "Parameter no.39 - Active flashing alarm time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "10 = 1 sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Parameter no.40 - Updating the dimming level without the input from the switch",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Parameter no. 41 - Scene activation functionality",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "deactivation of functionality",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "activation of functionality",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f01021000() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGD-212",
		Description: "\n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0102",
		ProductID: "1000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008e,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0075,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Minimum brightness level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 98,
						Desc: "Define the level of brightness.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Maximum brightness level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 2,
						To: 99,
						Desc: "Define the level of brightness.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Incandescence level of dimmable compact fluorescent lamps",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Define the level of incandescence.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Incandescence time of dimmable compact fluorescent lamps",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Incandescence functionality is disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Define the incandescence time.",
						Unit: "x 0.1 sec",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "The percentage of a dimming step at automatic control",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Define the percentage of a dimming step.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Time of a dimming step at automatic control",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Define the time of a dimming step.",
						Unit: "x 0,01 sec",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "The percentage of a dimming step at manual control",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Define the percentage of a dimming step.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Time of a dimming step at manual control",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Define the time of a dimming step.",
						Unit: "x 0,01 sec",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "State of the device after a power failure",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The Dimmer does not save the state before a power failure, it\nreturns to &#34;off&#34; position",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The Dimmer restores it&#39;s state before power failure",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Timer functionality (auto - off)",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "Sek",
					},
					Value{
						From: 1,
						To: 32767,
						Desc: "time to turn off measured in seconds (1s - 9,1h)",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "ALL ON/ALL OFF function",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ALL ON not active, ALL OFF not active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALL ON not active, ALL OFF active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALL ON active, ALL OFF not active",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON active, ALL OFF active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Force auto-calibration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "readout",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "force auto-calibration of the load without Fibaro Bypass",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "force auto-calibration of the load with Fibaro Bypass",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Auto-calibration status (read-only parameter)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "calibration procedure not performed or Dimmer operates on\nmanual settings",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Dimmer operates on auto-calibration settings",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Burnt out bulb detection",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "percentage value of power variation, compared to standard\npower consumption, measured during the calibration procedure (to be interpreted as load error/burnt out bulb)",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Time delay of a burnt out bulb (parameter 15) or overload (parameter 39) detection.",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "detection of a burnt out bulb disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "delay time in seconds",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Forced switch on brightness level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "percentage level of brightness",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Switch type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "momentary switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "toggle switch",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Roller blind switch - two switches operate the Dimmer (S1 to\nbrighten, S2 to dim)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "The value sent to associated devices on single click",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0xFF value is sent, which will set associated devices to their last\nsaved state.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Current Dimmer state is sent, which will synchronize brightness\nlevel of associated devices (other Dimmers for example).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Assign toggle switch status to the device status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Device changes status on switch status change.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Device status is synchronized with switch status.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "Double click option",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "double click disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "double click enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "Command frames sent in 2-nd and 3-rd association groups (S1 associations)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 31,
						Desc: "0 - all actions send to association groups; \n1 - do not send when switching on the Dimmer (single click); \n2 - do not send when switching off the Dimmer (single click); \n4 - do not send when changing dimming level (holding and releasing); \n8 - do not send on double click; \n16 - send 0xFF value on double click; ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "Command frames sent in 4-th and 5-th association groups (S2 associations)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 31,
						Desc: "0 - all actions send to association groups; \n1 - do not send when switching on the Dimmer (single click); \n2 - do not send when switching off the Dimmer (single click); \n4 - do not send when changing dimming level (holding and releasing); \n8 - do not send on double click; \n16 - send 0xFF value on double click; ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "The function of 3-way switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "3-way switch function for S2 disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "3-way switch function for S2 enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "Associations in Z-Wave network security mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 15,
						Desc: "0 - all groups (II-V) sent as non-secure; \n1 - 2nd group sent as secure; \n2 - 3rd group sent as secure; \n4 - 4th group sent as secure; \n8 - 5th group sent as secure; \n15 - all groups (II-V) sent as secure",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 28,
				Name: "Scene activation functionality",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "functionality deactivated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "functionality activated",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 29,
				Name: "Switch functionality of S1 and S2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "standard mode",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "S1 operates as S2, S2 operates as S1",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Load control mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "forced leading edge control",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "forced trailing edge control",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "control mode selected automatically (based on auto-calibration)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Load control mode recognized during auto-calibration (read only).",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "leading edge",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "trailing edge",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "On/Off mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off mode disabled (dimming is possible)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "on/off mode enabled (dimming is not possible)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "mode selected automatically",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Dimmability of the load (read only)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Load recognized as dimmable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Load recognized as non-dimmable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "Soft-Start functionality",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no soft-start",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "short soft-start (0,1s)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "long soft-start (0,5s)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "Auto-calibration after power on",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No auto-calibration of the load after power on",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto-calibration performed after first power on",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto-calibration performed after each power on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto-calibration performed after first power on or after each\nLOAD ERROR alarm (no load, load failure, burnt out bulb), if\nparameter 37 is set to 1 also after alarms: SURGE (Dimmer output\novervoltage) and OVERCURRENT (Dimmer output overcurrent)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Auto-calibration performed after each power on or after each\nLOAD ERROR alarm (no load, load failure, burnt out bulb), if\nparameter 37 is set to 1 also after alarms: SURGE (Dimmer output\novervoltage) and OVERCURRENT (Dimmer output overcurrent)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 37,
				Name: "Behaviour of the Dimmer after OVERCURRENT or SURGE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "device permanently disabled until re-enabling by comand or\nexternal switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "three atempts to turn on the load",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "Power limit - OVERLOAD",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function is disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 350,
						Desc: "Define a power limit.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Response to General Purpose Alarm",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Turn on the load",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Turn off the load",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Load blinking",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Response to Water Flooding Alarm",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "turn on the load",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "turn off the load",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "load blinking",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Response to Smoke, CO or CO2 Alarm",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "turn on the load",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "turn off the load",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "load blinking",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Response to Temperature Alarm",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "turn on the load",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "turn off the load",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "load blinking",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Time of alarm state",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define the time period of an alarm state.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "OVERLOAD alarm report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "send an alarm frame",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 46,
				Name: "LOAD ERROR alarm report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "send an alarm frame",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 47,
				Name: "OVERCURRENT alarm report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "send an alarm frame",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 48,
				Name: "SURGE alarm report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "send an alarm frame",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 49,
				Name: "OVERHEAT (critical temperature) and VOLTAGE DROP (low voltage) alarm report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "send an alarm frame",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "Active power reports",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "power reports disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "define the power report threshold.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "Periodic active power and energy reports",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function is disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32767,
						Desc: "Define a time period for periodic reports.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 53,
				Name: "Energy reports",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "energy reports are disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "report triggering threshold",
						Unit: "x 0,01 kWh",
					},
				},
			},
			&parameter{
				ID: 54,
				Name: "Self-measurement",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Self-measurement inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Self-measurement active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 58,
				Name: "Method of calculating the active power",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "power measurement based on the standard algorithm",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "approximation based on the calibration data",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "approximation based on the control angle",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 59,
				Name: "Approximated power at the maximum brightness level",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 500,
						Desc: "power consumed by the load at the maximum\nbrightness level",
						Unit: "W",
					},
				},
			},
		},
	}
}
func New010f01022000() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGD-212",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0102",
		ProductID: "2000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008e,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0075,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Minimum brightness level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 98,
						Desc: "Define the level of brightness.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Maximum brightness level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 2,
						To: 99,
						Desc: "Define the level of brightness.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Incandescence level of dimmable compact fluorescent lamps",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Define the level of incandescence.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Incandescence time of dimmable compact fluorescent lamps",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Incandescence functionality is disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Define the incandescence time.",
						Unit: "x 0.1 sec",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "The percentage of a dimming step at automatic control",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Define the percentage of a dimming step.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Time of a dimming step at automatic control",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Define the time of a dimming step.",
						Unit: "x 0,01 sec",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "The percentage of a dimming step at manual control",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Define the percentage of a dimming step.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Time of a dimming step at manual control",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Define the time of a dimming step.",
						Unit: "x 0,01 sec",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "State of the device after a power failure",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The Dimmer does not save the state before a power failure, it\nreturns to &#34;off&#34; position",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The Dimmer restores it&#39;s state before power failure",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Timer functionality (auto - off)",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "Sek",
					},
					Value{
						From: 1,
						To: 32767,
						Desc: "time to turn off measured in seconds (1s - 9,1h)",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "ALL ON/ALL OFF function",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ALL ON not active, ALL OFF not active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALL ON not active, ALL OFF active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALL ON active, ALL OFF not active",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON active, ALL OFF active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Force auto-calibration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "readout",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "force auto-calibration of the load without Fibaro Bypass",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "force auto-calibration of the load with Fibaro Bypass",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Auto-calibration status (read-only parameter)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "calibration procedure not performed or Dimmer operates on\nmanual settings",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Dimmer operates on auto-calibration settings",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Burnt out bulb detection",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "percentage value of power variation, compared to standard\npower consumption, measured during the calibration procedure (to be interpreted as load error/burnt out bulb)",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Time delay of a burnt out bulb (parameter 15) or overload (parameter 39) detection.",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "detection of a burnt out bulb disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "delay time in seconds",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Forced switch on brightness level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "percentage level of brightness",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Switch type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "momentary switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "toggle switch",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Roller blind switch - two switches operate the Dimmer (S1 to\nbrighten, S2 to dim)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "The value sent to associated devices on single click",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0xFF value is sent, which will set associated devices to their last\nsaved state.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Current Dimmer state is sent, which will synchronize brightness\nlevel of associated devices (other Dimmers for example).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Assign toggle switch status to the device status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Device changes status on switch status change.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Device status is synchronized with switch status.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "Double click option",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "double click disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "double click enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "Command frames sent in 2-nd and 3-rd association groups (S1 associations)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 31,
						Desc: "0 - all actions send to association groups; \n1 - do not send when switching on the Dimmer (single click); \n2 - do not send when switching off the Dimmer (single click); \n4 - do not send when changing dimming level (holding and releasing); \n8 - do not send on double click; \n16 - send 0xFF value on double click; ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "Command frames sent in 4-th and 5-th association groups (S2 associations)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 31,
						Desc: "0 - all actions send to association groups; \n1 - do not send when switching on the Dimmer (single click); \n2 - do not send when switching off the Dimmer (single click); \n4 - do not send when changing dimming level (holding and releasing); \n8 - do not send on double click; \n16 - send 0xFF value on double click; ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "The function of 3-way switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "3-way switch function for S2 disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "3-way switch function for S2 enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "Associations in Z-Wave network security mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 15,
						Desc: "0 - all groups (II-V) sent as non-secure; \n1 - 2nd group sent as secure; \n2 - 3rd group sent as secure; \n4 - 4th group sent as secure; \n8 - 5th group sent as secure; \n15 - all groups (II-V) sent as secure",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 28,
				Name: "Scene activation functionality",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "functionality deactivated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "functionality activated",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 29,
				Name: "Switch functionality of S1 and S2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "standard mode",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "S1 operates as S2, S2 operates as S1",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Load control mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "forced leading edge control",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "forced trailing edge control",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "control mode selected automatically (based on auto-calibration)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Load control mode recognized during auto-calibration (read only).",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "leading edge",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "trailing edge",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "On/Off mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off mode disabled (dimming is possible)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "on/off mode enabled (dimming is not possible)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "mode selected automatically",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Dimmability of the load (read only)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Load recognized as dimmable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Load recognized as non-dimmable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "Soft-Start functionality",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no soft-start",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "short soft-start (0,1s)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "long soft-start (0,5s)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "Auto-calibration after power on",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No auto-calibration of the load after power on",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Auto-calibration performed after first power on",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Auto-calibration performed after each power on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Auto-calibration performed after first power on or after each\nLOAD ERROR alarm (no load, load failure, burnt out bulb), if\nparameter 37 is set to 1 also after alarms: SURGE (Dimmer output\novervoltage) and OVERCURRENT (Dimmer output overcurrent)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Auto-calibration performed after each power on or after each\nLOAD ERROR alarm (no load, load failure, burnt out bulb), if\nparameter 37 is set to 1 also after alarms: SURGE (Dimmer output\novervoltage) and OVERCURRENT (Dimmer output overcurrent)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 37,
				Name: "Behaviour of the Dimmer after OVERCURRENT or SURGE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "device permanently disabled until re-enabling by comand or\nexternal switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "three atempts to turn on the load",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "Power limit - OVERLOAD",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function is disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 350,
						Desc: "Define a power limit.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Response to General Purpose Alarm",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Turn on the load",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Turn off the load",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Load blinking",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Response to Water Flooding Alarm",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "turn on the load",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "turn off the load",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "load blinking",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Response to Smoke, CO or CO2 Alarm",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "turn on the load",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "turn off the load",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "load blinking",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Response to Temperature Alarm",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "turn on the load",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "turn off the load",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "load blinking",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Time of alarm state",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define the time period of an alarm state.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "OVERLOAD alarm report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "send an alarm frame",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 46,
				Name: "LOAD ERROR alarm report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "send an alarm frame",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 47,
				Name: "OVERCURRENT alarm report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "send an alarm frame",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 48,
				Name: "SURGE alarm report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "send an alarm frame",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 49,
				Name: "OVERHEAT (critical temperature) and VOLTAGE DROP (low voltage) alarm report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "send an alarm frame",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "Active power reports",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "power reports disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "define the power report threshold.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "Periodic active power and energy reports",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function is disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32767,
						Desc: "Define a time period for periodic reports.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 53,
				Name: "Energy reports",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "energy reports are disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "report triggering threshold",
						Unit: "x 0,01 kWh",
					},
				},
			},
			&parameter{
				ID: 54,
				Name: "Self-measurement",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Self-measurement inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Self-measurement active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 58,
				Name: "Method of calculating the active power",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "power measurement based on the standard algorithm",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "approximation based on the calibration data",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "approximation based on the control angle",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 59,
				Name: "Approximated power at the maximum brightness level",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 500,
						Desc: "power consumed by the load at the maximum\nbrightness level",
						Unit: "W",
					},
				},
			},
		},
	}
}
func New010f02000103() *Device{
	return &Device{
		Brand: "Fibar",
		Product: "FGS-221",
		Description: "\n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0200",
		ProductID: "0103",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0000,
				InNIF: "false",
				Version: "0",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "All on/off function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "neither ALL ON nor ALL OFF are active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "only ALL OFF is active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "only ALL ON is active",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON and ALL OFF are active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Automatic Switching Off after defined time",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enabled for relays 1, disabled for relays 2",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enabled for relays 2, disabled for relays 1",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Automated Turn Off Time for relays 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "ms",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Automated Turn Off Time for relays 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "ms",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Commands Sent to Association Group 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning on and turning off sends out a wireless command",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Turning off sends a wireless command. All devices can be turned on using a double click, dimmers will return to their last dimming state.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Turning ff sends a wireless command. All devices can be turned on using a double click, dimmers will dim to 100 %. ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Check status before sending a control command on external switch no 2.",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Not checked",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Checked",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Bistable Switch State",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ON/OFF sets to change of key state",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ON is active when contacts are closed and OFF is active when contacts are open",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Type of Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable switch",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Saving of switch state after power-down",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "not return to previous state",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "return to previous state",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "General Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Flood Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Smoke Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Temperature Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "Time of Active Alarm",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 20000,
						Desc: "Seconds",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "General Alarm Set - Relay 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Flood Alarm Set - Relay 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Smoke Alarm Set - Relay 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Temperature Alarm Set - Relay 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f02000109() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGS221 V1.9",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0200",
		ProductID: "0109",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0000,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Parameter no.1 - Activation/Deactivation",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON active ALL OFF active",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "ALL ON non active ALL OFF non active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALL ON non active ALL OFF active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALL ON active ALL OFF non active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Parameter no.3 - Auto off relay after specified time, with the possibility of manual override - immediate Off after button push",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Manual override enabled",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Manual override disabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Parameter no.4 - Auto off for relay 1.",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "10 = 1 sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Parameter no.5 - Auto off for relay 2.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "10 = 1 sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Parameter no.6 - Sending commands to control devices assigned to 1-st association group (key № 1)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "commands are sent when device it turned on and off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "commands are sent when device it turned off. Enabling device does not sent control commands. Double-clicking key sends &#34;turn on&#34; command, dimmers memorize the last saved state (e.g. 50% brightness)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "commands are sent when device it turned off. Enabling device does not sent control commands. Double-clicking key sends &#34;turn on&#34; command and dimmers are set to 100% brightness",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Parameter no.7 - Sending commands to control devices assigned to 2-st association group (key № 2)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "commands are sent when device it turned on and off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "commands are sent when device it turned off. Enabling device does not sent control commands. Double-clicking key sends &#34;turn on&#34; command, dimmers memorize the last saved state (e.g. 50% brightness)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "commands are sent when device it turned off. Enabling device does not sent control commands. Double-clicking key sends &#34;turn on&#34; command and dimmers are set to 100% brightness",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Parameter no.13 - Assigns bistable key status to the device status",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "[On/Off] device changes status on key status change",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Device status depends on key status: ON when the key is ON, OFF when the key is OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Parameter no.14 - Switch Type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bistable switch",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Parameter no.15 - Operation of the Dimmer and Roller Shutter Controller (mono-stable type)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Parameter no.16 - Saving device state after power failure",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Fibaro Swith does not save the state after a power fialure, it returns to &#34;off&#34; position",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Fibaro Switch saves its state before power failure",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Parameter no.30 - General alarm set for relay no. 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – the device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM RELAY ON – device turns on after detection an alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM RELAY OFF - the device turns off after detection an alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM FLASHING – the device periodically changes its states to the opposite, when it detects an alarm within 10 min",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Parameter no.40 - General alarm set for relay no. 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – the device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM RELAY ON – device turns on after detection an alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM RELAY OFF - the device turns off after detection an alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM FLASHING – the device periodically changes its states to the opposite, when it detects an alarm within 10 min",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Parameter no.31 - Alarm of flooding with water, set for relay no. 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM RELAY ON – the device turns on after alarm detection",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM RELAY OFF - the device turns off after alarm detection",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM FLASHING – the device periodically changes its states to the opposite, when it detects an alarm within 10 min",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Parameter no.41 - Alarm of flooding with water, set for relay no. 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM RELAY ON – the device turns on after alarm detection",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM RELAY OFF - the device turns off after alarm detection",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM FLASHING – the device periodically changes its states to the opposite, when it detects an alarm within 10 min",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Parameter no.32 - Smoke, CO, CO2 Alarm. Set for relay no. 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM RELAY ON – the device turns on after alarm detection",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM RELAY OFF - the device turns off after alarm detection",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM FLASHING – the device periodically changes its states to the opposite, when it detects an alarm within 10 min",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Parameter no.42 - Smoke, CO, CO2 Alarm. Set for relay no. 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM RELAY ON – the device turns on after alarm detection",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM RELAY OFF - the device turns off after alarm detection",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM FLASHING – the device periodically changes its states to the opposite, when it detects an alarm within 10 min",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Parameter no.33 - Temperature Alarm. Set for relay no. 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM RELAY ON – the device turns on after alarm detection",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM RELAY OFF - the device turns off after alarm detection",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM FLASHING – the device periodically changes its states to the opposite, when it detects an alarm within 10 min",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Parameter no.43 - Temperature Alarm. Set for relay no. 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM RELAY ON – the device turns on after alarm detection",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM RELAY OFF - the device turns off after alarm detection",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM FLASHING – the device periodically changes its states to the opposite, when it detects an alarm within 10 min",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "Parameter no.39 - Active flashing alarm time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "10 = 1 sec",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f0200100a() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGS222",
		Description: "\n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0200",
		ProductID: "100a",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Activation/Deactivation",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "neither ALL ON nor ALL OFF are active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "only ALL OFF is active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "only ALL ON is active",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON and ALL OFF are active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Auto off relay after specified time, with the possibility of manual override - immediate Off after button push",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enabled for relays 1, disabled for relays 2",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enabled for relays 2, disabled for relays 1",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Auto off",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "time",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: " Sending commands to control devices assigned to 1-st association group (key № 1)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning on and turning off sends out a wireless command",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "urning off sends a wireless command. All devices can be turned on using a double click, dimmers will return to their last dimming state.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Turning ff sends a wireless command. All devices can be turned on using a double click, dimmers will dim to 100 %.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Assigns bistable key status to the device status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ON/OFF sets to change of key state",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ON is active when contacts are closed and OFF is active when contacts are open",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Switch Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable switch",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Operation of the Dimmer and Roller Shutter Controller (mono-stable type)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "deactivate",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "activate",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Saving device state after power failure",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "not return to previous state",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "return to previous state",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "General Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Flood Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Smoke Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Temperature Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "Active flashing alarm time",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "time",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "General Alarm Set - Relay 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Flood Alarm Set - Relay 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Smoke Alarm Set - Relay 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Temperature Alarm Set - Relay 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f03000103() *Device{
	return &Device{
		Brand: "Fibar",
		Product: "FGR-221",
		Description: "\n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0300",
		ProductID: "0103",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0050,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "All on/off function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "neither ALL ON nor ALL OFF are active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "only ALL OFF is active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "only ALL ON is active",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON and ALL OFF are active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Turn Off Roller position function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "enabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "disabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Type of Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable switch",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Favorite position state",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 153,
						Desc: " ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "General Alarm Set ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " Blind will go down in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " Blind will go up in case of  alarm",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Flood Alarm Set ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " Blind will go down in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " Blind will go up in case of  alarm",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Smoke Alarm Set ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " Blind will go down in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " Blind will go up in case of  alarm",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Temperature Alarm Set ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " Blind will go down in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " Blind will go up in case of  alarm",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f03000109() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGR211 V1.9",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0300",
		ProductID: "0109",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0050,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0000,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Parameter no.1 - Activation/Deactivation",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON active ALL OFF active",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "ALL ON non active ALL OFF non active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALL ON non active ALL OFF active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALL ON active ALL OFF non active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Parameter no.10 - Turning off the shutter positioning function",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Turning on the shutter positioning function",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Turning off the shutter positioning function",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Parameter no.14 - Switch Type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bistable switch",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "single mono-stable switch",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Parameter no.20 - Saving the position &#34;Favorites&#34;",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Parameter no.30 - General alarm set for shutter no. 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – the device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "OPEN SHUTTER ALARM – the device closes the roller shutter after detecting an alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "CLOSED SHUTTER ALARM - the device opens the roller shutter after detecting an alarm",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Parameter no.31 - Alarm of flooding with water, set for shutter no. 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – the device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "OPEN SHUTTER ALARM – the device closes the roller shutter after detecting an alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "CLOSED SHUTTER ALARM - the device opens the roller shutter after detecting an alarm",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Parameter no.32 - Smoke, CO, CO2 Alarm. Set for the roller shutter",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – the device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "OPEN SHUTTER ALARM – the device closes the roller shutter after detecting an alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "CLOSED SHUTTER ALARM - the device opens the roller shutter after detecting an alarm",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Parameter no.33 - Temperature Alarm. Set for roller shutter",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – the device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "OPEN SHUTTER ALARM – the device closes the roller shutter after detecting an alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "CLOSED SHUTTER ALARM - the device opens the roller shutter after detecting an alarm",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Parameter no. 41 - Scene activation functionality",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "deactivation of functionality",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "activation of functionality",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f03011001() *Device{
	return &Device{
		Brand: "Fibargroup",
		Product: "Roller Shutter FGRM-222",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0301",
		ProductID: "1001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "local protection",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 - no protection. Roller Shutter responds to push buttons.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 - not supported.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 - Local protection active. Roller Shutter does not respond to push buttons.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "radio protection",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 – No protection. Roller Shutter responds to command frames.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 - RF Protection active. Roller Shutter does not respond to the\nZ-Wave control frames.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 - not supported.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "reports type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 – Blind position reports sent to the main controller using Z-Wave\nCommand Class.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 - Blind position reports sent to the main controller using Fibar\nCommand Class.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Roller Shutter operating modes",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 - Roller Blind Mode, without positioning",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 - Roller Blind Mode, with positioning",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 - Venetian Blind Mode, with positioning",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "3 - Gate Mode, without positioning",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "4 - Gate Mode, with positioning",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "turning time/ delay time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32769,
						To: 32767,
						Desc: "Value 0 means the gate will not close automatically.",
						Unit: "0,01s",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "lamellas positioning mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 - Lamellas return to previously set position only in case of the\nmain controller operation.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 - Lamellas return to previously set position in case of the main controller operation, momentary switch operation, or when the\nlimit switch is reached.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 - Lamellas return to previously set position in case of the main\ncontroller operation, momentary switch operation, when the limit\nswitch is reached or after receiving a “STOP” control frame\n(Switch Multilevel Stop).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "switch type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 - Momentary switches",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 - Toggle switches",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 - Single, momentary switch. (The switch should be connected to S1 terminal)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "delay time after S2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 129,
						To: 127,
						Desc: "value 10 = 1s.\nIn Gate Mode, time to turn off the Roller Shutter relays after reaching a limit switch is set to 3 seconds and cannot be modified. Value of 0 means the gate will note close automatically.",
						Unit: "0,1s",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "motor operation detection",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 129,
						To: 127,
						Desc: "The value of 0 means reaching a limit switch will not be detected.",
						Unit: "1W",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "motor operation time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32769,
						To: 32767,
						Desc: "value of 0 means the function is disabled.",
						Unit: "1s",
					},
				},
			},
			&parameter{
				ID: 29,
				Name: "Forced Roller Shutter calibration",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 - deactivated (value 0 is automatically set after calibration process)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 - Start calibration process",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Response to general alarm",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 - No reaction.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 - Open blind.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 - Close blind.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Response to flooding alarm",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 - No reaction.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 - Open blind.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 - Close blind.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Response to smoke, CO or CO2 alarm",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 - No reaction.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 - Open blind.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 - Close blind.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Response to temperature alarm",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 - No reaction.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 - Open blind.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 - Close blind.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "Managing lamellas in response to alarm",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 - Do not change lamellas position - lamellas return to the last set position.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 - Set lamellas to their extreme position.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Power reports",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Value of 0 means the reports are turned off.",
						Unit: "1%",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Periodic power or energy reports",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32769,
						To: 32767,
						Desc: "Value of 0 means the reports are turned off.",
						Unit: "1s",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Energy reports",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 130,
						To: 127,
						Desc: "Value of 0 means the reports are turned off.",
						Unit: "0,01KWh",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Self-measurement",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 - Self-measurement inactive.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 - Self-measurement active.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "Scenes/ Associations activation",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 - Associations activation",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 - Scenes activation",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f04000103() *Device{
	return &Device{
		Brand: "Fibar",
		Product: "FGS-211",
		Description: "\n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0400",
		ProductID: "0103",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "All on/off function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "neither ALL ON nor ALL OFF are active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "only ALL OFF is active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "only ALL ON is active",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON and ALL OFF are active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Automatic Switching Off after defined time",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Enabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Automated Turn Off Time",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "ms",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Commands Sent to Association Group 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning on and turning off sends out a wireless command",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Turning off sends a wireless command. All devices can be turned on using a double click, dimmers will return to their last dimming state.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Turning ff sends a wireless command. All devices can be turned on using a double click, dimmers will dim to 100 %. ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Bistable Switch State",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ON/OFF sets to change of key state",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ON is active when contacts are closed and OFF is active when contacts are open",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Type of Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable switch",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Saving of switch state after power-down",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "not return to previous state",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "return to previous state",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "General Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Flood Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Smoke Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Temperature Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "Time of Active Alarm",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 20000,
						Desc: "Seconds",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "General Alarm Set - Relay 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Flood Alarm Set - Relay 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Smoke Alarm Set - Relay 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Temperature Alarm Set - Relay 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of  alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of  alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing  on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f04000109() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGS211 V1.9",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0400",
		ProductID: "0109",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0000,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Parameter no.1 - Activation/Deactivation",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON active ALL OFF active",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "ALL ON non active ALL OFF non active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALL ON non active ALL OFF active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALL ON active ALL OFF non active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Parameter no.3 - Auto off relay after specified time, with the possibility of manual override - immediate Off after button push",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Manual override enabled",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Manual override disabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Parameter no.4 - Auto off",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "10 = 1 sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Parameter no.6 - Sending commands to control devices assigned to 1-st association group (key № 1)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "commands are sent when device it turned on and off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "commands are sent when device it turned off. Enabling device does not sent control commands. Double-clicking key sends &#34;turn on&#34; command, dimmers memorize the last saved state (e.g. 50% brightness)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "commands are sent when device it turned off. Enabling device does not sent control commands. Double-clicking key sends &#34;turn on&#34; command and dimmers are set to 100% brightness",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Parameter no.13 - Assigns bistable key status to the device status",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "[On/Off] device changes status on key status change",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Device status depends on key status: ON when the key is ON, OFF when the key is OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Parameter no.14 - Switch Type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bistable switch",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Parameter no.15 - Operation of the Dimmer and Roller Shutter Controller (mono-stable type)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Parameter no.16 - Saving device state after power failure",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Fibaro Swith does not save the state after a power fialure, it returns to &#34;off&#34; position",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Fibaro Switch saves its state before power failure",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Parameter no.30 - General alarm set for relay no. 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – the device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM RELAY ON – the device turns on after detection an alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM RELAY OFF - the device turns off after detection an alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM FLASHING – the device periodically changes its states to the opposite, when it detects an alarm within 10 min",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Parameter no.31 - Alarm of flooding with water, set for relay no. 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – the device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM RELAY ON – the device turns on after alarm detection",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM RELAY OFF - the device turns off after alarm detection",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM FLASHING – the device periodically changes its states to the opposite, when it detects an alarm within 10 min",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Parameter no.32 - Smoke, CO, CO2 Alarm. Set for relay no. 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – the device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM RELAY ON – the device turns on after alarm detection",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM RELAY OFF - the device turns off after alarm detection",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM FLASHING – the device periodically changes its states to the opposite, when it detects an alarm within 10 min",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Parameter no.33 - Temperature Alarm. Set for relay no. 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DACTIVATION – the device doesn&#39;t respond to alarm data frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM RELAY ON – the device turns on after alarm detection",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM RELAY OFF - the device turns off after alarm detection",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM FLASHING – the device periodically changes its states to the opposite, when it detects an alarm within 10 min",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "Parameter no.39 - Active flashing alarm time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "10 = 1 sec",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f0400100a() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGS212",
		Description: "\n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0400",
		ProductID: "100a",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Activation/Deactivation",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "neither ALL ON nor ALL OFF are active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "only ALL OFF is active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "only ALL ON is active",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON and ALL OFF are active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Ermöglicht eine automatische Abschaltfunktion nach einer in Parameter 4 festgelegten Zeit",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Activated",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Auto off",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "time",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Legt fest, welche Schaltoperation andere Geräte in Assoziationsgruppen steuert. Um die Doppelklickfunktion zu unterstützen, muss Parameter 15 auf den Wert 1 gesetzt werden.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning on and turning off sends out a wireless command",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "urning off sends a wireless command. All devices can be turned on using a double click, dimmers will return to their last dimming state.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Turning ff sends a wireless command. All devices can be turned on using a double click, dimmers will dim to 100 %.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Assigns bistable key status to the device status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ON/OFF sets to change of key state",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ON is active when contacts are closed and OFF is active when contacts are open",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Switch Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable switch",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable switch",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Wenn diese Funktion aktiviert ist, erlaubt es dem Benutzer assoziierte Geräte zu dimmen indem er die Taster gedrückt hält oder doppelt drückt.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "deactivate",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "activate",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "definiert das Verhalten nach Wiedereinschalten des Stromes",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "not return to previous state",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "return to previous state",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "definiert das Schaltverhaltens des Relais 1 bei Allgemeinem Alarm",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Flood Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Smoke Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Temperature Alarm Set - Relay 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivated, devices does not react to alarms",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable on Alarm - will switch off in case of alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable on Alarm - will switch on in case of alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Flashing on Alarm - will switch on and off periodically for 10 minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "Active flashing alarm time",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "time",
						Unit: "ms",
					},
				},
			},
		},
	}
}
func New010f05010101() *Device{
	return &Device{
		Brand: "FGBS",
		Product: "FGBS",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0501",
		ProductID: "0101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Input 1 Alarm Delay",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32000,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Input 2 Alarm Delay",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32000,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Type of Input 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "INPUT_NO (Normal Open)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "INPUT_NC (Normal Close)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "INPUT_MONOSTABLE (Monostabil)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "INPUT_BISTABLE (bistabil)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Type of Input 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "INPUT_NO (Normal Open)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "INPUT_NC (Normal Close)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "INPUT_MONOSTABLE (Monostabil)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "INPUT_BISTABLE (bistabil)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Type of control frame activated via IN input 1\n",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ALARM GENERIC frame",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM SMOKE frame",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM CO frame",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM CO2 frame",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "ALARM HEAT frame",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "ALARM WATER frame",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Control frame BASIC_SET",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Type of control frame activated via IN input 2\n",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ALARM GENERIC frame",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM SMOKE frame",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM CO frame",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM CO2 frame",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "ALARM HEAT frame",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "ALARM WATER frame",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Control frame BASIC_SET",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "\nValue of the parameter specifying the forced level of dimming/opening roller blinds from Input 1\n",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Dimming level",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Turn On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "\nValue of the parameter specifying the forced level of dimming/opening roller blinds from Input 2\n",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Dimming level",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Turn On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "\nDeactivating transmission of the alarm cancelling frame or the control frame deactivating the device (Basic)\n",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "information is sent to group 1 and 2",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "information is not sent for group 2 but sent for group 1",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "information is not sent for group 1 but sent for group 2",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "information is not sent",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Trigger level to send out temperature report",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "1/16 Kelvin",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "\nSending an alarm or control frame (for IN input, depending on parameter no.5 value), and TMP button alarm frame\n",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "IN1 and IN2 Broadcast mode inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nIN1 broadcast mode active, IN2 broadcast mode inactive\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nIN1 broadcast mode inactive, IN2 broadcast mode active\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "IN1 and IN2 broadcast mode active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Scene activation functionality",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "functionality deactivated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "functionality activated",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Interval between Readings of all temperature sensors",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f05010102() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "Univeral Binary Sensor FGBS-001",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0501",
		ProductID: "0102",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Input I alarm cancellation delay",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Input II alarm cancellation delay",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Type of input no. 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "INPUT_NO (Normal Open)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "INPUT_NC (Normal Close)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "INPUT_MONOSTABLE",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "INPUT_BISTABLE",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Type of input no. 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "INPUT_NO (Normal Open)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "INPUT_NC (Normal Close)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "INPUT_MONOSTABLE",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "INPUT_BISTABLE",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Type of transmitted control frame for association group 1, activated via input IN1.",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Frame ALARM GENERIC",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Frame ALARM SMOKE",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Frame ALARM CO",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Frame ALARM CO2",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Frame ALARM HEAT",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Frame ALARM WATER",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Control frame BASIC_SET",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Type of transmitted control frame for association group 2, activated via input IN2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Frame ALARM GENERIC",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Frame ALARM SMOKE",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Frame ALARM CO",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Frame ALARM CO2",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Frame ALARM HEAT",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Frame ALARM WATER",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Control frame BASIC_SET",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Value of the parameter specifying the forced level of dimming / opening sun blinds when comes “switch on” / ”open” command to devices from association group no. 1.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Dimming level",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Turn On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Value of the parameter specifying the forced level of dimming / opening sun blinds when comes “switch on” / ”open” command to devices from association group no. 2.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Dimming level",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Turn On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Deactivating transmission of the frame cancelling the alarm or the control frame deactivating the device (Basic)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "in the case of association group no. 1 and 2 the information is sent",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "in the case of association group no. 1 the information is sent. In the case of association group no. 2 the information is not sent.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "in the case of association group no. 1 the information is not sent. In the case of association group no. 2 the information is sent.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Interval between successive readings of temperature from all sensors connected to the device",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Interval between forcing to send report concerning the temperature conditions",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Insensitiveness to temperature changes",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "oC",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Transmitting the alarm or control frame in “broadcast” mode (i.e. to all devices within range)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "IN1 and IN2 Broadcast inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "IN1 broadcast mode active, Sensor 2 broadcast mode inactive",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "IN1 broadcast mode inactive, Sensor 2 broadcast mode active",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "INI and IN2 broadcast mode active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Scene activation functionality",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Scene functionality Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Scene functionality On",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f06001000() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGWPE/F-101",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0600",
		ProductID: "1000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Always on function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function activated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "function inactive",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Remember device status after power failure",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Wall Plug does not memorize its state after a power failure.\nConnected device will be off after the power supply is\nreconnected.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Wall Plug memorizes its state after a power failure.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "Reaction to alarms",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 63,
						Desc: "Set the alarm reactions the wall plug is responding to.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "Wall Plug&#39;s response to alarm frames",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "turn on connected device. LED ring signals an alarm through\ndefined time period (parameter 39) or untill the alarm is\ncancelled",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "turn off connected device. LED ring signals an alarm through\ndefined time period (parameter 39) or untill the alarm is\ncancelled",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "cyclically change device state, each 1second. In alarm mode\nWall Plug does not report status change, power changes,\nignores alarm frames. After the defined time period has passed\n(parameter 39) or after the alarm cancellation, connected\ndevice is set to the previous state",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "Alarm duration",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "Define the alarm duration.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Immediate power report",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a percentage by which a report is sent to the controller.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Standard power load reporting",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Define a value.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Power reporting frequency",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 254,
						Desc: "Define the frequency of reports.",
						Unit: "sec",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Reports will be sent only as a result of parameter 47\nsettings or in case of polling.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "Reporting changes in energy consumed by controlled devices",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 254,
						Desc: "Define a value.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Changes in consumed energy will not be reported.\nReports will be sent only in case of polling.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 47,
				Name: "Time period between reports on power load and energy consumption",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65534,
						Desc: "Define a time period.",
						Unit: "sec",
					},
					Value{
						From: 65535,
						To: 65535,
						Desc: "No periodic reports. Reports will be sent only in\ncase of power load / energy consumption changes (parameters 40,\n42, 43,45) or in case of polling.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 49,
				Name: "Metering energy consumed by the Wall Plug itself",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "function activated",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "DOWN value",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 25000,
						Desc: "Define a lower treshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 51,
				Name: "UP value",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 25000,
						Desc: "Define an upper treshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "Action in case of exceeding defined power values (parameters 50 and 51)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Turn the associated devices on, once the power drops below\nDOWN value (parameter 50).",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Turn the associated devices off, once the power drops below\nDOWN value (parameter 50).",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Turn the associated devices on, once the power rises above UP\nvalue (parameter 51).",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Turn the associated devices off, once the power rises above UP\nvalue (parameter 51).",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "1 and 4 combined. Turn the associated devices on, once the\npower drops below DOWN value (parameter 50). Turn the\nassociated devices off, once the power rises above UP value\n(parameter 51).",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "2 and 3 combined. Turn the associated devices off, once the\npower drops below DOWN value (parameter 50). Turn the\nassociated devices on, once the power rises above UP value\n(parameter 51).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 60,
				Name: "Power load, which when exceeded, makes the LED ring flash violet",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1000,
						To: 32000,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 61,
				Name: "LED ring illumination colour when controlled device is on.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED ring illumination colour changes in predefined steps,\ndepending on power consumption changes.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED ring illumination colour changes continuously, using full\nspectrum of available colorus, depending on power consumption\nchanges.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "White illumination",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Red illumination",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Green illumination",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Blue illumination",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Yellow illumination",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Cyan (Greenish blue) illumination",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Magenta (Purplish red) illumination",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "illumination turned off completely",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 62,
				Name: "LED ring illumination color when controlled device is off.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED ring is illuminated with a color corresponding to the last\nmeasured power, before the controlled device was turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "White illumination",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Red illumination",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Green illumination",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Blue illumination",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Yellow illumination",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Cyan (Greenish blue) illumination",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Magenta (Purplish red) illumination",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "illumination turned off completely",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 63,
				Name: "LED ring illumination colour at the Z-Wave network alarm detection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No change in colour. LED ring illumination colour determined by\nparameters 61 or 62 settings.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED ring flashes red / blue / white (default).",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "White illumination",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Red illumination",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Green illumination",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Blue illumination",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Yellow illumination",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Cyan (Greenish blue) illumination",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Magenta (Purplish red) illumination",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Illumination turned off completely.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 70,
				Name: "Overload safety switch",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 10,
						To: 65535,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f06020700() *Device{
	return &Device{
		Brand: "Fibar Group S. A.",
		Product: "FIBARO Wall Plug",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0602",
		ProductID: "0700",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008e,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0025,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Always On function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "function activated",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Remember device status after a power failure",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "device remains switched off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "device restores the state from before the\npower failure",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Overload safety switch",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function inactive",
						Unit: "",
					},
					Value{
						From: 10,
						To: 30000,
						Desc: "(1.0-3000.0W, step 0.1W) - Define a power\nthreshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "High priority power report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "power change in percent",
						Unit: "%",
					},
					Value{
						From: 100,
						To: 100,
						Desc: "reports are disabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Standard power report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "power change in percent",
						Unit: "",
					},
					Value{
						From: 100,
						To: 100,
						Desc: "reports are disabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Power reporting interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 5,
						To: 600,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Energy reporting threshold",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "energy reports inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 500,
						Desc: "(0.01-5kWh, step 0.01kWh) - Define a threshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Power and energy periodic reports",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "periodic reports inactive",
						Unit: "",
					},
					Value{
						From: 5,
						To: 32400,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Measuring energy consumed by the Wall Plug itself",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "function activated",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Control of „On/Off (Button)” association group (2) devices",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "control as the Wall Plug",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "control opposite to the Wall Plug",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "DOWN value - „On/Off (Power)” association group (3)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 24900,
						Desc: "(0.0-2490.0W, step 0.1W) Define a treshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "UP value - „On/Off (Power)” association group (3)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 100,
						To: 25000,
						Desc: "(10.0-2500.0W, step 0.1W) Define a treshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "The response after exceeding defined power values",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "turn the associated devices ON, once the\npower drops below DOWN value (parameter 21)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "turn the associated devices OFF, once the\npower drops below DOWN value (parameter 21)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "turn the associated devices ON, once the\npower rises above UP value (parameter 22)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "turn the associated devices OFF, once the\npower rises above UP value (parameter 22)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "combination of 1 and 4.\nTurn the associated devices ON, once the power\ndrops below DOWN value (parameter 21).\nTurn the associated devices OFF, once the power\nrises above UP value (parameter 22).",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "combination of 2 and 3.\nTurn the associated devices OFF, once the power\ndrops below DOWN value (parameter 21).\nTurn the associated devices ON, once the power\nrises above UP value (parameter 22).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "SWITCH ON value - „On/Off” association groups",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "OFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define a value, for example a dimming device.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ON",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Active alarms",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 63,
						Desc: "Choose the desired alarms.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Response to alarm frames",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no reaction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "turn connected device on",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "turn connected device off",
						Unit: "",
					},
					Value{
						From: 5,
						To: 50,
						Desc: "(0.5-5.0s, step 0.1s) - cyclically change\ndevice state with set period",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Alarm state duration",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32400,
						Desc: "Set a duration for alarm state.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Power load for violet colour",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1000,
						To: 30000,
						Desc: "(100.0-3000.0W, step 0.1W) Define a power value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "LED ring colour when controlled device is on",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "illumination turned off completely",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "colour changes continuously depending on\nactive power",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "colour changes in steps depending on active\npower",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "white",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "red",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "green",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "blue",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "yellow",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "cyan",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "magenta",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "LED ring illumination colour when controlled device is off",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "illumination turned off completely",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED ring is illuminated with a colour corresponding\nto the last measured power, before\nthe controlled device was turned off",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "white",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "red",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "green",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "blue",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "yellow",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "cyan",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "magenta",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "LED ring illumination colour at the Z-Wave network alarm detection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "illumination turned off completely",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "no change in colour. LED ring colour is determined\nby settings of parameters 41 or 42",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "LED ring flashes red/blue/white",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "white",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "red",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "green",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "blue",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "yellow",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "cyan",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "magenta",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "Associations in Z-Wave network security mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "none of the groups sent as secure",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "2nd group sent as secure",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "3rd group sent as secure",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "2nd and 3rd group sent as secure",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f07001000() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGK Door/Window Sensor 2.5",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0700",
		ProductID: "1000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x009c,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0031,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Input IN alarm cancellation delay.",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "Define the additional time delay, if the violation has ceased.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Status change signalled by LED.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED turned off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED turned ON",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Type of IN input.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "INPUT_NC (Normal Close)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "INPUT_NO (Normal Open",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "INPUT_MONOSTABLE",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "INPUT_BISTABLE",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Type of control frame transmitted for association group 1, activated via IN input.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM SMOKE frame",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM CO frame",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM CO2 frame",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "ALARM HEAT frame",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "ALARM WATER frame",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Control frame BASIC_SET",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Forced level of dimming/opening roller blinds ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "the parameter defines the level of dimming/opening associated devices.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Activate an associated device",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Deactivating Transmissions",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "For association group no. 1 information is sent",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "For association group no. 1 information is not sent.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Tamper alarm.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Tamper alarm cancellation inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Tamper alarm cancellation active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Sensitivity to temperature changes",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Define the parameter for the maximum accaeptable difference.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Broadcast Mode active/inactive",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "IN and TMP Broadcast mode inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "IN broadcast mode active, TMP broadcast mode inactive",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "IN broadcast mode inactive, TMP broadcast mode active",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "IN and TMP broadcast mode active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Scene activation functionality.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "functionality deactivated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "functionality activated",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "READ ONLY Parameter - can not set values",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DS18B20 is working properly",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "DS18B20 is not working properly",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "No DS18B20 temperature sensor",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f07011001() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGK-10x",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0701",
		ProductID: "1001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008e,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x009c,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x008b,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Operation Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Door/Window Sensor or external alarm sensor (type - see par. 20)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "External switch",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "DOOR/WINDOW/ALARM",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Door/window closed",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Door/window opened",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "LED INDICATIONS",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "0 - no indications\n1 - indication of opening/closing status change (input IN)\n2 - indication of wake up (1 x click or using time interval)\n4 - indication of device tampering",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Z-WAVE RANGE TEST AFTER DOUBLE TMP CLICK",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "EVENTS TRIGGERING 2ND ASSOCIATION GROUP",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "opening and closing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "opening",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "closing",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "COMMANDS SENT TO 2ND ASSOCIATION GROUP",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ON",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "OFF",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ON and OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "ON COMMAND FRAME",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Device is turned OFF.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Device is turned ON.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define a value for an associated Dimmer or Roller Shutter.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "OFF COMMAND FRAME",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Device is turned OFF.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Device is turned ON.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define a value for an associated Dimmer or Roller Shutter.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "ON COMMAND FRAME TIME DELAY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32400,
						Desc: "Define the time delay.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "OFF COMMAND FRAME TIME DELAY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32400,
						Desc: "Define a time delay.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "TYPE OF SENSOR CONNECTED TO IN INPUT",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Door/Window Sensor",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Smoke Sensor (Smoke Alarm)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "CO detector (CO Alarm)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "CO2 detector (CO2 Alarm)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Flood sensor (Water Alarm)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "TAMPER ALARM CANCELLATION DELAY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32400,
						Desc: "Define a time period to cancel the alarm.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "TAMPER ALARM CANCELLATION REPORTS",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Do not send tamper cancellation report",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send tamper cancellation report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "INTERVAL OF TEMPERATURE MEASURING",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 5,
						To: 32400,
						Desc: "Define a time period to measure the temperature.",
						Unit: "sec",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "temperature measurements disabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 51,
				Name: "TEMPERATURE REPORT THRESHOLD",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "temperature reports based on threshold disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 300,
						Desc: "Define a treshold.",
						Unit: "°C",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "TEMPERATURE REPORTS INTERVAL",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "temperature reports disabled",
						Unit: "",
					},
					Value{
						From: 5,
						To: 32400,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 53,
				Name: "TEMPERATURE OFFSET",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 64536,
						To: 1000,
						Desc: "Define a value for temperature compensation.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 54,
				Name: "TEMPERATURE ALARM REPORTS",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Temperature alarms disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "High temperature alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Low temperature alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Temperature alarms enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 55,
				Name: "HIGH TEMPERATURE ALARM THRESHOLD",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1000,
						Desc: "Define a treshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 56,
				Name: "LOW TEMPERATURE ALARM THRESHOLD",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 65236,
						To: 700,
						Desc: "Define a treshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 70,
				Name: "SCENE ACTIVATION FUNCTIONALITY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 3903,
						Desc: "Select a parameter value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 71,
				Name: "ALARM BROADCAST",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "0 - broadcasts inactive\n1 - ON/OFF commands broadcast active\n2 - sensor alarm broadcast active\n4 - tamper alarm broadcast active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 72,
				Name: "ASSOCIATIONS IN Z-WAVE NETWORK SECURITY MODE",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 15,
						Desc: "0 - none of the groups sent as secure\n1 - 2nd group ”Control” sent as secure\n2 - 3rd group ”Alarm” sent as secure\n4 - 4th group “Sensor ZW3” sent as secure\n8 - 5th group “Tamper ZW3” sent as secure",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f07012001() *Device{
	return &Device{
		Brand: "Fibar Group S. A.",
		Product: "FIBARO Door/Window Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0701",
		ProductID: "2001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008e,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x009c,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x008b,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Operation mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Door/Window Sensor or external alarm sensor",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "external button",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Door/Window or alarm status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "door/window closed",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "door/window opened",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Visual LED indications",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no indications",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "indication of opening/closing status change\n(input IN)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "indication of wake up (1 x click or periodical)",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "indication of device tampering",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Range test after double click",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "2nd association group triggers",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "switch after opening and closing",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "switch after opening",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "switch after closing",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Commands sent to 2nd association group",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ON ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "OFF",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ON &amp; OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Value of ON command frame sent to 2nd association group",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Device is turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define a value.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Device is turned on.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Value of OFF command frame sent to 2nd association group",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Device is turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define a value.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Device is turned on.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Time delay of ON command frame",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32400,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Time delay of OFF command frame",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32400,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Type of sent alarm frames",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Door/Window Sensor (General Purpose Alarm)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "smoke sensor (Smoke Alarm)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "CO detector (CO Alarm)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "CO2 detector (CO2 Alarm)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "high temperature sensor (Heat Alarm)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "flood sensor (Water Alarm)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Delay of tamper alarm cancellation",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32400,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Reporting tamper alarm cancellation",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "do not send tamper cancellation report",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "send tamper cancellation report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "Interval of temperature measurements",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "temperature measurements disabled",
						Unit: "",
					},
					Value{
						From: 5,
						To: 32400,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 51,
				Name: "Temperature reports threshold",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "temperature reports based on threshold disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 300,
						Desc: "temperature threshold (0.1-30°C, 0.1°C step)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "Interval of temperature reports",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "periodic temperature reports disabled",
						Unit: "",
					},
					Value{
						From: 5,
						To: 32400,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 53,
				Name: "Temperature offset",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 4294966296,
						To: 1000,
						Desc: "Define a value for temperature compensation.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 54,
				Name: "Temperature alarm reports",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "temperature alarms disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "high temperature alarm",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "low temperature alarm",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "high and low temperature alarms enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 55,
				Name: "High temperature alarm threshold",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1000,
						Desc: "Define an upper treshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 56,
				Name: "Low temperature alarm threshold",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 65236,
						To: 700,
						Desc: "Define a lower treshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 70,
				Name: "Scene activation functionality",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 3903,
						Desc: "Sum up the scenes that are to be activated  and enter the specific value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 71,
				Name: "Alarm broadcast",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "Define a value depending on which alarms should be broadcasted.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 72,
				Name: "Associations in Z-Wave network Security Mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 15,
						Desc: "Define a value depending on the desired security mode. Sum up the values of the different groups.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f08001001() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "Motion Sensor (Multi-Sensor)",
		Description: "\n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0800",
		ProductID: "1001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x007a,
			},
			&CommandClass{
				ID: 0x009c,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "MOTION SENSOR’S SENSITIVITY",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 137,
						To: 127,
						Desc: "",
						Unit: "1",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "MOTION SENSOR’S BLIND TIME (INSENSITIVITY)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 15,
						Desc: "default 15 (= 8sec); The time of insensitivity should be shorter\nthat the time period set in parameter 6.",
						Unit: "time [s] = 0.5 x (value &#43; 1)",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "PIR sensor’s “PULSE COUNTER”",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 3,
						Desc: "default 1 (= 2 pulses)",
						Unit: "pulses = (value &#43; 1)",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "PIR sensor’s “WINDOW TIME”",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 3,
						Desc: "default 2 (= 12sec)",
						Unit: "time [s] = 4 x (value &#43; 1)",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "MOTION ALARM CANCELLATION DELAY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32769,
						To: 32767,
						Desc: "default 30 (=30sec)",
						Unit: "1s",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "PIR SENSOR OPERATING MODE",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "PIR sensor always active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "PIR sensor active during the day only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "PIR sensor active during the night only",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "NIGHT / DAY (light intensity)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32769,
						To: 32767,
						Desc: "default 200 (200 lux)",
						Unit: "1lux",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "BASIC COMMAND CLASS FRAMES CONFIGURATION",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "BASIC ON and BASIC OFF command frames sent in Basic\nCommand Class.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "only the BASIC ON command frame sent in Basic Command\nClass.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "BASIC ON command frame value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "ON",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "OFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "BASIC OFF command frame value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "ON",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "OFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "TAMPER SENSITIVITY",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 122,
						Desc: "default 15 (= 0.224g)",
						Unit: "(0.08 - 2g; x 0.016g; 0 = tamper inactive)",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "TAMPER ALARM CANCELLATION DELAY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32769,
						To: 32767,
						Desc: "default 30sec",
						Unit: "1s",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "TAMPER OPERATING MODES",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Tamper alarm is reported in Sensor Alarm command class / Cancellation is not reported.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Tamper alarm is reported in Sensor Alarm command class / Cancellation is reported in Sensor Alarm commad class after the time period set in parameter 22 (Tamper Alarm Cancellation Delay)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Tamper alarm is reported in Sensor Alarm command class /\nCancellation is not reported.\nSensor’s orientation in space is reported in Fibar Commad Class after the time period set in paramer 22.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Tamper alarm is reported in Sensor Alarm command class /\nCancellation is reported in Sensor Alarm commad class after the time period set in parameter 22. Sensor’s orientation in space is\nreported in Fibar Commad Class after the time period set in paramer 22.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "The maximum level of vibrations recorded in the time period set in parameter 22 is reported. Reports stop being sent when the vibrations cease. The reports are sent in Sensor Alarm command class. Value displayed in the “value” field (0 - 100) depends on the\nvibrations force. Reports to the association groups are sent using Sensor Alarm command class.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "TAMPER ALARM BROADCAST MODE",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Tamper alarm is not sent in broadcast mode.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Tamper alarm sent in broadcast mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "ILLUMINATION REPORT THRESHOLD",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32769,
						To: 32767,
						Desc: "values 1 - 65535 lux; 0 = reports are not sent; default 200 lux",
						Unit: "1lux",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "ILLUMINATION REPORTS INTERVAL",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32769,
						To: 32767,
						Desc: "value 1 - 65535; 0 = no reports are sent",
						Unit: "1s",
					},
				},
			},
			&parameter{
				ID: 60,
				Name: "TEMPERATURE REPORT THRESHOLD",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 129,
						To: 127,
						Desc: "(0.1 - 25.5°C; 0 = reports are not sent)",
						Unit: "0,1°C",
					},
				},
			},
			&parameter{
				ID: 62,
				Name: "INTERVAL OF TEMPERATURE MEASURING",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32769,
						To: 32767,
						Desc: "1 - 65535 seconds; 0 = temperature will not be measured",
						Unit: "1s",
					},
				},
			},
			&parameter{
				ID: 64,
				Name: "TEMPERATURE REPORTS INTERVAL",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32769,
						To: 32767,
						Desc: "1 - 65535 sec; 0 = reports are not\nsent",
						Unit: "1s",
					},
				},
			},
			&parameter{
				ID: 66,
				Name: "TEMPERATURE OFFSET",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32769,
						To: 32767,
						Desc: "0 - 100 (0 to 100°C);\nor 64536 - 65535 (-100 to \n-0.10°C)",
						Unit: "1°C",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "LED SIGNALING MODE",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED inactive.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED colour depends on the temperature. Set by parameters 86 and 87.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Flashlight mode - LED glows in white for 10 seconds.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "White.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Red",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Blue",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Yellow",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Cyan",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Magenta",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "LED colour depends on the temperature. Set by parameters\n86 and 87.",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "Flashlight mode - LED glows in white through 10 seconds.",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "White",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "Red",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "Blue",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "Yellow",
						Unit: "",
					},
					Value{
						From: 17,
						To: 17,
						Desc: "Cyan",
						Unit: "",
					},
					Value{
						From: 18,
						To: 18,
						Desc: "Magenta",
						Unit: "",
					},
					Value{
						From: 19,
						To: 19,
						Desc: "LED colour depends on the temperature. Set by parameters\n86 and 87.",
						Unit: "",
					},
					Value{
						From: 20,
						To: 20,
						Desc: "White",
						Unit: "",
					},
					Value{
						From: 21,
						To: 21,
						Desc: "Red",
						Unit: "",
					},
					Value{
						From: 22,
						To: 22,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 23,
						To: 23,
						Desc: "Blue",
						Unit: "",
					},
					Value{
						From: 24,
						To: 24,
						Desc: "Yellow",
						Unit: "",
					},
					Value{
						From: 25,
						To: 25,
						Desc: "Cyan",
						Unit: "",
					},
					Value{
						From: 26,
						To: 26,
						Desc: "Magenta",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 81,
				Name: "LED BRIGHTNESS",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "1 - 100%; 0 = brightness determined by the ambient lighting - see parameters 82 and 83",
						Unit: "1%",
					},
				},
			},
			&parameter{
				ID: 82,
				Name: "LOW AMBIENT ILLUMINATION LEVEL",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "0 to value of parameter 83",
						Unit: "1lux",
					},
				},
			},
			&parameter{
				ID: 83,
				Name: "upper AMBIENT ILLUMINATION LEVEL",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "value of parameter 82 to 65535",
						Unit: "1lux",
					},
				},
			},
			&parameter{
				ID: 86,
				Name: "MINIMUM TEMPERATURE for Blue Light",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "0 to value of parameter 87",
						Unit: "1°C",
					},
				},
			},
			&parameter{
				ID: 87,
				Name: "MAXIMUM TEMPERATURE for Red Light",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "value of parameter 86 to 255",
						Unit: "1°C",
					},
				},
			},
			&parameter{
				ID: 89,
				Name: "LED INDICATING TAMPER ALARM",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED does not indicate tamper alarm.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED indicates tamper alarm.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f08004001() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "Motion Sensor",
		Description: "\n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0800",
		ProductID: "4001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x007a,
			},
			&CommandClass{
				ID: 0x009c,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "MOTION SENSOR’S SENSITIVITY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 8,
						To: 255,
						Desc: "Adjust the sensitivity.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "MOTION SENSOR’S BLIND TIME (INSENSITIVITY)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 15,
						Desc: "default 15 (= 8sec); The time of insensitivity should be shorter\nthat the time period set in parameter 6.\nFormula to calculate the time: time [s] = 0.5 x (value &#43; 1)\nAvailable settings: 0 - 15 (0,5 - 8 seconds)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "PIR sensor’s “PULSE COUNTER”",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 3,
						Desc: "default 1 (= 2 pulses)",
						Unit: "pulses = (value &#43; 1)",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "PIR sensor’s “WINDOW TIME”",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 3,
						Desc: "Define a time interval.\nFormula to calculate the time: time [s] = 4 x (value &#43; 1)\nDefault setting: 2 (12 seconds)\n\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "MOTION ALARM CANCELLATION DELAY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "default 30 (=30sec), Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "PIR SENSOR OPERATING MODE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "PIR sensor always active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "PIR sensor active during the day only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "PIR sensor active during the night only",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "NIGHT / DAY (light intensity)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "default 200 (200 lux), Dafine a value for light intensity.",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "BASIC COMMAND CLASS FRAMES CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "BASIC ON and BASIC OFF command frames sent in Basic\nCommand Class.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "only the BASIC ON command frame sent in Basic Command\nClass.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "BASIC ON command frame value",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "ON",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "OFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "BASIC OFF command frame value",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "ON",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "OFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "TAMPER SENSITIVITY",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 121,
						Desc: "Define a treshold. Available settigs: 0 - 121 (0,08 - 2g; multiply by 0,016g;\n0 = tamper inactive)\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "TAMPER ALARM CANCELLATION DELAY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "default: 30sec, Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "TAMPER OPERATING MODES",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Tamper alarm is reported in Sensor Alarm command class / Cancellation is not reported.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Tamper alarm is reported in Sensor Alarm command class / Cancellation is reported in Sensor Alarm commad class after the time period set in parameter 22 (Tamper Alarm Cancellation Delay)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Tamper alarm is reported in Sensor Alarm command class /\nCancellation is not reported.\nSensor’s orientation in space is reported in Fibar Commad Class after the time period set in paramer 22.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Tamper alarm is reported in Sensor Alarm command class /\nCancellation is reported in Sensor Alarm commad class after the time period set in parameter 22. Sensor’s orientation in space is\nreported in Fibar Commad Class after the time period set in paramer 22.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "The maximum level of vibrations recorded in the time period set in parameter 22 is reported. Reports stop being sent when the vibrations cease. The reports are sent in Sensor Alarm command class. Value displayed in the “value” field (0 - 100) depends on the\nvibrations force. Reports to the association groups are sent using Sensor Alarm command class.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "TAMPER ALARM BROADCAST MODE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Tamper alarm is not sent in broadcast mode.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Tamper alarm sent in broadcast mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "ILLUMINATION REPORT THRESHOLD",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "Define a treshold. Available settings: 0 - 32767 (1-32767 lux; 0=reports are not sent)",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "ILLUMINATION REPORTS INTERVAL",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "Define a time interval. Available settings: 0 - 32767 (1-32767 seconds; 0 = no reports)",
						Unit: "1s",
					},
				},
			},
			&parameter{
				ID: 60,
				Name: "TEMPERATURE REPORT THRESHOLD",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Define a treshold. \n0 = reports are not sent",
						Unit: "x 0,1°C",
					},
				},
			},
			&parameter{
				ID: 62,
				Name: "INTERVAL OF TEMPERATURE MEASURING",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "Define a time interval. 0 = temperature will not be measured",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 64,
				Name: "TEMPERATURE REPORTS INTERVAL",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "Define a time interval. 0 = reports are not\nsent",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 66,
				Name: "TEMPERATURE OFFSET",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 64536,
						To: 1000,
						Desc: "Set a value for temperature compensation.\nAvailable settings: -1000 - 1000 (-100°C – 100°C)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "LED SIGNALING MODE",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED inactive.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED colour depends on the temperature. Set by parameters 86 and 87.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Flashlight mode - LED glows in white for 10 seconds.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "White.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Red",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Blue",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Yellow",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Cyan",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Magenta",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "LED colour depends on the temperature. Set by parameters\n86 and 87.",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "Flashlight mode - LED glows in white through 10 seconds.",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "White",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "Red",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "Blue",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "Yellow",
						Unit: "",
					},
					Value{
						From: 17,
						To: 17,
						Desc: "Cyan",
						Unit: "",
					},
					Value{
						From: 18,
						To: 18,
						Desc: "Magenta",
						Unit: "",
					},
					Value{
						From: 19,
						To: 19,
						Desc: "LED colour depends on the temperature. Set by parameters\n86 and 87.",
						Unit: "",
					},
					Value{
						From: 20,
						To: 20,
						Desc: "White",
						Unit: "",
					},
					Value{
						From: 21,
						To: 21,
						Desc: "Red",
						Unit: "",
					},
					Value{
						From: 22,
						To: 22,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 23,
						To: 23,
						Desc: "Blue",
						Unit: "",
					},
					Value{
						From: 24,
						To: 24,
						Desc: "Yellow",
						Unit: "",
					},
					Value{
						From: 25,
						To: 25,
						Desc: "Cyan",
						Unit: "",
					},
					Value{
						From: 26,
						To: 26,
						Desc: "Magenta",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 81,
				Name: "LED BRIGHTNESS",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a brightness level.\n 0 = brightness determined by the ambient lighting - see parameters 82 and 83",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 82,
				Name: "LOW AMBIENT ILLUMINATION LEVEL",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32766,
						Desc: "Available settings: 0 to parameter 83 value (0-32766 lux)",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 83,
				Name: "upper AMBIENT ILLUMINATION LEVEL",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Available settings: parameter 82 value to 32767 (1-32767 lux)",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 86,
				Name: "MINIMUM TEMPERATURE for Blue Light",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "0 to value of parameter 87",
						Unit: "°C",
					},
				},
			},
			&parameter{
				ID: 87,
				Name: "MAXIMUM TEMPERATURE for Red Light",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "value of parameter 86 to 255",
						Unit: "°C",
					},
				},
			},
			&parameter{
				ID: 89,
				Name: "LED INDICATING TAMPER ALARM",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED does not indicate tamper alarm.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED indicates tamper alarm.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f08011001() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGMS-001",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0801",
		ProductID: "1001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "8",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x008f,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0056,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008e,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x009c,
				Secure: true,
				NonSecure: false,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "SENSITIVITY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 8,
						To: 255,
						Desc: "Define the sensor&#39;s sensitivity.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "BLIND TIME (INSENSITIVITY)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 15,
						Desc: "Available settings: 0 - 15 (0,5 - 8 seconds)\nDefine blind time.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "PULSE COUNTER",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 3,
						Desc: "Define amount of pulses.\nFormula to calculate the number of pulses: pulses = (value &#43; 1)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "WINDOW TIME",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 3,
						Desc: "Set window time.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "MOTION ALARM CANCELLATION DELAY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Set parameter for cancellation delay.",
						Unit: "sec.",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "PIR SENSOR OPERATING MODE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "PIR sensor always active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "PIR sensor active during the day only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "PIR sensor active during the night only",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "NIGHT / DAY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Set the parameter for light intensity.",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "BASIC COMMAND CLASS FRAMES CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "BASIC ON and OFF command frames sent in Basic Command\nClass.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Only the BASIC ON command frame sent in Basic Command\nClass.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Only the BASIC OFF command frame sent in Basic Command\nClass.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "BASIC ON command frame value",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Choose value for BASIC ON command frame.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "BASIC OFF command frame value",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Choose value for BASIC OFF command frame.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "TAMPER SENSITIVITY",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 121,
						Desc: "Define tamper sensitivity.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "TAMPER ALARM CANCELLATION DELAY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Choose the time period.",
						Unit: "sec.",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "TAMPER OPERATING MODES",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "only tamper",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Tamper and earthquake detector. Function may be used as a\nsimple seismograph. Two reports including the strength of shock are\nalways sent. First, right after the detection and second (value=0)\nafter tamper alarm cancellation delay time.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Tamper and orientation in space. Three reports are sent right\nafter tamper alarm cancellation delay time.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "TAMPER CANCELLATION REPORTS",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Do not send tamper cancellation report.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send tamper cancellation report.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 28,
				Name: "TAMPER ALARM BROADCAST MODE - 3rd Group",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Tamper alarm reported to association groups.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Tamper alarm reported in broadcast mode to 3rd association\ngroup.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 29,
				Name: "TAMPER ALARM BROADCAST MODE - 5th Group",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Tamper alarm reported to association groups.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Tamper alarm reported in broadcast mode to 5th association\ngroup.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "ILLUMINATION REPORT THRESHOLD",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "Define the light intensity level.\n0=no reports",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "ILLUMINATION REPORTS INTERVAL",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "Define the time interval.\n0=no reports",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 60,
				Name: "TEMPERATURE REPORT THRESHOLD",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Define change in level of temperature.\nAvailable settings: 0 - 255 (0,1-25,5°C,; 0 = reports are not sent)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 62,
				Name: "INTERVAL OF TEMPERATURE MEASURING",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "Define the interval of consecutive measurements.\n0 = temperature\nwill not be measured",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 64,
				Name: "TEMPERATURE REPORTS INTERVAL",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "Define the time interval for reports that will be sent.\n0 = no reports",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 66,
				Name: "TEMPERATURE OFFSET",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 64536,
						To: 1000,
						Desc: "Define the value of added temperature.\nAvailable settings: -1000 - 1000 (-100°C – 100°C)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "LED SIGNALING MODE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED inactive.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED colour depends on the temperature. Set by parameters\n86 and 87.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Flashlight mode - LED glows in white for 10 seconds.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "White",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Red",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Blue",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Yellow",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Cyan",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Magenta",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "LED colour depends on the temperature. Set by parameters\n86 and 87.",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "Flashlight mode - LED glows in white through 10 sec. Each\nnext detected motion extends the glowing by next 10 seconds.",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "White\n",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "Red",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "Blue",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "Yellow",
						Unit: "",
					},
					Value{
						From: 17,
						To: 17,
						Desc: "Cyan",
						Unit: "",
					},
					Value{
						From: 18,
						To: 18,
						Desc: "Magenta",
						Unit: "",
					},
					Value{
						From: 19,
						To: 19,
						Desc: "LED colour depends on the temperature. Set by parameters\n86 and 87.",
						Unit: "",
					},
					Value{
						From: 20,
						To: 20,
						Desc: "White",
						Unit: "",
					},
					Value{
						From: 21,
						To: 21,
						Desc: "Red",
						Unit: "",
					},
					Value{
						From: 22,
						To: 22,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 23,
						To: 23,
						Desc: "Blue",
						Unit: "",
					},
					Value{
						From: 24,
						To: 24,
						Desc: "Yellow",
						Unit: "",
					},
					Value{
						From: 25,
						To: 25,
						Desc: "Cyan",
						Unit: "",
					},
					Value{
						From: 26,
						To: 26,
						Desc: "Magenta",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 81,
				Name: "LED BRIGHTNESS",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define the level of brightness.\nAvailable settings: 0 - 100 (1 - 100%; 0 = brightness determined by\nthe ambient lighting - see parameters 82 and 83)",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 82,
				Name: "AMBIENT ILLUMINATION LEVEL BELOW WHICH LED BRIGHTNESS IS SET TO 1%",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "Define the parameter.\nAvailable settings: 0 to parameter 83 value (0-32766 lux)",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 83,
				Name: "AMBIENT ILLUMINATION LEVEL ABOVE WHICH LED BRIGHTNESS IS SET TO 100%",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define the parameter.\nAvailable settings: parameter 82 value to 32767 (1-32767 lux)",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 86,
				Name: "MINIMUM TEMPERATURE RESULTING IN BLUE LED ILLUMINATION",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Define the minimum temperature.\nAvailable settings: 0 to parameter 87 value (0-255°C)",
						Unit: "°C",
					},
				},
			},
			&parameter{
				ID: 87,
				Name: "MAXIMUM TEMPERATURE RESULTING IN RED LED ILLUMINATION",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Define the maximum temperature.\nAvailable settings: parameter 86 value to 255 (0-255°C)",
						Unit: "°C",
					},
				},
			},
			&parameter{
				ID: 89,
				Name: "LED INDICATING TAMPER ALARM",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED does not indicate tamper alarm.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED indicates tamper alarm.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f08012001() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGMS-001",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0801",
		ProductID: "2001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0056,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "8",
			},
			&CommandClass{
				ID: 0x008e,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x009c,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "SENSITIVITY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 8,
						To: 255,
						Desc: "Define the sensor&#39;s sensitivity.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "BLIND TIME (INSENSITIVITY)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 15,
						Desc: "\nAvailable settings: 0 - 15 (0,5 - 8 seconds) Define blind time.\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "PULSE COUNTER",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 3,
						Desc: "\nDefine amount of pulses. Formula to calculate the number of pulses: pulses = (value &#43; 1)\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "WINDOW TIME",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 3,
						Desc: "Set window time.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "MOTION ALARM CANCELLATION DELAY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Set parameter for cancellation delay.",
						Unit: "sec.",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "PIR SENSOR OPERATING MODE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "PIR sensor always active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "PIR sensor active during the day only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "PIR sensor active during the night only",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "NIGHT / DAY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Set the parameter for light intensity.",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "BASIC COMMAND CLASS FRAMES CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nBASIC ON and OFF command frames sent in Basic Command Class.\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nOnly the BASIC ON command frame sent in Basic Command Class.\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nOnly the BASIC OFF command frame sent in Basic Command Class.\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "BASIC ON command frame value",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Choose value for BASIC ON command frame.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "BASIC OFF command frame value",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Choose value for BASIC OFF command frame.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "TAMPER SENSITIVITY",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 121,
						Desc: "Define tamper sensitivity.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "TAMPER ALARM CANCELLATION DELAY",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Choose the time period.",
						Unit: "sec.",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "TAMPER OPERATING MODES",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "only tamper",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nTamper and earthquake detector. Function may be used as a simple seismograph. Two reports including the strength of shock are always sent. First, right after the detection and second (value=0) after tamper alarm cancellation delay time.\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nTamper and orientation in space. Three reports are sent right after tamper alarm cancellation delay time.\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "TAMPER CANCELLATION REPORTS",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Do not send tamper cancellation report.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Send tamper cancellation report.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 28,
				Name: "TAMPER ALARM BROADCAST MODE - 3rd Group",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Tamper alarm reported to association groups.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nTamper alarm reported in broadcast mode to 3rd association group.\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 29,
				Name: "TAMPER ALARM BROADCAST MODE - 5th Group",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Tamper alarm reported to association groups.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nTamper alarm reported in broadcast mode to 5th association group.\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "ILLUMINATION REPORT THRESHOLD",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "Define the light intensity level. 0=no reports",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "ILLUMINATION REPORTS INTERVAL",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "Define the time interval. 0=no reports",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 60,
				Name: "TEMPERATURE REPORT THRESHOLD",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "\nDefine change in level of temperature. Available settings: 0 - 255 (0,1-25,5°C,; 0 = reports are not sent)\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 62,
				Name: "INTERVAL OF TEMPERATURE MEASURING",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "\nDefine the interval of consecutive measurements. 0 = temperature will not be measured\n",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 64,
				Name: "TEMPERATURE REPORTS INTERVAL",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "\nDefine the time interval for reports that will be sent. 0 = no reports\n",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 66,
				Name: "TEMPERATURE OFFSET",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 64536,
						To: 1000,
						Desc: "\nDefine the value of added temperature. Available settings: -1000 - 1000 (-100°C – 100°C)\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "LED SIGNALING MODE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED inactive.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nLED colour depends on the temperature. Set by parameters 86 and 87.\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nFlashlight mode - LED glows in white for 10 seconds.\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "White",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Red",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Blue",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Yellow",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Cyan",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Magenta",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "\nLED colour depends on the temperature. Set by parameters 86 and 87.\n",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "\nFlashlight mode - LED glows in white through 10 sec. Each next detected motion extends the glowing by next 10 seconds.\n",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "White",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "Red",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "Blue",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "Yellow",
						Unit: "",
					},
					Value{
						From: 17,
						To: 17,
						Desc: "Cyan",
						Unit: "",
					},
					Value{
						From: 18,
						To: 18,
						Desc: "Magenta",
						Unit: "",
					},
					Value{
						From: 19,
						To: 19,
						Desc: "\nLED colour depends on the temperature. Set by parameters 86 and 87.\n",
						Unit: "",
					},
					Value{
						From: 20,
						To: 20,
						Desc: "White",
						Unit: "",
					},
					Value{
						From: 21,
						To: 21,
						Desc: "Red",
						Unit: "",
					},
					Value{
						From: 22,
						To: 22,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 23,
						To: 23,
						Desc: "Blue",
						Unit: "",
					},
					Value{
						From: 24,
						To: 24,
						Desc: "Yellow",
						Unit: "",
					},
					Value{
						From: 25,
						To: 25,
						Desc: "Cyan",
						Unit: "",
					},
					Value{
						From: 26,
						To: 26,
						Desc: "Magenta",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 81,
				Name: "LED BRIGHTNESS",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "\nDefine the level of brightness. Available settings: 0 - 100 (1 - 100%; 0 = brightness determined by the ambient lighting - see parameters 82 and 83)\n",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 82,
				Name: "\nAMBIENT ILLUMINATION LEVEL BELOW WHICH LED BRIGHTNESS IS SET TO 1%\n",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "\nDefine the parameter. Available settings: 0 to parameter 83 value (0-32766 lux)\n",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 83,
				Name: "\nAMBIENT ILLUMINATION LEVEL ABOVE WHICH LED BRIGHTNESS IS SET TO 100%\n",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "\nDefine the parameter. Available settings: parameter 82 value to 32767 (1-32767 lux)\n",
						Unit: "lux",
					},
				},
			},
			&parameter{
				ID: 86,
				Name: "\nMINIMUM TEMPERATURE RESULTING IN BLUE LED ILLUMINATION\n",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "\nDefine the minimum temperature. Available settings: 0 to parameter 87 value (0-255°C)\n",
						Unit: "°C",
					},
				},
			},
			&parameter{
				ID: 87,
				Name: "\nMAXIMUM TEMPERATURE RESULTING IN RED LED ILLUMINATION\n",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "\nDefine the maximum temperature. Available settings: parameter 86 value to 255 (0-255°C)\n",
						Unit: "°C",
					},
				},
			},
			&parameter{
				ID: 89,
				Name: "LED INDICATING TAMPER ALARM",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED does not indicate tamper alarm.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED indicates tamper alarm.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f09004000() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "RGBW Controller FGRGBWM-441",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0900",
		ProductID: "4000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "ALL ON / ALL OFF function activation",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ALL ON inactive ALL OFF inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALL ON inactive ALL OFF active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALL ON active ALL OFF inactive",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON active ALL OFF active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Associations command class choice",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Normal (Dimmer) - BASIC_SET/SWITCH_MULTILEVEL_START/STOP",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Normal (RGBW) - COLOR_CONTROL_SET/START/STOP_STATE_CHANGE",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Normal (RGBW) - COLOR_CONTROL_SET",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Brightness - BASIC_SET/SWITCH_MULTILEVEL_START/STOP",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Rainbow (RGBW) - COLOR_CONTROL_SET",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Outputs state change mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "MODE1 (related parameters: 9-step value, 10-time between steps)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "MODE2 (related parameters: 11-time to change value, relevant for  RGB/RGBW)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Step value (relevant for MODE1)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "step value",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Time between steps (relevant for MODE1)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 60000,
						Desc: "1 ms",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Time for changing from start to end value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "immediate change",
						Unit: "",
					},
					Value{
						From: 1,
						To: 63,
						Desc: "20-126 [ms] value*20ms",
						Unit: "",
					},
					Value{
						From: 65,
						To: 127,
						Desc: "1-63 [s] (value-64)*1s",
						Unit: "",
					},
					Value{
						From: 129,
						To: 191,
						Desc: "10-630 [s] (value-128)*10s",
						Unit: "",
					},
					Value{
						From: 193,
						To: 255,
						Desc: "1-63 [min] (value-192)*1min",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Maximum lighting level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Minimum lighting level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Inputs/Outputs configuration",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 65535,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Restore switch state after power cycle",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No, turn off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Alarm of any type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "INACTIVE - the device doesn&#39;t respond to alarm frames",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALARM ON - the device turns on once alarm is detected (all channels set to 99%)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALARM OFF - the device turns off once alarm is detected (all channels set to 0%)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ALARM PROGRAM - alarm sequence turns on (program  selected  in parameter 38)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 38,
				Name: "Alarm sequence program",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "Active PROGRAM alarm time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65534,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Command class reporting Outputs status change",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reporting as a result of inputs and controllers actions (SWITCH  MULTILEVEL)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Reporting as a result of inputs actions (SWITCH MULTILEVEL)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reporting as a result of inputs actions (COLOR CONTROL)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Reporting 0-10v analog inputs change threshold",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "0.1V",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Power load reporting frequency",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reports are not sent. Reports will only be sent in case of polling or at turning OFF the device.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65534,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "Reporting changes in energy consumed by controlled devices.",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "changes in consumed energy will not be reported. Reports will be sent only in case of polling.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 254,
						Desc: "0.01kWh",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 71,
				Name: "Response to BRIGHTNESS set to 0%",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "illumination colour set to white (all channels controlled together)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "last set colour is memorized",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 72,
				Name: "Starting animation programm",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "animation program number",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 73,
				Name: "Triple click action",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "NODE INFO control frame is sent",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "starting favourite program",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f0b001001() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGFS-101",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0b00",
		ProductID: "1001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x009c,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x007a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Alarm cancellation delay",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 2,
				Name: "Acoustic and visual signals On / Off in case of flooding",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 5,
				Name: "Type of alarm frame sent to 1-st association group (FLOOD)",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 7,
				Name: "Forced dimming level / roller blind opening level, when sending turn on / open command to 1-st association group devices",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 9,
				Name: "Alarm cancelling or turning a device off (Basic) command frame deactivation.",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 10,
				Name: "Temperature measurement interval",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 12,
				Name: "Temperature measurement hysteresis",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 13,
				Name: "Alarm BROADCAST",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 50,
				Name: "Low temperature alarm threshold",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 51,
				Name: "High temperature alarm threshold",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 61,
				Name: "Low temperature alarm indicator colour",
				Type: "range",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 62,
				Name: "High temperature alarm indicator colour",
				Type: "range",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 63,
				Name: "Managing a LED indicator under standard operation",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 73,
				Name: "Temperature measurement compensation",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 74,
				Name: "Alarm frame sent to 2-nd Association Group activation",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 75,
				Name: "Visual and audible alarms duration",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 76,
				Name: "Alarm frame / Basic Set frame retransmission time when retaining flood alarm",
				Type: "range",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 77,
				Name: "Flood sensor functionality turned off",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New010f0b004001() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "Flood Sensor FGFS-101",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0b00",
		ProductID: "4001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x009c,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Alarm cancellation delay",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 3600,
						Desc: "delay in seconds (each 1s);\n0 (no delay, immediate alarm cancelation)",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Acoustic and visual signals On / Off in case of flooding",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "acoustic and visual alarms inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "acoustic alarm inactive, visual alarm active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "acoustic alarm active, visual alarm inactive",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "acoustic and visual alarms active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Type of alarm frame sent to 1-st association group (FLOOD)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ALARM WATER command frame",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "BASIC SET command frame",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Forced dimming level sent to 1-st association group devices",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "1-99",
						Unit: "%",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "The last set level (255)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Alarm cancelling or turning a device off (Basic) command frame deactivation",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Alarm (flooding) cancellation inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Alarm (flooding) cancellation active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Temperature measurement interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Time interval in seconds",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Temperature measurement hysteresis",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 1000,
						Desc: "each 0,01°C;\n(default 50 = 0,5°C)",
						Unit: "°C",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Alarm BROADCAST",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "broadcasts inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "flood (1-st Association Group) broadcast active; tamper (2-nd Association\nGroup) broadcast inactive",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "flood broadcast inactive; tamper broadcast active",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "flood broadcast active; tamper broadcast active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "Low temperature alarm threshold",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 55536,
						To: 10000,
						Desc: "value 1500 (15,00°C)",
						Unit: "x0,01°C",
					},
				},
			},
			&parameter{
				ID: 51,
				Name: "High temperature alarm threshold",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 55536,
						To: 10000,
						Desc: "value 3500 (35,0°C)",
						Unit: "x0,01°C",
					},
				},
			},
			&parameter{
				ID: 61,
				Name: "Low temperature alarm indicator LED colour",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 16777215,
						Desc: "255 (blue 0x000000FF)\nColour:\nRed = 16711680\nGreen = 65280\nBlue = 255\nYellow = 16776960\nTurquoise = 65535\nOrange = 16750848\nWhite = 16777215\nLED indicator turned off = 0\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 62,
				Name: "High temperature alarm indicator LED colour",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 16777215,
						Desc: "16711680 (red 0x00FF0000)\nColour:\nRed = 16711680\nGreen = 65280\nBlue = 255\nYellow = 16776960\nTurquoise = 65535\nOrange = 16750848\nWhite = 16777215\nLED indicator turned off = 0\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 63,
				Name: "Managing a LED indicator under standard operation",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED indicator doesn’t indicate the temperature",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED indicator indicates the temperature (blink) every Temperature\nMeasurement Interval (Parameter 10, constant current and battery) or Wake\nUp Interval (battery mode)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "LED indicator indicates the temperature continuously, only in constant power\nmode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 73,
				Name: "Temperature measurement compensation",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 55536,
						To: 10000,
						Desc: "",
						Unit: "x0,00°C",
					},
				},
			},
			&parameter{
				ID: 74,
				Name: "Alarm frame sent to 2-nd Association Group activation",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "tamper alarms inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "button tamper alarm active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "movement tamper alarm active",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "button and movement tampers alarm active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 75,
				Name: "Visual and audible alarms duration",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "value of 0 means visual and acoustic alarms are active indefinitely",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 76,
				Name: "Alarm frame / Basic Set frame retransmission time when retaining flood alarm",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 32767,
						Desc: "value of 0 cancels an alarm frame retransmission",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 77,
				Name: "Flood sensor functionality turned off",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Default flood sensor operation (flood detection, reactions)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Built in flood sensor TURNED OFF (doesn’t change its state in the main\ncontroller, doesn’t send Alarms and Basic Set frames with flood state changes.\nAlways visible in the main controller as turned off)",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f0b011002() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGFS-101",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0b01",
		ProductID: "1002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "8",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008e,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x009c,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Alarm cancellation delay",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no delay, immediate alarm cancelation",
						Unit: "",
					},
					Value{
						From: 1,
						To: 3600,
						Desc: "Define the time period for retaining the flood state.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Acoustic and visual signals On / Off in case of flooding",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "acoustic and visual alarms inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "acoustic alarm inactive, visual alarm active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "acoustic alarm active, visual alarm inactive",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "acoustic and visual alarms active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Forced dimming level / roller blind opening level, when sending turn on / open command to 2nd association group devices",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "A device is turned on.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define an opening level.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Alarm cancelling or turning a device off (Basic) command frame deactivation",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "alarm (flooding) cancellation inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "alarm (flooding) cancellation active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Temperature measurement interval",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "Define a time interval for consecutive temperature measurements.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Temperature measurement hysteresis",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 1000,
						Desc: "Define the minimum temperature change value.",
						Unit: "x 0,01°C",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "Low temperature alarm threshold",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 55536,
						To: 10000,
						Desc: "Define a low temperature treshold.",
						Unit: "x 0,01°C",
					},
				},
			},
			&parameter{
				ID: 51,
				Name: "High temperature alarm threshold",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 55536,
						To: 10000,
						Desc: "Define the high temperature treshold.",
						Unit: "x 0,01°C",
					},
				},
			},
			&parameter{
				ID: 61,
				Name: "Low temperature alarm indicator colour",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED indicator is turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 16777215,
						Desc: "A main controller interprets colours as a sum of it component\ncolours value. Each colours value is a number from 0 to 255.\n\nExample: Indicated colour = 65536 * RED value &#43; 256 * GREEN value &#43; BLUE value\nColour\nRed=16711680\nGreen=65280\nBlue=255\nYellow=16776960\nTurquoise=65535\nOrange=16750848\nWhite=16777215\n\n\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 62,
				Name: "High temperature alarm indicator colour",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED indicator is turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 16777215,
						Desc: "A main controller interprets colours as a sum of it component\ncolours value. Each colours value is a number from 0 to 255.\n\nExample: Indicated colour = 65536 * RED value &#43; 256 * GREEN value &#43; BLUE value\nColour\nRed=16711680\nGreen=65280\nBlue=255\nYellow=16776960\nTurquoise=65535\nOrange=16750848\nWhite=16777215\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 63,
				Name: "Managing a LED indicator under standard operation",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED indicator doesn’t indicate the temperature",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED indicator indicates the temperature (blink) every Temperature\nMeasurement Interval (Parameter 10, constant current and battery) or Wake\nUp Interval (battery mode)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "LED indicator indicates the temperature continuously, only in constant power\nmode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 73,
				Name: "Temperature measurement compensation",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 55536,
						To: 10000,
						Desc: "Define a temperature value for adjustment.",
						Unit: "x 0,01°C",
					},
				},
			},
			&parameter{
				ID: 74,
				Name: "Alarm frame sent to 1st and 4th Association Group activation",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "tamper alarms inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "button tamper alarm active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "movement tamper alarm active",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "button and movement tampers alarm active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 75,
				Name: "Visual and audible alarms duration",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Alarms are permanently active.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Define a time period for silencing the alarm.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 76,
				Name: "Alarm frame / Basic Set frame retransmission time when retaining flood alarm",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Alarm frame won&#39;t be retransmitted.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Define the time period for retransmitting the alarm frame.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 77,
				Name: "Flood sensor functionality turned off",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Default flood sensor operation (flood detection, reactions)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Built in flood sensor TURNED OFF (doesn’t change its state in the main\ncontroller, doesn’t send Alarms and Basic Set frames with flood state changes.\nAlways visible in the main controller as turned off)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 78,
				Name: "Associations in Z-Wave network security mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "0 - none of the groups sent as secure\n1 - 2nd group ”Flood Control” sent as secure\n2 - 3rd group ”Flood Alarm” sent as secure\n4 - 4th group „Tamper” sent as secure",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f0b012002() *Device{
	return &Device{
		Brand: "Fibar Group S. A.",
		Product: "FIBARO Flood Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0b01",
		ProductID: "2002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x009c,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Alarm cancellation delay",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 3600,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Acoustic and visual signals On / Off in case of flooding",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "acoustic and visual alarms inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "acoustic alarm inactive, visual alarm active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "acoustic alarm active, visual alarm inactive",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "acoustic and visual alarms active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Requested dimming level / roller blind opening level when sending turn on / open command to 2nd association group devices",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Define a specific level,",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "turn a device on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Deactivate turning off devices in 2nd association group &amp; alarm cancellation in 3rd group",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "alarm (flooding) cancellation inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "alarm (flooding) cancellation active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Temperature measurement interval",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Temperature measurement hysteresis",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 1000,
						Desc: "Define a temperature value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "Low temperature alarm threshold",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 55536,
						To: 10000,
						Desc: "Define a lower treshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 51,
				Name: "High temperature alarm threshold",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 55536,
						To: 10000,
						Desc: "Define an upper treshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 61,
				Name: "Low temperature alarm indicator colour",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 16777215,
						Desc: "Set a colour.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 62,
				Name: "High temperature alarm indicator colour",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 16777215,
						Desc: "Set a colour.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 63,
				Name: "Temperature indication using LED visual indicator",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "visual indicator does not indicate the\ntemperature",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "visual indicator indicates the temperature\n(blink) every Temperature Measurement Interval\n(parameter 10, constant current and battery)\nand Wake Up Interval (battery mode)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "visual indicator indicates the temperature\ncontinuously, only in constant power mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 73,
				Name: "Temperature measurement compensation",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 55536,
						To: 10000,
						Desc: "Define a temperature value for compensation.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 74,
				Name: "Alarm frame sent to 1st and 4th Association Group activation",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "tamper alarms inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "button tamper alarm active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "movement tamper alarm active",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "button and movement tampers alarm active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 75,
				Name: "Alarms signalization duration",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "alarms active indefinitely",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 76,
				Name: "Alarm signalization reactivation period",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "alarm reactivation inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 77,
				Name: "Flood sensor functionality turned off",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Default flood sensor operation (flood detection,\nreactions)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Built-in flood sensor TURNED OFF (does not\nchange its state in the main controller, does\nnot send alarm notifications nor turn on/off\ncommands to 2nd/3rd association groups with\nflood state changes. Always visible in the main\ncontroller as turned off)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 78,
				Name: "Associations in Z-Wave network security mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "Define which commands should be sent secure. Sum up the different values.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f0c001000() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGSS-001",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0c00",
		ProductID: "1000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x009c,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Smoke alarm cancellation delay",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no delay, immediate cancellation",
						Unit: "",
					},
					Value{
						From: 1,
						To: 17280,
						Desc: "Define the time delay.",
						Unit: "x5sec",
					},
					Value{
						From: 65534,
						To: 65534,
						Desc: "alarm cancellation inactive",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "LED indicator and acoustic alarm turned ON / OFF at any alarm type.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "acoustic and visual alarms inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "acoustic alarm inactive, visual alarm active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "acoustic alarm active, visual alarm inactive",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "acoustic and visual alarms active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Type of alarm frame sent to 1-st Association Group devices (smoke alarm).",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ALARM SENSOR (SMOKE) command frame",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "BASIC_SET command frame",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Forced level of dimming / opening dimmers, roller blinds etc. devices at sending turn on / open / change level commands to 1-st Association Group’s devices.",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Set the forced level of dimming/opening devices.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Device is turned on.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Temperature report interval",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reports are inactive.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 17280,
						Desc: "Define the temperature report interval.",
						Unit: "x5sec",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Temperature report hysteresis.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The temperature change reporting function is inactive.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Define delta T for a temperature report.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 73,
				Name: "Temperature measurement compensation",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 64536,
						To: 1000,
						Desc: "Set a temperature compensation value.",
						Unit: "x0.1 °C",
					},
				},
			},
			&parameter{
				ID: 80,
				Name: "Z-Wave range test interval.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Z-Wave network range test is inactive.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 144,
						Desc: "Set the time interval for Z-Wave network range tests.",
						Unit: "x10min",
					},
				},
			},
			&parameter{
				ID: 81,
				Name: "Temperature alarm threshold.",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 100,
						Desc: "Set the temperature value.",
						Unit: "°C",
					},
				},
			},
			&parameter{
				ID: 82,
				Name: "Fibaro Smoke Sensor sensitivity",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "HIGH Sensitivity",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "MEDIUM Sensitivity",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "LOW Sensitivity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 83,
				Name: "Black Box sensitivity level.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "HIGH Sensitivity",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "MEDIUM Sensitivity",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "LOW Sensitivity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 84,
				Name: "Malfunction alarm",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Set the time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 85,
				Name: "Temperature alarm",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Set the time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 86,
				Name: "Lack of the Z-Wave range alarm",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 17280,
						Desc: "Set the time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 87,
				Name: "Low battery alarm",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 17280,
						Desc: "Set the time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 88,
				Name: "Consider temperature measurement compensation (parameter 73) when sending temperature report.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ignore temperature compensation",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "include temperature compensation",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 89,
				Name: "Tamper alarm",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "tamper alarm inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "tamper alarm active, with cancellation option available",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "tamper alarm active, without cancellation option",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Alarm broadcast",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "broadcast inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "smoke alarm broadcast (1-st Association Group) active; tamper alarm\nbroadcast (2-nd Association Group) inactive",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "smoke alarm broadcast (1-st Association Group) inactive; tamper alarm\nbroadcast (2-nd Association Group) active",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "smoke alarm broadcast active (1-st association group); tamper alarm\nbroadcast (2-nd association group) active",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f0c021002() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "FGSD-002",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0c02",
		ProductID: "1002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "8",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008e,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x009c,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x008b,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Fibaro Smoke Sensor sensitivity",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "HIGH Sensitivity",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "MEDIUM Sensitivity",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "LOW Sensitivity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Z-Wave notifications status",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 3,
						Desc: "Parameter values may be combined, e.g. 1&#43;2=3, means that all notifications are\nenabled.\n0 - all notifications disabled\n1 - enclosure opening notification enabled\n2 - exceeding temperature threshold notification enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Visual indicator notifications status",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "Parameter values may be combined, e.g. 1&#43;2&#43;4=7, means that all notifications are\nenabled.\n0 - all notifications disabled\n1 - enclosure opening notification enabled\n2 - exceeding temperature threshold notification enabled\n4 - lack of Z-Wave range notification",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Sound notifications status",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 7,
						Desc: "Parameter values may be combined, e.g. 1&#43;2&#43;4=7, means that all notifications are\nenabled.\n0 - all notifications disabled\n1 - enclosure opening notification enabled\n2 - exceeding temperature threshold notification enabled\n4 - lack of Z-Wave range notification",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Configuration of control frames in BASIC command class",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "BASIC ON &amp; BASIC OFF enabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "BASIC ON enabled",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "BASIC OFF enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "BASIC ON frame value",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Device is turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Sets the device to 1-99%.",
						Unit: "%",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Sets the last status.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "BASIC OFF frame value",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Device is turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Sets the device to 1-99%.",
						Unit: "%",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Sets the last status.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Alarm broadcast",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Broadcast is inactive.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "FIRE ALARM broadcast (2-nd &amp; 4-th Association Group) active; enclosure\nopening notification broadcast (3-rd &amp; 5-th Association Group) inactive.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "FIRE ALARM broadcast (2-nd &amp; 4-th Association Group) inactive; enclosure\nopening notification broadcast (3-rd &amp; 5-th Association Group) active.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "FIRE ALARM broadcast (2-nd &amp; 4-th Association Group) active; enclosure\nopening notification broadcast (3-rd &amp; 5-th Association Group) active.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Associations in Z-Wave network security mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 15,
						Desc: "Parameter values may be combined, e.g. 1&#43;2=3 means that 2nd &amp; 3rd group are\nsent as secure.\n0 - all groups sent as non-secure\n1 - 2nd group sent as secure\n2 - 3rd group sent as secure\n4 - 4th group sent as secure\n8 - 5th group sent as secure",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Temperature report interval",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reports are inactive.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 8640,
						Desc: "Define the time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Temperature report hysteresis",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Define the difference in temperature value for reports being sent.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Temperature threshold",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Define\nthe\n treshold parameter .",
						Unit: "°C",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Excess temperature signaling interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 8640,
						Desc: "Define the time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Lack of Z-Wave range indication interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 8640,
						Desc: "Define the time interval.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f0d011000() *Device{
	return &Device{
		Brand: "FIBARO",
		Product: "FGGC-001",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0d01",
		ProductID: "1000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005b,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008e,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Device orientation",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "default orientation",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "180° rotation",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "90° clockwise rotation",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "90° counter-clockwise rotation",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Buzzer - acoustic signal settings",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "gestures detection is not signalled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "gestures detection is signalled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "LED diode - visual indicator settings",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "gestures detection is not indicated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "gestures detection is indicated",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Buzzer - signalling result of gesture recognition",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "only successful recognition is signalled",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "only failed recognition is signalled",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "successful and failed recognition is signalled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Powering mode - interval of updating the current mode",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "powering mode is not updated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1080,
						Desc: "Define a time interval.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Power saving mode (battery mode)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Standby Mode",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Simple Mode",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "the Swipe does not enter power saving\nmode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Hold gesture to enter the menu",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Hold gesture to enter the menu enabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Hold gesture to enter the menu disabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Scenes sent to the controller",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 63,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Associations in Z-Wave network security mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 31,
						Desc: "Define a value. ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Control mode of 2nd - 5th „Flick UP/DOWN/LEFT/RIGHT” association groups and scenes",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 15,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Rate of smooth level control",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 10,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "default settings of controlled devices",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "SWITCH ON control frame value for FLICK UP gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated\ndevices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of\nassociated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated\ndevices to the last\nremembered state or\nturning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "SWITCH OFF control frame value for FLICK UP gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated\ndevices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of\nassociated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated\ndevices to the last\nremembered state or\nturning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "SWITCH ON control frame value for FLICK DOWN gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated\ndevices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of\nassociated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated\ndevices to the last\nremembered state or\nturning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "SWITCH OFF control frame value for FLICK DOWN gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated\ndevices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of\nassociated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated\ndevices to the last\nremembered state or\nturning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "SWITCH ON control frame value for FLICK LEFT gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated\ndevices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of\nassociated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated\ndevices to the last\nremembered state or\nturning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "SWITCH OFF control frame value for FLICK LEFT gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated\ndevices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of\nassociated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated\ndevices to the last\nremembered state or\nturning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "SWITCH ON control frame value for FLICK RIGHT gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated\ndevices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of\nassociated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated\ndevices to the last\nremembered state or\nturning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "SWITCH OFF control frame value for FLICK RIGHT gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated\ndevices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of\nassociated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated\ndevices to the last\nremembered state or\nturning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Sequence learning mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "learning mode disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 6,
						Desc: "launch sequence learning for selected slot",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "1st gestures sequence (SLOT 1)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "2nd gestures sequence (SLOT 2)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "3rd gestures sequence (SLOT 3)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "4th gestures sequence (SLOT 4)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "5th gestures sequence (SLOT 5)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 36,
				Name: "6th gestures sequence (SLOT 6)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f0d012000() *Device{
	return &Device{
		Brand: " Fibar Group S. A.",
		Product: "Gesture Controller",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0d01",
		ProductID: "2000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008e,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Device orientation",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "default orientation",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "180 rotation",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "90 clockwise rotation",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "90 counter-clockwise rotation",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Buzzer - acoustic signal settings",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "gestures detection is not signalled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "gestures detection is signalled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "LED diode - visual indicator settings",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "gestures detection is not indicated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "gestures detection is indicated",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Buzzer - signalling result of gesture recognition",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "only successful recognition is signalled",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "only failed recognition is signalled",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "successful and failed recognition is signalled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "\nPowering mode - interval of updating the current mode\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "powering mode is not updated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1080,
						Desc: "Define a time interval.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Power saving mode (battery mode)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Standby Mode",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Simple Mode",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "the Swipe does not enter power saving mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Hold gesture to enter the menu",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Hold gesture to enter the menu enabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Hold gesture to enter the menu disabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Scenes sent to the controller",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 63,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Associations in Z-Wave network security mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 31,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "\nControl mode of 2nd - 5th &#34;Flick UP/DOWN/LEFT/RIGHT&#34; association groups and scenes\n",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 15,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Rate of smooth level control",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 10,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "default settings of controlled devices",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "SWITCH ON control frame value for FLICK UP gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "\nSWITCH OFF control frame value for FLICK UP gesture\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "\nSWITCH ON control frame value for FLICK DOWN gesture\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "\nSWITCH OFF control frame value for FLICK DOWN gesture\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "\nSWITCH ON control frame value for FLICK LEFT gesture\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "\nSWITCH OFF control frame value for FLICK LEFT gesture\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "\nSWITCH ON control frame value for FLICK RIGHT gesture\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "\nSWITCH OFF control frame value for FLICK RIGHT gesture\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Sequence learning mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "learning mode disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 6,
						Desc: "launch sequence learning for selected slot",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "1st gestures sequence (SLOT 1)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "2nd gestures sequence (SLOT 2)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "3rd gestures sequence (SLOT 3)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "4th gestures sequence (SLOT 4)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "5th gestures sequence (SLOT 5)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 36,
				Name: "6th gestures sequence (SLOT 6)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f0d013000() *Device{
	return &Device{
		Brand: "Fibar Group S. A.",
		Product: "Gesture Controller",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0d01",
		ProductID: "3000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008e,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Device orientation",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "default orientation",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "180 rotation",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "90 clockwise rotation",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "90 counter-clockwise rotation",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Buzzer - acoustic signal settings",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "gestures detection is not signalled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "gestures detection is signalled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "LED diode - visual indicator settings",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "gestures detection is not indicated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "gestures detection is indicated",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Buzzer - signalling result of gesture recognition",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "only successful recognition is signalled",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "only failed recognition is signalled",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "successful and failed recognition is signalled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "\nPowering mode - interval of updating the current mode\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "powering mode is not updated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1080,
						Desc: "Define a time interval.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Power saving mode (battery mode)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Standby Mode",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Simple Mode",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "the Swipe does not enter power saving mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Hold gesture to enter the menu",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Hold gesture to enter the menu enabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Hold gesture to enter the menu disabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Scenes sent to the controller",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 63,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Associations in Z-Wave network security mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 31,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "\nControl mode of 2nd - 5th &#34;Flick UP/DOWN/LEFT/RIGHT&#34; association groups and scenes\n",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 15,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Rate of smooth level control",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 10,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "default settings of controlled devices",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "SWITCH ON control frame value for FLICK UP gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "\nSWITCH OFF control frame value for FLICK UP gesture\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "\nSWITCH ON control frame value for FLICK DOWN gesture\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "\nSWITCH OFF control frame value for FLICK DOWN gesture\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "\nSWITCH ON control frame value for FLICK LEFT gesture\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "\nSWITCH OFF control frame value for FLICK LEFT gesture\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "\nSWITCH ON control frame value for FLICK RIGHT gesture\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "\nSWITCH OFF control frame value for FLICK RIGHT gesture\n",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "\nsetting associated devices to the last remembered state or turning them on\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Sequence learning mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "learning mode disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 6,
						Desc: "launch sequence learning for selected slot",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "1st gestures sequence (SLOT 1)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "2nd gestures sequence (SLOT 2)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "3rd gestures sequence (SLOT 3)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "4th gestures sequence (SLOT 4)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "5th gestures sequence (SLOT 5)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 36,
				Name: "6th gestures sequence (SLOT 6)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New010f0d014000() *Device{
	return &Device{
		Brand: "Fibaro",
		Product: "SWIPE",
		Description: "\n            \n          ",

		ManufacturerID: "010f",
		ProductType: "0d01",
		ProductID: "4000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x005b,
				InNIF: "false",
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				InNIF: "false",
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				InNIF: "false",
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				InNIF: "false",
				Secure: true,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Device orientation",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "default orientation",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "180 rotation",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "90 clockwise rotation",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "90 counter-clockwise rotation",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Buzzer - acoustic signal settings",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "gestures detection is not signalled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "gestures detection is signalled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "LED diode - visual indicator settings",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "gestures detection is not indicated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "gestures detection is indicated",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Buzzer - signalling result of gesture recognition",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "only successful recognition is signalled",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "only failed recognition is signalled",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "successful and failed recognition is signalled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Powering mode - interval of updating the current mode",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "powering mode is not updated",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1080,
						Desc: "Define a time interval.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Power saving mode (battery mode)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Standby Mode",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Simple Mode",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "the Swipe does not enter power saving mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Hold gesture to enter the menu",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Hold gesture to enter the menu enabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Hold gesture to enter the menu disabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Scenes sent to the controller",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "scenes for flick UP gesture enabled",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "scenes for flick DOWN gesture enabled",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "scenes for flick LEFT gesture enabled",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "scenes for flick RIGHT gesture enabled",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "scenes for clockwise circular gesture enabled",
						Unit: "",
					},
					Value{
						From: 32,
						To: 32,
						Desc: "scenes for counter-clockwise circular gesture\nenabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Associations in Z-Wave network security mode",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "2nd group ”Flick UP” sent as secure",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "3rd group ”Flick DOWN” sent as secure",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "4th group „Flick LEFT” sent as secure",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "5th group „Flick RIGHT” sent as secure",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "6th group „Circular AirWheel” sent as secure",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Control mode of 2nd - 5th &#34;Flick UP/DOWN/LEFT/RIGHT&#34; association groups and scenes",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Toggle Mode enabled for 2nd association\ngroup ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Toggle Mode enabled for 3rd association\ngroup ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Toggle Mode enabled for 4th association\ngroup",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Toggle Mode enabled for 5th association\ngroup",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Rate of smooth level control",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 10,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "default settings of controlled devices",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "SWITCH ON control frame value for FLICK UP gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated devices to the last remembered state or turning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "SWITCH OFF control frame value for FLICK UP gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated devices to the last remembered state or turning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "SWITCH ON control frame value for FLICK DOWN gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated devices to the last remembered state or turning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "SWITCH OFF control frame value for FLICK DOWN gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated devices to the last remembered state or turning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "SWITCH ON control frame value for FLICK LEFT gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated devices to the last remembered state or turning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "SWITCH OFF control frame value for FLICK LEFT gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated devices to the last remembered state or turning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "SWITCH ON control frame value for FLICK RIGHT gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated devices to the last remembered state or turning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "SWITCH OFF control frame value for FLICK RIGHT gesture",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "turning off associated devices",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "forcing level of associated devices",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "setting associated devices to the last remembered state or turning them on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Sequence learning mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "learning mode disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 6,
						Desc: "launch sequence learning for selected slot",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "1st gestures sequence (SLOT 1)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "2nd gestures sequence (SLOT 2)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "3rd gestures sequence (SLOT 3)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "4th gestures sequence (SLOT 4)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "5th gestures sequence (SLOT 5)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 36,
				Name: "6th gestures sequence (SLOT 6)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1076,
						Desc: "Set a value.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011024110001() *Device{
	return &Device{
		Brand: "Nanogrid",
		Product: "Nanogird Wireless Light Switch",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0110",
		ProductType: "2411",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011110000010() *Device{
	return &Device{
		Brand: "KUJU",
		Product: "China SmartPlug with Power Meter",
		Description: "\n            \n          ",

		ManufacturerID: "0111",
		ProductType: "1000",
		ProductID: "0010",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Power Auto Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 10,
						To: 18000,
						Desc: "Define the time interval for a power auto report.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Energy Auto Report",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 600,
						To: 432000,
						Desc: "Define the time interval for an accumulated energy auto report.",
						Unit: "sec",
					},
				},
			},
		},
	}
}
func New011182000200() *Device{
	return &Device{
		Brand: "AMC",
		Product: "Dimming Switch Module",
		Description: "\n            \n          ",

		ManufacturerID: "0111",
		ProductType: "8200",
		ProductID: "0200",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0000,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011344503030() *Device{
	return &Device{
		Brand: "DM-15",
		Product: "DM-15",
		Description: "\n            \n          ",

		ManufacturerID: "0113",
		ProductType: "4450",
		ProductID: "3030",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011345565435() *Device{
	return &Device{
		Brand: "T1000",
		Product: "T1000",
		Description: "\n            \n          ",

		ManufacturerID: "0113",
		ProductType: "4556",
		ProductID: "5435",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0040,
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0044,
			},
			&CommandClass{
				ID: 0x0045,
			},
			&CommandClass{
				ID: 0x0042,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "System Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Standard",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Heat Pump",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Fan Coil",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Fan Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Gas (no fan w/heat)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Electric (Fan w/heat)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Fan Coil 1 Speed",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Fan Coil 2 Speed",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Fan Coil 3 Speed",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Change Over Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "CO w/cool",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "CO w/heat",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "C/F Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Centigrade",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Fahrenheit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Mechanical Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "MECH_H1",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "MECH_H2",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "MECH_H3",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "MECH_C1",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "MECH_C2",
						Unit: "",
					},
					Value{
						From: 32,
						To: 32,
						Desc: "PHANTOM_F",
						Unit: "",
					},
					Value{
						From: 64,
						To: 64,
						Desc: "MECH_F",
						Unit: "",
					},
					Value{
						From: 128,
						To: 128,
						Desc: "MANUAL_F",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "SCP Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "STATE_HEAT",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "STATE_COOL",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "STATE_2ND",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "STATE_3RD",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "STATE_FAN",
						Unit: "",
					},
					Value{
						From: 32,
						To: 32,
						Desc: "STATE_VENT",
						Unit: "",
					},
					Value{
						From: 64,
						To: 64,
						Desc: "STATE_MOT",
						Unit: "",
					},
					Value{
						From: 128,
						To: 128,
						Desc: "STATE_MRT",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Autosend Enable Bits",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TEMPERATURE",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "SETPOINTH",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "SETPOINTC",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "MODE",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "FANMODE",
						Unit: "",
					},
					Value{
						From: 32,
						To: 32,
						Desc: "FANSTATE",
						Unit: "",
					},
					Value{
						From: 64,
						To: 64,
						Desc: "OPERATINGSTATE",
						Unit: "",
					},
					Value{
						From: 128,
						To: 128,
						Desc: "SCHEDENABLE",
						Unit: "",
					},
					Value{
						From: 264,
						To: 264,
						Desc: "SETBACK",
						Unit: "",
					},
					Value{
						From: 512,
						To: 512,
						Desc: "RUNHOLD",
						Unit: "",
					},
					Value{
						From: 1024,
						To: 1024,
						Desc: "DISPLAYLOCK",
						Unit: "",
					},
					Value{
						From: 2048,
						To: 2048,
						Desc: "FILTERALERT",
						Unit: "",
					},
					Value{
						From: 4096,
						To: 4096,
						Desc: "MAINTALERT",
						Unit: "",
					},
					Value{
						From: 8192,
						To: 8192,
						Desc: "MECHSTATUS",
						Unit: "",
					},
					Value{
						From: 16384,
						To: 16384,
						Desc: "SCPSTATUS",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Display Lock",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "unlocked",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "locked",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "MOT",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 9,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "MRT",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 9,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "H Delta Stage 1 ON",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 8,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "H Delta Stage 1 OFF",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 8,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "H Delta Stage 2 ON",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 8,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "H Delta Stage 2 OFF",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 8,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "H Delta Stage 3 ON",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 8,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "H Delta Stage 3 OFF",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 8,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "C Delta Stage 1 ON",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 8,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "C Delta Stage 1 OFF",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 8,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "C Delta Stage 2 ON",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 8,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "C Delta Stage 2 OFF",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 8,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "Setpoint H/C Delta",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 15,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "Setback Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No Setback",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "UnOccupied Mode",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Standby Mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 29,
				Name: "UnOccupied HSP *",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 65,
						To: 85,
						Desc: "",
						Unit: "Fahrenheit",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "UnOccupied CSP *",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 65,
						To: 85,
						Desc: "",
						Unit: "Fahrenheit",
					},
				},
			},
			&parameter{
				ID: 48,
				Name: "2nd Stage Heat Enable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 49,
				Name: "Aux Heat Enable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "2nd Stage Cool Enable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 60,
				Name: "Backlight Timer",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 120,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 61,
				Name: "UI Max Heat Setpoint",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 50,
						To: 85,
						Desc: "",
						Unit: "Fahrenheit",
					},
				},
			},
			&parameter{
				ID: 62,
				Name: "UI Min Cool Setpoint",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 55,
						To: 99,
						Desc: "",
						Unit: "Fahrenheit",
					},
				},
			},
			&parameter{
				ID: 64,
				Name: "Screen Timeout",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 20,
						To: 120,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 90,
				Name: "Filter Timer",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 4000,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 92,
				Name: "Filter Timer Max",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable Filter Notify",
						Unit: "",
					},
					Value{
						From: 1,
						To: 4000,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 94,
				Name: "Heat Timer",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 4000,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 98,
				Name: "Cool Timer",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 4000,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 102,
				Name: "Maint Timer (Sum of Heat and Cool Timers)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 4000,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 104,
				Name: "Maint Timer Max",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable Maint Notify",
						Unit: "",
					},
					Value{
						From: 1,
						To: 4000,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 132,
				Name: "Filter Notify",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Filter Timer &gt;= Filter Max",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Filter Timer &lt; Filter Max",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 133,
				Name: "Maint Notify",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Maint Timer &gt;= Maint Max",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Maint Timer &lt; Maint Max",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 183,
				Name: "Comfort Default SP",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 65,
						To: 85,
						Desc: "",
						Unit: "Fahrenheit",
					},
				},
			},
			&parameter{
				ID: 184,
				Name: "Comfort Delta",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 188,
				Name: "Standby HSP",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 50,
						To: 85,
						Desc: "",
						Unit: "Fahrenheit",
					},
				},
			},
			&parameter{
				ID: 189,
				Name: "Standby CSP",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 65,
						To: 90,
						Desc: "",
						Unit: "Fahrenheit",
					},
				},
			},
			&parameter{
				ID: 190,
				Name: "Standby Delay",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 240,
						Desc: "",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 191,
				Name: "CardKey Enable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 192,
				Name: "Setback Disabled",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Enable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011400010001() *Device{
	return &Device{
		Brand: "Kichler Lighting",
		Product: "Undercabinet Controller",
		Description: "\n            \n          ",

		ManufacturerID: "0114",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011500000000() *Device{
	return &Device{
		Brand: "UZB",
		Product: "Z-Wave USB Stick",
		Description: "\n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
		},
		Parameters: []*parameter{
		},
	}
}
func New011500010001() *Device{
	return &Device{
		Brand: "RaZBerry",
		Product: "RaZBerry",
		Description: "\n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0046,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008a,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0077,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x004c,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x007a,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0087,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x003d,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "6",
			},
			&CommandClass{
				ID: 0x0075,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x002c,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x002d,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0045,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0042,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x008b,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x009e,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0046,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011500040002() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Outdoor Siren",
		Description: "\n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0004",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Siren triggering mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The Siren triggers automatically when it&#39;s removed from the holder. Must\nbe turned off, using the button or from the controller",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The Siren triggers automatically when it&#39;s removed from the holder and\nturns off, when placed back on the holder",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Siren doesn&#39;t trigger at all, when removed from the holder. Service Mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Temperature adjustments",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "In 0.1°C, adjust the temperature",
						Unit: "",
					},
					Value{
						From: 128,
						To: 255,
						Desc: "-0.1°C, adjust the temperature",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Send unsolicited temperature report",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "Define a treshold",
						Unit: "x 0,1°C",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Send unsolicited temperature report after N wake up",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Each Nth wake up time",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Switch mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Siren only",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flash only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Flash &#43; Siren",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Added Auto OFF",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no auto off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Define an auto off time.",
						Unit: "min",
					},
				},
			},
		},
	}
}
func New011500040003() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Z-Wave CO Detector",
		Description: "\n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0004",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0031,
				Secure: true,
				NonSecure: false,
				Version: "7",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Siren alarm sequence interval",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 6,
						To: 130,
						Desc: "sequence interval",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Siren alarm tone length",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "tone length",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Value of On-Command",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "On-Command",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Value of Off-Command",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "Off-Command",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011500040004() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "10 Year Smoke Detector plus Siren",
		Description: "\n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0004",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Siren Alarm Sequence Interval",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 6,
						To: 129,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Siren Alarm Tone Length ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Define the length of the sound.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Value of On-Command",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Value of Off-Command",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011500240001() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Floor thermostat 1.4",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0024",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Boost Dry mode duration",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Button mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Toggle Normal Heating / Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Toggle Normal Heating / Energy Save",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Toggle Boost Dry",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Basic mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Toggle Normal Heating / Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Toggle Normal Heating / Energy Save",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Toggle Boost Dry",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Set Normal Heating set point temperature (in 0.1 C units)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Switch on/off relay directly (only if Thermostat Mode is in Off state)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Temperature control interval",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 60,
						Desc: "in 10 sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Maximum allowed temperature deviation",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 60,
						Desc: "in 0.1 C",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Typical click timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Maximal allowed temperature",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 20,
						To: 55,
						Desc: "degree Celsus",
						Unit: "deg",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Energy consumption",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 3300,
						Desc: "Watts",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Unsolicited temperature report period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 30,
						To: 65535,
						Desc: "Seconds",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011501000001() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Key Fob 2",
		Description: "\n            \n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0100",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x002d,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Button 1 and 3 pair mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Button 2 and 4 pair mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Action on group 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Action on group 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Action on group 3",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Action on group 4",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Typical click timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 10,
						To: 100,
						Desc: "in 10ms units",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Send unsolicited Battery Report on Wake Up",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To same node as wake up notification",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Broadcast to neighbours",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "LED confirmation mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No confirmations",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Confirm button press",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Confirm button press and delivery",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "Blocks wakeup even when wakeup interval is set",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Wakeup is blocked",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Wakeup is possible if configured accordingly.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011501000004() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Dual Paddle Wall Controller 1.3",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0100",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Button 1 and 3 pair mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Button 2 and 4 pair mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Action on group 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Action on group 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Action on group 3",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Action on group 4",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Typical click timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 10,
						To: 100,
						Desc: "in 10ms units",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Send unsolicited Battery Report on Wake Up",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To same node as wake up notification",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Broadcast to neighbours",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "LED confirmation mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No confirmations",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Confirm button press",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Confirm button press and delivery",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011501000101() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "KFOB-S",
		Description: "\n            \n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0100",
		ProductID: "0101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005e,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Button 1 and 3 pair mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Button 2 and 4 pair mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Command to Control Group A",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Command to Control Group B",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Command to Control Group C",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Command to Control Group D",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Send unsolicited Battery Report on Wake Up",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To same node as wake up notification",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Broadcast to neighbors",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "Blocks wakeup even when wakeup interval is set",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Wakeup is blocked",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Wakeup is possible if configured accordingly.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011501000103() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "4 Button Secure Remote Control",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0100",
		ProductID: "0103",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005b,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Button 1/3 pair mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks\n\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Button 2/4 pair mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Command to Control Group A",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and\nSwitch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control Door Lock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway (Default)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Command to Control Group B",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control Door Lock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Command to Control Group C",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control Door Lock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Command to Control Group D",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control Door Lock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Invert Buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "Blocks wakeup even when wakeup interval is set",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Wakeup is blocked",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Wakeup is possible if configured accordingly",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Send unsolicited Battery Report on Wake Up",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To same node as wake up\nnotification",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Broadcast to neighbors",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011501000200() *Device{
	return &Device{
		Brand: "",
		Product: "",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0100",
		ProductID: "0200",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Device polling time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "seconds/10",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Channel 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No sensor",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ThermoPair L type",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ThermoPair J type",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ThermoPair N type",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "ThermoPair K type",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "ThermoPair S type",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "ThermoPair R type",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "ThermoPair B type",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "ThermoPair A1 type",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "ThermoPair A2 type",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "ThermoPair A3 type",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "ThermoPair T type",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "ThermoPair E type",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "ThermoPair E type",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "ThermoResistoristor Pt50 L=3.85",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "ThermoResistor Pt50 L=3.91",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "ThermoResistor Pt100 L=3.85",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "ThermoResistor Pt100 L=3.91",
						Unit: "",
					},
					Value{
						From: 17,
						To: 17,
						Desc: "ThermoResistor Pt500 L=3.85",
						Unit: "",
					},
					Value{
						From: 18,
						To: 18,
						Desc: "ThermoResistor Pt500 L=3.91",
						Unit: "",
					},
					Value{
						From: 19,
						To: 19,
						Desc: "ThermoResistor Pt1000 L=3.85",
						Unit: "",
					},
					Value{
						From: 20,
						To: 20,
						Desc: "ThermoResistor Pt1000 L=3.91",
						Unit: "",
					},
					Value{
						From: 21,
						To: 21,
						Desc: "ThermoResistor Cu50 L=4.26",
						Unit: "",
					},
					Value{
						From: 22,
						To: 22,
						Desc: "ThermoResistor Cu50 L=4.28",
						Unit: "",
					},
					Value{
						From: 23,
						To: 23,
						Desc: "ThermoResistor Cu100 L=4.26",
						Unit: "",
					},
					Value{
						From: 24,
						To: 24,
						Desc: "ThermoResistor Cu100 L=4.28",
						Unit: "",
					},
					Value{
						From: 25,
						To: 25,
						Desc: "ThermoResistor Cu500 L=4.26",
						Unit: "",
					},
					Value{
						From: 26,
						To: 26,
						Desc: "ThermoResistor Cu500 L=4.28",
						Unit: "",
					},
					Value{
						From: 27,
						To: 27,
						Desc: "ThermoResistor Cu1000 L=4.26",
						Unit: "",
					},
					Value{
						From: 28,
						To: 28,
						Desc: "ThermoResistor Cu1000 L=4.28",
						Unit: "",
					},
					Value{
						From: 29,
						To: 29,
						Desc: "ThermoResistor Ni100 L=6.17",
						Unit: "",
					},
					Value{
						From: 30,
						To: 30,
						Desc: "ThermoResistor Ni500 L=6.17",
						Unit: "",
					},
					Value{
						From: 31,
						To: 31,
						Desc: "ThermoResistor Ni1000 L=6.17",
						Unit: "",
					},
					Value{
						From: 32,
						To: 32,
						Desc: "ThermoResistor 23",
						Unit: "",
					},
					Value{
						From: 33,
						To: 33,
						Desc: "Voltage 0-1 V range",
						Unit: "",
					},
					Value{
						From: 34,
						To: 34,
						Desc: "Voltage 0-10 V range",
						Unit: "",
					},
					Value{
						From: 35,
						To: 35,
						Desc: "Current 4-20 mA range",
						Unit: "",
					},
					Value{
						From: 36,
						To: 36,
						Desc: "Dry Contact",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Dry contact. High input level, channel 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "V/10",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Dry contact. Low input level, channel 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "V/10",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Dry contact. Undefined input level, channel 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Low level",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "High level",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Report sending time, channel 1",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Send report at change of value to the set size, channel 1",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "value/100",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Send the report not more often, than, channel 1",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "ms",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Channel 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No sensor",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ThermoPair L type",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ThermoPair J type",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ThermoPair N type",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "ThermoPair K type",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "ThermoPair S type",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "ThermoPair R type",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "ThermoPair B type",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "ThermoPair A1 type",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "ThermoPair A2 type",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "ThermoPair A3 type",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "ThermoPair T type",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "ThermoPair E type",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "ThermoPair E type",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "ThermoResistoristor Pt50 L=3.85",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "ThermoResistor Pt50 L=3.91",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "ThermoResistor Pt100 L=3.85",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "ThermoResistor Pt100 L=3.91",
						Unit: "",
					},
					Value{
						From: 17,
						To: 17,
						Desc: "ThermoResistor Pt500 L=3.85",
						Unit: "",
					},
					Value{
						From: 18,
						To: 18,
						Desc: "ThermoResistor Pt500 L=3.91",
						Unit: "",
					},
					Value{
						From: 19,
						To: 19,
						Desc: "ThermoResistor Pt1000 L=3.85",
						Unit: "",
					},
					Value{
						From: 20,
						To: 20,
						Desc: "ThermoResistor Pt1000 L=3.91",
						Unit: "",
					},
					Value{
						From: 21,
						To: 21,
						Desc: "ThermoResistor Cu50 L=4.26",
						Unit: "",
					},
					Value{
						From: 22,
						To: 22,
						Desc: "ThermoResistor Cu50 L=4.28",
						Unit: "",
					},
					Value{
						From: 23,
						To: 23,
						Desc: "ThermoResistor Cu100 L=4.26",
						Unit: "",
					},
					Value{
						From: 24,
						To: 24,
						Desc: "ThermoResistor Cu100 L=4.28",
						Unit: "",
					},
					Value{
						From: 25,
						To: 25,
						Desc: "ThermoResistor Cu500 L=4.26",
						Unit: "",
					},
					Value{
						From: 26,
						To: 26,
						Desc: "ThermoResistor Cu500 L=4.28",
						Unit: "",
					},
					Value{
						From: 27,
						To: 27,
						Desc: "ThermoResistor Cu1000 L=4.26",
						Unit: "",
					},
					Value{
						From: 28,
						To: 28,
						Desc: "ThermoResistor Cu1000 L=4.28",
						Unit: "",
					},
					Value{
						From: 29,
						To: 29,
						Desc: "ThermoResistor Ni100 L=6.17",
						Unit: "",
					},
					Value{
						From: 30,
						To: 30,
						Desc: "ThermoResistor Ni500 L=6.17",
						Unit: "",
					},
					Value{
						From: 31,
						To: 31,
						Desc: "ThermoResistor Ni1000 L=6.17",
						Unit: "",
					},
					Value{
						From: 32,
						To: 32,
						Desc: "ThermoResistor 23",
						Unit: "",
					},
					Value{
						From: 33,
						To: 33,
						Desc: "Voltage 0-1 V range",
						Unit: "",
					},
					Value{
						From: 34,
						To: 34,
						Desc: "Voltage 0-10 V range",
						Unit: "",
					},
					Value{
						From: 35,
						To: 35,
						Desc: "Current 4-20 mA range",
						Unit: "",
					},
					Value{
						From: 36,
						To: 36,
						Desc: "Dry Contact",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Dry contact. High input level, channel 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "V/10",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Dry contact. Low input level, channel 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "V/10",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "Dry contact. Undefined input level, channel 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Low level",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "High level",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "Report sending time, channel 2",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "Send report at change of value to the set size, channel 2",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "value/100",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "Send the report not more often, than, channel 2",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "ms",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Channel 3",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No sensor",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ThermoPair L type",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ThermoPair J type",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ThermoPair N type",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "ThermoPair K type",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "ThermoPair S type",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "ThermoPair R type",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "ThermoPair B type",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "ThermoPair A1 type",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "ThermoPair A2 type",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "ThermoPair A3 type",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "ThermoPair T type",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "ThermoPair E type",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "ThermoPair E type",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "ThermoResistoristor Pt50 L=3.85",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "ThermoResistor Pt50 L=3.91",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "ThermoResistor Pt100 L=3.85",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "ThermoResistor Pt100 L=3.91",
						Unit: "",
					},
					Value{
						From: 17,
						To: 17,
						Desc: "ThermoResistor Pt500 L=3.85",
						Unit: "",
					},
					Value{
						From: 18,
						To: 18,
						Desc: "ThermoResistor Pt500 L=3.91",
						Unit: "",
					},
					Value{
						From: 19,
						To: 19,
						Desc: "ThermoResistor Pt1000 L=3.85",
						Unit: "",
					},
					Value{
						From: 20,
						To: 20,
						Desc: "ThermoResistor Pt1000 L=3.91",
						Unit: "",
					},
					Value{
						From: 21,
						To: 21,
						Desc: "ThermoResistor Cu50 L=4.26",
						Unit: "",
					},
					Value{
						From: 22,
						To: 22,
						Desc: "ThermoResistor Cu50 L=4.28",
						Unit: "",
					},
					Value{
						From: 23,
						To: 23,
						Desc: "ThermoResistor Cu100 L=4.26",
						Unit: "",
					},
					Value{
						From: 24,
						To: 24,
						Desc: "ThermoResistor Cu100 L=4.28",
						Unit: "",
					},
					Value{
						From: 25,
						To: 25,
						Desc: "ThermoResistor Cu500 L=4.26",
						Unit: "",
					},
					Value{
						From: 26,
						To: 26,
						Desc: "ThermoResistor Cu500 L=4.28",
						Unit: "",
					},
					Value{
						From: 27,
						To: 27,
						Desc: "ThermoResistor Cu1000 L=4.26",
						Unit: "",
					},
					Value{
						From: 28,
						To: 28,
						Desc: "ThermoResistor Cu1000 L=4.28",
						Unit: "",
					},
					Value{
						From: 29,
						To: 29,
						Desc: "ThermoResistor Ni100 L=6.17",
						Unit: "",
					},
					Value{
						From: 30,
						To: 30,
						Desc: "ThermoResistor Ni500 L=6.17",
						Unit: "",
					},
					Value{
						From: 31,
						To: 31,
						Desc: "ThermoResistor Ni1000 L=6.17",
						Unit: "",
					},
					Value{
						From: 32,
						To: 32,
						Desc: "ThermoResistor 23",
						Unit: "",
					},
					Value{
						From: 33,
						To: 33,
						Desc: "Voltage 0-1 V range",
						Unit: "",
					},
					Value{
						From: 34,
						To: 34,
						Desc: "Voltage 0-10 V range",
						Unit: "",
					},
					Value{
						From: 35,
						To: 35,
						Desc: "Current 4-20 mA range",
						Unit: "",
					},
					Value{
						From: 36,
						To: 36,
						Desc: "Dry Contact",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Dry contact. High input level, channel 3",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "V/10",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Dry contact. Low input level, channel 3",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "V/10",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Dry contact. Undefined input level, channel 3",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Low level",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "High level",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "Report sending time, channel 3",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "Send report at change of value to the set size, channel 3",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "value/100",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 36,
				Name: "Send the report not more often, than, channel 3",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "ms",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Channel 4",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No sensor",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ThermoPair L type",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ThermoPair J type",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ThermoPair N type",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "ThermoPair K type",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "ThermoPair S type",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "ThermoPair R type",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "ThermoPair B type",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "ThermoPair A1 type",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "ThermoPair A2 type",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "ThermoPair A3 type",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "ThermoPair T type",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "ThermoPair E type",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "ThermoPair E type",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "ThermoResistoristor Pt50 L=3.85",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "ThermoResistor Pt50 L=3.91",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "ThermoResistor Pt100 L=3.85",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "ThermoResistor Pt100 L=3.91",
						Unit: "",
					},
					Value{
						From: 17,
						To: 17,
						Desc: "ThermoResistor Pt500 L=3.85",
						Unit: "",
					},
					Value{
						From: 18,
						To: 18,
						Desc: "ThermoResistor Pt500 L=3.91",
						Unit: "",
					},
					Value{
						From: 19,
						To: 19,
						Desc: "ThermoResistor Pt1000 L=3.85",
						Unit: "",
					},
					Value{
						From: 20,
						To: 20,
						Desc: "ThermoResistor Pt1000 L=3.91",
						Unit: "",
					},
					Value{
						From: 21,
						To: 21,
						Desc: "ThermoResistor Cu50 L=4.26",
						Unit: "",
					},
					Value{
						From: 22,
						To: 22,
						Desc: "ThermoResistor Cu50 L=4.28",
						Unit: "",
					},
					Value{
						From: 23,
						To: 23,
						Desc: "ThermoResistor Cu100 L=4.26",
						Unit: "",
					},
					Value{
						From: 24,
						To: 24,
						Desc: "ThermoResistor Cu100 L=4.28",
						Unit: "",
					},
					Value{
						From: 25,
						To: 25,
						Desc: "ThermoResistor Cu500 L=4.26",
						Unit: "",
					},
					Value{
						From: 26,
						To: 26,
						Desc: "ThermoResistor Cu500 L=4.28",
						Unit: "",
					},
					Value{
						From: 27,
						To: 27,
						Desc: "ThermoResistor Cu1000 L=4.26",
						Unit: "",
					},
					Value{
						From: 28,
						To: 28,
						Desc: "ThermoResistor Cu1000 L=4.28",
						Unit: "",
					},
					Value{
						From: 29,
						To: 29,
						Desc: "ThermoResistor Ni100 L=6.17",
						Unit: "",
					},
					Value{
						From: 30,
						To: 30,
						Desc: "ThermoResistor Ni500 L=6.17",
						Unit: "",
					},
					Value{
						From: 31,
						To: 31,
						Desc: "ThermoResistor Ni1000 L=6.17",
						Unit: "",
					},
					Value{
						From: 32,
						To: 32,
						Desc: "ThermoResistor 23",
						Unit: "",
					},
					Value{
						From: 33,
						To: 33,
						Desc: "Voltage 0-1 V range",
						Unit: "",
					},
					Value{
						From: 34,
						To: 34,
						Desc: "Voltage 0-10 V range",
						Unit: "",
					},
					Value{
						From: 35,
						To: 35,
						Desc: "Current 4-20 mA range",
						Unit: "",
					},
					Value{
						From: 36,
						To: 36,
						Desc: "Dry Contact",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Dry contact. High input level, channel 4",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "V/10",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Dry contact. Low input level, channel 4",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "V/10",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Dry contact. Undefined input level, channel 4",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Low level",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "High level",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Report sending time, channel 4",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "Send report at change of value to the set size, channel 4",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "value/100",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 46,
				Name: "Send the report not more often, than, channel 4",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "ms",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "Channel 5",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No sensor",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ThermoPair L type",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ThermoPair J type",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "ThermoPair N type",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "ThermoPair K type",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "ThermoPair S type",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "ThermoPair R type",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "ThermoPair B type",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "ThermoPair A1 type",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "ThermoPair A2 type",
						Unit: "",
					},
					Value{
						From: 10,
						To: 10,
						Desc: "ThermoPair A3 type",
						Unit: "",
					},
					Value{
						From: 11,
						To: 11,
						Desc: "ThermoPair T type",
						Unit: "",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "ThermoPair E type",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "ThermoPair E type",
						Unit: "",
					},
					Value{
						From: 13,
						To: 13,
						Desc: "ThermoResistoristor Pt50 L=3.85",
						Unit: "",
					},
					Value{
						From: 14,
						To: 14,
						Desc: "ThermoResistor Pt50 L=3.91",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "ThermoResistor Pt100 L=3.85",
						Unit: "",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "ThermoResistor Pt100 L=3.91",
						Unit: "",
					},
					Value{
						From: 17,
						To: 17,
						Desc: "ThermoResistor Pt500 L=3.85",
						Unit: "",
					},
					Value{
						From: 18,
						To: 18,
						Desc: "ThermoResistor Pt500 L=3.91",
						Unit: "",
					},
					Value{
						From: 19,
						To: 19,
						Desc: "ThermoResistor Pt1000 L=3.85",
						Unit: "",
					},
					Value{
						From: 20,
						To: 20,
						Desc: "ThermoResistor Pt1000 L=3.91",
						Unit: "",
					},
					Value{
						From: 21,
						To: 21,
						Desc: "ThermoResistor Cu50 L=4.26",
						Unit: "",
					},
					Value{
						From: 22,
						To: 22,
						Desc: "ThermoResistor Cu50 L=4.28",
						Unit: "",
					},
					Value{
						From: 23,
						To: 23,
						Desc: "ThermoResistor Cu100 L=4.26",
						Unit: "",
					},
					Value{
						From: 24,
						To: 24,
						Desc: "ThermoResistor Cu100 L=4.28",
						Unit: "",
					},
					Value{
						From: 25,
						To: 25,
						Desc: "ThermoResistor Cu500 L=4.26",
						Unit: "",
					},
					Value{
						From: 26,
						To: 26,
						Desc: "ThermoResistor Cu500 L=4.28",
						Unit: "",
					},
					Value{
						From: 27,
						To: 27,
						Desc: "ThermoResistor Cu1000 L=4.26",
						Unit: "",
					},
					Value{
						From: 28,
						To: 28,
						Desc: "ThermoResistor Cu1000 L=4.28",
						Unit: "",
					},
					Value{
						From: 29,
						To: 29,
						Desc: "ThermoResistor Ni100 L=6.17",
						Unit: "",
					},
					Value{
						From: 30,
						To: 30,
						Desc: "ThermoResistor Ni500 L=6.17",
						Unit: "",
					},
					Value{
						From: 31,
						To: 31,
						Desc: "ThermoResistor Ni1000 L=6.17",
						Unit: "",
					},
					Value{
						From: 32,
						To: 32,
						Desc: "ThermoResistor 23",
						Unit: "",
					},
					Value{
						From: 33,
						To: 33,
						Desc: "Voltage 0-1 V range",
						Unit: "",
					},
					Value{
						From: 34,
						To: 34,
						Desc: "Voltage 0-10 V range",
						Unit: "",
					},
					Value{
						From: 35,
						To: 35,
						Desc: "Current 4-20 mA range",
						Unit: "",
					},
					Value{
						From: 36,
						To: 36,
						Desc: "Dry Contact",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 51,
				Name: "Dry contact. High input level, channel 5",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "V/10",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "Dry contact. Low input level, channel 5",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "V/10",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 53,
				Name: "Dry contact. Undefined input level, channel 5",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Low level",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "High level",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 54,
				Name: "Report sending time, channel 5",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 55,
				Name: "Send report at change of value to the set size, channel 5",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "value/100",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 56,
				Name: "Send the report not more often, than, channel 5",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "ms",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011501000201() *Device{
	return &Device{
		Brand: "Z-Wave",
		Product: "SmokeSensor/Siren",
		Description: "\n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0100",
		ProductID: "0201",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0025,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Siren Alarm Sequence Interval",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 129,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Siren Alarm Tone Length ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Define the total length of the sound.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Value of On-Command",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "Define the desired value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Value of Off-Command",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "Define the desired value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Status of automated meshing of Smoke Alarms",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Status of automated meshing of Battery Alarms",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "inactive ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "active",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011501000400() *Device{
	return &Device{
		Brand: "Stagetronics",
		Product: "Z-Weather",
		Description: "\n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0100",
		ProductID: "0400",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "6",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x009b,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0089,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Threshold for too much wind",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 30,
						Desc: "Define a treshold.",
						Unit: "m/s",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Threshold for twilight",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Define a treshold.",
						Unit: "%",
					},
				},
			},
		},
	}
}
func New011501000401() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Dual Paddle Wall Controller 1.4",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0100",
		ProductID: "0401",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Button 1 and 3 pair mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Button 2 and 4 pair mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Action on group 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Action on group 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Action on group 3",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Action on group 4",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Typical click timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 10,
						To: 100,
						Desc: "in 10ms units",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Send unsolicited Battery Report on Wake Up",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To same node as wake up notification",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Broadcast to neighbours",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "LED confirmation mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No confirmations",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Confirm button press",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Confirm button press and delivery",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011501100001() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Z-Uno",
		Description: "\n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0110",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "7",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "4",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Debugging",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "LED",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011502000001() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "iTemp Temperature Sensor",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0200",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Binary sensor mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Basic On on connected, Basic Off on diconnected",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Basic Off on connected, Basic On on diconnected",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 1,
				Name: "Binary sensor active",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Maximum deviation for thermostat",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 50,
						Desc: "in 0.1 C units",
						Unit: "0.1 C",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Treshold for temperature",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 5,
						To: 50,
						Desc: "in 0.1 C units",
						Unit: "0.1 C",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Repeat thermostat ON",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "send only once",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "each Nth wakeup time",
						Unit: "4 min",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Send unsolicited Battery Report on Wake Up",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To wakeup node",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "To broadcast",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Unsolicited temperature report period",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "each Nth wakeup time",
						Unit: "4 min",
					},
				},
			},
		},
	}
}
func New011502010001() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Temperature Sensor 2.1",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0201",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Binary sensor active",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Binary sensor mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Basic On on connected, Basic Off on diconnected",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Basic Off on connected, Basic On on diconnected",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Send Unsolicited temperature report",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 5,
						To: 50,
						Desc: "in 0.1 °C",
						Unit: "0.1 °C",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Maximum deviation for thermostat",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 50,
						Desc: "in 0.1 °C",
						Unit: "0.1 °C",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Repeat thermostat ON",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send only once",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "each Nth wakeup time",
						Unit: "4 min",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Unsolicited temperature report period",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "each Nth wakeup time",
						Unit: "4 min",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Temperature shift",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 127,
						To: 255,
						Desc: "in 0.1 °C",
						Unit: "0.1 °C",
					},
					Value{
						From: 0,
						To: 127,
						Desc: "in 0.1 °C",
						Unit: "0.1 °C",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Send unsolicited Battery Report on Wake Up",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To wakeup node",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "To broadcast",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011502010002() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Thermostat 2.1",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0201",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Binary sensor active",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Binary sensor mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Basic On on connected, Basic Off on diconnected",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Basic Off on connected, Basic On on diconnected",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Send Unsolicited temperature report",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 5,
						To: 50,
						Desc: "in 0.1 °C",
						Unit: "0.1 °C",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Maximum deviation for thermostat",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 50,
						Desc: "in 0.1 °C",
						Unit: "0.1 °C",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Repeat thermostat ON",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send only once",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "each Nth wakeup time",
						Unit: "4 min",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Unsolicited temperature report period",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "each Nth wakeup time",
						Unit: "4 min",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Temperature shift",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 128,
						To: 255,
						Desc: "in 0.1 °C",
						Unit: "0.1 °C",
					},
					Value{
						From: 0,
						To: 127,
						Desc: "in 0.1 °C",
						Unit: "0.1 °C",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Send unsolicited Battery Report on Wake Up",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To wakeup node",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "To broadcast",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011502010003() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Binary Sensor 2.1",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "0201",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Binary sensor active",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Binary sensor mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Basic On on connected, Basic Off on diconnected",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Basic Off on connected, Basic On on diconnected",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Send Unsolicited temperature report",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 5,
						To: 50,
						Desc: "in 0.1 °C",
						Unit: "0.1 °C",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Maximum deviation for thermostat",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 50,
						Desc: "in 0.1 °C units",
						Unit: "0.1 °C",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Repeat thermostat ON",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Send only once",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "each Nth wakeup time",
						Unit: "4 min",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Unsolicited temperature report period",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "each Nth wakeup time",
						Unit: "4 min",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Temperature shift",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "in 0.1 °C",
						Unit: "0.1 °C",
					},
					Value{
						From: 127,
						To: 255,
						Desc: "in 0.1 °C",
						Unit: "0.1 °C",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Send unsolicited Battery Report on Wake Up",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To wakeup node",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "To broadcast",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011510000001() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Flush-Mountable Switch v1.8",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "1000",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x002d,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Show switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Night mode (inverted switch state)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Operated by Indicator Command Class",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically switch off after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF off command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on if load is off else switch off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "What to do on button Down press",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On if load is Off, else switch Off",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Switch on dimming by buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Restore switch state after power cycle",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No, turn off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Typical click timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Switch by buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "By single press and hold",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "By double press and press-hold",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Action on button single press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Action on button double press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011510000002() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Flush-Mountable Dimmer v1.8",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "1000",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x002d,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Show switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Night mode (inverted switch state)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Operated by Indicator Command Class",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically switch off after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF off command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on if load is off else switch off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "What to do on button Down press",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On if load is Off, else switch Off",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Ignore start level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Dimming speed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Instantly",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Dimming long speed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Set maximum light level on On click",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "If already On",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Always",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Baby Dimming time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "in minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Target dimming level for Baby Dimming",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Typical click timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Switch by buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "By single press and hold",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "By double press and press-hold",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Action on button single press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Action on button double press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Limit minimal light level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 95,
						Desc: "Level limit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Limit maximal light level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Work as switch: use off and maximal level",
						Unit: "",
					},
					Value{
						From: 10,
						To: 99,
						Desc: "Level limit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Switch On on a defined level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Use previous light level",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define light level",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 51,
				Name: "Pause before pulse",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 60,
						Desc: "",
						Unit: "10/156 ms",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "Pause after pulse",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 60,
						Desc: "",
						Unit: "10/156 ms",
					},
				},
			},
			&parameter{
				ID: 53,
				Name: "Pulse width",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 20,
						Desc: "",
						Unit: "10/156 ms",
					},
				},
			},
			&parameter{
				ID: 54,
				Name: "Pulse type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Long pulse",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Short pulse",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011510000003() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Flush-Mountable Blind Control v1.8",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "1000",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x002d,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Show working state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Show idle state",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Show if not closed",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Operated by Indicator Command Class",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically open or close after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF close command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Close",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Open",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Open if closed else close",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "What to do on button Down press",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Close",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Open if closed else close",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Open",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Full close time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Keep in permanent motion",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Full open time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Keep in permanent motion",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Node Id of the blocking device",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 232,
						Desc: "Node Id",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "On which command from blocking node to enable the protection",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on On",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "on Off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Stop or Revert if opposite button is pressed",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Stop (by buttons and Binary)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Stop (by buttons, Binary and Basic)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Revert",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Invert open and close relays",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Typical click timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Switch by buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "By single press and hold",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "By double press and press-hold",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Action on button single press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Action on button double press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Action on Auto open or close function",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Close blinds",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Open blinds",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011510000004() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Wall Controller v1.1",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "1000",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 10,
				Name: "Typical click timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Action on button single press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On, Off and dim using Basic Set",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Action on button double press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled (don&#39;t wait for double click)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On, Off and dim using Basic Set",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Send unsolicited Battery Report on Wake Up",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To same node as wake up notification",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Broadcast to neighbours",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011510000005() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Wall Controller 4",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "1000",
		ProductID: "0005",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x002d,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Buttons pair mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Action on group 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Action on group 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Typical click timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Send unsolicited Battery Report on Wake Up",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To same node as wake up notification",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Broadcast to neighbours",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "LED confirmation mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No confirmations",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Confirm button press",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Confirm button press and delivery",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011510000009() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Secure Switch (TRIAC)",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "1000",
		ProductID: "0009",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0025,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x002c,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x002d,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0032,
				InNIF: "false",
				Secure: true,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0059,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0077,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0085,
				InNIF: "false",
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0087,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x008e,
				InNIF: "false",
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Automatically switch off",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF off command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on if load is off else switch off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Ignore start level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Dimming speed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Instantly",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Dimming long speed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Set maximum light level on On click",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "If already On",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Always",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Baby Dimming time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "in minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Target dimming level for Baby Dimming",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Switch by buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "By single press and hold",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "By double press and press-hold",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Action on button single press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Action on button double press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "What to do on button Down press",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On if load is Off, else switch Off",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Limit minimal light level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 95,
						Desc: "Level limit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Limit maximal light level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Work as switch: use off and maximal level",
						Unit: "",
					},
					Value{
						From: 10,
						To: 99,
						Desc: "Level limit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Switch On on a defined level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Use previous light level",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define light level",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Energy consumption",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 300,
						Desc: "W",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 55,
				Name: "Dimmer/relay mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Dimmer mode",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Relay mode",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011510000100() *Device{
	return &Device{
		Brand: "",
		Product: "Double Switch",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "1000",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Show switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Night mode (inverted switch state)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically switch first channel off after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Automatically switch second channel off after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF first channel off command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on if load is off else switch off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "What to do on RF second channel off command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on if load is off else switch off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "What to do on button Down press (for both channels)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On if load is Off, else switch Off",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Switch on/off by holding buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes (only for the first channel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Yes (only for the second channel)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Yes (for both channels)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Restore switch state after power cycle",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No, turn off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes (only for the first channel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Yes (only for the second channel)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Yes (for both channels)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Switch by buttons (first channel)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "By single press and hold",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "By double press and press-hold",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Switch by buttons (second channel)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "By single press and hold",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "By double press and press-hold",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Action on button single press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Send Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Action on button double press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Send Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Energy consumption for first channel",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1800,
						Desc: "Watts",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Energy consumption for second channel",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1800,
						Desc: "Watts",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011510000200() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Flush-Mountable Blind Control v1.8",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "1000",
		ProductID: "0200",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0025,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x002d,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0059,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0070,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0075,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0085,
				InNIF: "false",
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				InNIF: "false",
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Show working state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Show idle state",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Show if not closed",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically open or close after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF close command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Close",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Open",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Open if closed else close",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "What to do on button Down press",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Close",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Open if closed else close",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Open",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Full close time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Keep in permanent motion",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Full open time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Keep in permanent motion",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Node Id of the blocking device",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 232,
						Desc: "Node Id",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "On which command from blocking node to enable the protection",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on On",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "on Off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Stop or Revert if opposite button is pressed",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Stop (by buttons and Binary)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Stop (by buttons, Binary and Basic)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Revert",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Invert open and close relays",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Typical click timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Switch by buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "By single press and hold",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "By double press and press-hold",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Action on button single press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Action on button double press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Action on Auto open or close function",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Close blinds",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Open blinds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Send intermediate value of the opening level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 10,
						To: 50,
						Desc: "%",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011510000300() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "RCD",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "1000",
		ProductID: "0300",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 10,
				Name: "Command to Control Group №1 (association group 2)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Command to Control Group №2 (association group 3)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Command to Control Group №3 (association group 4)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Command to Control Group №4 (association group 5)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Command to Control Group №5 (association group 6)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Command to Control Group №6 (association group 7)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Command to Control Group №7 (association group 8)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Command to Control Scene №1 (association group 9)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Command to Control Scene №2 (association group 10)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Command to Control Scene №3 (association group 11)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Command to Control group All On/Off (association group 12)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011510001001() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Switch Insert S500",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "1000",
		ProductID: "1001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Show switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Night mode (inverted switch state)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically switch after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF off command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on if load is off else switch off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Switch on/off by holding buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Restore switch state after power cycle",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No, turn off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Switch by buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "By single press and hold",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "By double press and press-hold",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Action on button single press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Action on button double press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "What to do on button Down press",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On if load is Off, else switch Off",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Energy consumption",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1800,
						Desc: "Watts",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011510001003() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Blind Control Insert S500",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "1000",
		ProductID: "1003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x005e,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0025,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x002d,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0059,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0070,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0075,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0085,
				InNIF: "false",
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				InNIF: "false",
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Show working state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Show idle state",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Show if not closed",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically open or close after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF close command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Close",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Open",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Open if closed else close",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "What to do on button Down press",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Close",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Open if closed else close",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Open",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Full close time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Keep in permanent motion",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "milliseconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Full open time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Keep in permanent motion",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "milliseconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Node Id of the blocking device",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 232,
						Desc: "Node Id",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "On which command from blocking node to enable the protection",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on On",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "on Off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Stop or Revert if opposite button is pressed",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Stop (by buttons and Binary)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Stop (by buttons, Binary and Basic)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Revert",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Invert open and close relays",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Typical click timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Switch by buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "By single press and hold",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "By double press and press-hold",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Action on button single press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Action on button double press or hold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Action on Auto open or close function",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Close blinds",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Open blinds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Send intermediate value of the opening level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 5,
						To: 50,
						Desc: "%",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011511000001() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Plug-in Switch",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "1100",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Show switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Night mode (inverted switch state)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Operated by Indicator Command Class",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically switch off after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF off command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on if load is off else switch off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Restore switch state after power cycle",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No, turn off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011511000002() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "Dimmer Plug v1.0",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0115",
		ProductType: "1100",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Show switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Night mode (inverted switch state)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Operated by Indicator Command Class",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically switch off after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF off command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on if load is off else switch off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Ignore start level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Speed for fast dimming",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Instantly",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Speed for slow dimming",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Behavior on &#39;Switch On&#39; ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "last dim level",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "maximum dim level when already turned on",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Always maximum dim level",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Baby Dimming time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "in minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Target dimming level for Baby Dimming",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Typical click timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Limit minimal light level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 95,
						Desc: "Level limit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Limit maximal light level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Work as switch: use off and maximal level",
						Unit: "",
					},
					Value{
						From: 10,
						To: 99,
						Desc: "Level limit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Dim Level on &#39;Switch On&#39;",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Use previous light level",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define light level in %",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 51,
				Name: "Pause before pulse",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 60,
						Desc: "",
						Unit: "10/156 ms",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "Pause after pulse",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 60,
						Desc: "",
						Unit: "10/156 ms",
					},
				},
			},
			&parameter{
				ID: 53,
				Name: "Pulse width",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 20,
						Desc: "",
						Unit: "10/156 ms",
					},
				},
			},
			&parameter{
				ID: 54,
				Name: "Pulse type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Long pulse",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Short pulse",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011600010001() *Device{
	return &Device{
		Brand: "Chromagic",
		Product: "Z-Wave Motion Detector - 300 Series",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0116",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0084,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Basic Set level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Enabling/Disabling Sensor Detecting Function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Sensitivity Level (PIR sensor only)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 10,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Re-trigger Interval Setting (PIR sensor only)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 5,
						To: 3600,
						Desc: "",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Lux Level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "On-Off Duration",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 5,
						To: 3600,
						Desc: "",
						Unit: "s",
					},
				},
			},
		},
	}
}
func New011600020001() *Device{
	return &Device{
		Brand: "Chromagic",
		Product: "Z-Wave Magnetic Detector - 300 Series",
		Description: "\n            \n          ",

		ManufacturerID: "0116",
		ProductType: "0002",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0084,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011600100001() *Device{
	return &Device{
		Brand: "Chromagic",
		Product: "Z-Wave Remote Botton (EU) - 300 Series",
		Description: "\n            \n          ",

		ManufacturerID: "0116",
		ProductType: "0010",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011600110001() *Device{
	return &Device{
		Brand: "Chromagic",
		Product: "Z-Wave In Wall Switch (EU) - 300 Series",
		Description: "\n            \n          ",

		ManufacturerID: "0116",
		ProductType: "0011",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011600110002() *Device{
	return &Device{
		Brand: "Chromagic",
		Product: "Z-Wave In Wall Switch - 300 Series",
		Description: "\n            \n          ",

		ManufacturerID: "0116",
		ProductType: "0011",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011700010080() *Device{
	return &Device{
		Brand: "Abilia Andromeda Socket",
		Product: "On/Off Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0117",
		ProductType: "0001",
		ProductID: "0080",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011800030002() *Device{
	return &Device{
		Brand: "TKBHOME",
		Product: "Switch ON/OFF",
		Description: "\n            \n          ",

		ManufacturerID: "0118",
		ProductType: "0003",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011800030008() *Device{
	return &Device{
		Brand: "TKBHOME",
		Product: "Switch Dimmer",
		Description: "\n            \n          ",

		ManufacturerID: "0118",
		ProductType: "0003",
		ProductID: "0008",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "On/Off Knob",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The blue indicator will turn on and the load plugged into the module will turn off. ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Setting is changed.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011800040002() *Device{
	return &Device{
		Brand: "TKBHOME",
		Product: "Meter Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0118",
		ProductType: "0004",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Change the state of indicator light",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED indicator will be &#34;On&#34;",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED indicator will be &#34;Off&#34;",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Memory function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "memory function is not open",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "memory function is open",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Watt Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "example: 5*720s = 3600s = 1 hour",
						Unit: "s",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "KWH Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "example: 6*10min = 1 hour",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Threshold of Watt for Load Caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 10,
						To: 3000,
						Desc: "",
						Unit: "Watt",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Threshold for KWH for Load Caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 10000,
						Desc: "",
						Unit: "Kwh",
					},
				},
			},
		},
	}
}
func New011801010103() *Device{
	return &Device{
		Brand: "",
		Product: "TZ68",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0118",
		ProductType: "0101",
		ProductID: "0103",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED- Behavior",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "blue indicates off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blue indicates on",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011801021020() *Device{
	return &Device{
		Brand: "TKBHOME",
		Product: "TZ66D",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0118",
		ProductType: "0102",
		ProductID: "1020",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Start Level Bit",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ignore",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "dont ignore",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Suspend Group 4",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "yes",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "no",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Night Light",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED blinks on activity",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Night Light active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Invert Switch",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "dont invert",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "invert",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "LED Transmission Indication",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no flicker",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "flicker all time of data transmission",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "flicker for one second only",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Enable Shade Control Group 3",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Enable Shade Control Group 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Poll Group 2 Interval",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: " Interval",
						Unit: "2",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Poll Group 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "dont poll",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "poll",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011802020611() *Device{
	return &Device{
		Brand: "",
		Product: "TZ67",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0118",
		ProductType: "0202",
		ProductID: "0611",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED-Behavior",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "blue indicates off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blue indicates on",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011808080808() *Device{
	return &Device{
		Brand: "",
		Product: "TZ65S",
		Description: "\n            \n          ",

		ManufacturerID: "0118",
		ProductType: "0808",
		ProductID: "0808",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0026,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Start Level Bit",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ignore",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "dont ignore",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Night Light",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED blinks on activity",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Night Light active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Invert Switch",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "dont invert",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "invert",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "LED Transmission Indication",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no flicker",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "flicker all time of data transmission",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "flicker for one second only",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011a01010101() *Device{
	return &Device{
		Brand: "ENERWAVE",
		Product: "Z-Wave On/Off Switch",
		Description: "\n            \n          ",

		ManufacturerID: "011a",
		ProductType: "0101",
		ProductID: "0101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Configure LED light state",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED state is contrary with relay state",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED state is as same as relay state",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Configure button toggle",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The load connected to ZW15S will be\nturned on",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The load connected to ZW15S can be turned off",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011a01010102() *Device{
	return &Device{
		Brand: "ENERWAVE",
		Product: "Plug-in Appliance Module",
		Description: "\n            \n          ",

		ManufacturerID: "011a",
		ProductType: "0101",
		ProductID: "0102",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Configure LED State",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED state is as same as relay state",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED state is contrary with relay state",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011a01010103() *Device{
	return &Device{
		Brand: "ENERWAVE",
		Product: "Z-Wave Duplex Receptacle ",
		Description: "\n            \n          ",

		ManufacturerID: "011a",
		ProductType: "0101",
		ProductID: "0103",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011a01010603() *Device{
	return &Device{
		Brand: "ENERWAVE",
		Product: "Smart Lighting Control Module(RSM2)",
		Description: "\n            \n            \n          ",

		ManufacturerID: "011a",
		ProductType: "0101",
		ProductID: "0603",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "Unsolicited Report Configuration",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 232,
						Desc: "Other controller nodeID",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Send broadcast",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011a01020201() *Device{
	return &Device{
		Brand: "ENERWAVE ",
		Product: "Z-Wave Dimmer Switch",
		Description: "\n            \n          ",

		ManufacturerID: "011a",
		ProductType: "0102",
		ProductID: "0201",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Configure LED light state",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED state is contrary with relay state",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED state is as same as relay state",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Configure button toggle",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The load connected to ZW15S will be\nturned on",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The load connected to ZW15S can be turned off",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011a01020202() *Device{
	return &Device{
		Brand: "ENERWAVE",
		Product: "Plug-in Lamp Dimming Module",
		Description: "\n            \n          ",

		ManufacturerID: "011a",
		ProductType: "0102",
		ProductID: "0202",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011a01110101() *Device{
	return &Device{
		Brand: "Enerwave",
		Product: "PLUG-IN SMART METER APPLIANCE MODULE",
		Description: "\n            \n          ",

		ManufacturerID: "011a",
		ProductType: "0111",
		ProductID: "0101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0027,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Power on, LED off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Power on, LED on",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011a01110105() *Device{
	return &Device{
		Brand: "Enerwave",
		Product: "IN-Wall Smart Meter TR Duplex Receptacle",
		Description: "\n            \n          ",

		ManufacturerID: "011a",
		ProductType: "0111",
		ProductID: "0105",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Synchronization",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Power on, LED off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Power on, LED on",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011a01110201() *Device{
	return &Device{
		Brand: "Enerwave",
		Product: "In-wall Smart Meter Dimmer Switch",
		Description: "\n            \n          ",

		ManufacturerID: "011a",
		ProductType: "0111",
		ProductID: "0201",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "synchronization of load power and LED indicator",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Power on, LED off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Power on, LED on",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011a01110202() *Device{
	return &Device{
		Brand: "Enerwave",
		Product: " Plug-in Smart Meter Dimmer Module",
		Description: "\n            \n          ",

		ManufacturerID: "011a",
		ProductType: "0111",
		ProductID: "0202",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "synchronization of outlet power and LED indicator",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Power on, LED off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Power on, LED on",
						Unit: "",
					},
				},
			},
		},
	}
}
func New011a01110605() *Device{
	return &Device{
		Brand: "Enerwave",
		Product: "Smart Single Relay Switch Module",
		Description: "\n            \n          ",

		ManufacturerID: "011a",
		ProductType: "0111",
		ProductID: "0605",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0027,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011f00010001() *Device{
	return &Device{
		Brand: "Ingersoll Rand Z-Wave PIR Motion Sensor",
		Product: "Ecolink Z-Wave PIR Motion Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "011f",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011f00010002() *Device{
	return &Device{
		Brand: "Ingersoll Rand Z-Wave Door/Window Sensor",
		Product: "Ecolink Z-Wave Door/Window Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "011f",
		ProductType: "0001",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New011f00010003() *Device{
	return &Device{
		Brand: "Ingersoll Rand Z-Wave Garage Door Sensor",
		Product: "Ecolink Z-Wave Garage Door Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "011f",
		ProductType: "0001",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New012100010001() *Device{
	return &Device{
		Brand: "IBR-ZWAVE",
		Product: "I-Bridge Z-Wave Controller",
		Description: "\n            \n          ",

		ManufacturerID: "0121",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New012200010001() *Device{
	return &Device{
		Brand: "Miyakawa Electric Works LTD",
		Product: "CT type electric power measuring instrument",
		Description: "\n            \n          ",

		ManufacturerID: "0122",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0032,
			},
			&CommandClass{
				ID: 0x003d,
			},
			&CommandClass{
				ID: 0x008b,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New012300000000() *Device{
	return &Device{
		Brand: "BUFFALO",
		Product: "HA Dongle",
		Description: "\n            \n          ",

		ManufacturerID: "0123",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
		},
		Parameters: []*parameter{
		},
	}
}
func New012300010000() *Device{
	return &Device{
		Brand: "",
		Product: "Smart CONNECT",
		Description: "\n            \n          ",

		ManufacturerID: "0123",
		ProductType: "0001",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New012300010001() *Device{
	return &Device{
		Brand: "",
		Product: "Smart-CONNECT調光器Z-Waveタイプ",
		Description: "\n            \n          ",

		ManufacturerID: "0123",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Power On Illuminace Level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Dimming Level",
						Unit: "",
					},
				},
			},
		},
	}
}
func New012300020000() *Device{
	return &Device{
		Brand: "Iwatsu",
		Product: "Smart-CONNECT 灯具内蔵型調光制御ユニット",
		Description: "\n            \n          ",

		ManufacturerID: "0123",
		ProductType: "0002",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Illuminance",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define the initial illuminance value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Dimming Duration",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Define the dimming duration.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "PWM Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Normal mode",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Inverted mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Tag ID",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "Define the Tag ID.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New012301020102() *Device{
	return &Device{
		Brand: "",
		Product: "Smart-CONNECT NE-4CT-2P",
		Description: "\n            \n          ",

		ManufacturerID: "0123",
		ProductType: "0102",
		ProductID: "0102",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New012301030103() *Device{
	return &Device{
		Brand: "",
		Product: "Smart-CONNECT NE-4CT",
		Description: "\n            \n          ",

		ManufacturerID: "0123",
		ProductType: "0103",
		ProductID: "0103",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New012301040104() *Device{
	return &Device{
		Brand: "",
		Product: "CTユニット",
		Description: "\n            \n          ",

		ManufacturerID: "0123",
		ProductType: "0104",
		ProductID: "0104",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Parameter 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New012303010001() *Device{
	return &Device{
		Brand: "",
		Product: "Smart-CONNECT人感センサZ-Waveタイプ",
		Description: "\n            \n          ",

		ManufacturerID: "0123",
		ProductType: "0301",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New012306010001() *Device{
	return &Device{
		Brand: "",
		Product: "Smart-CONNECT照度センサZ-Waveタイプ",
		Description: "\n            \n          ",

		ManufacturerID: "0123",
		ProductType: "0601",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0091,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New012380000000() *Device{
	return &Device{
		Brand: "",
		Product: "Smart-BRIDGE",
		Description: "\n            \n          ",

		ManufacturerID: "0123",
		ProductType: "8000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0091,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New012380000001() *Device{
	return &Device{
		Brand: "",
		Product: "ゲートウェイユニット",
		Description: "\n            \n          ",

		ManufacturerID: "0123",
		ProductType: "8000",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0091,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New012600010006() *Device{
	return &Device{
		Brand: "",
		Product: "Jupiter Hub",
		Description: "\n            \n          ",

		ManufacturerID: "0126",
		ProductType: "0001",
		ProductID: "0006",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New012800000000() *Device{
	return &Device{
		Brand: "Eneco Meter Adapter",
		Product: "ED2.0 Meter Adapter",
		Description: "\n            \n          ",

		ManufacturerID: "0128",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008b,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
			},
			&CommandClass{
				ID: 0x003c,
			},
			&CommandClass{
				ID: 0x003d,
			},
			&CommandClass{
				ID: 0x003e,
			},
			&CommandClass{
				ID: 0x0056,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 0,
				Name: "Gas Metering",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DISABLED: the gas metering is disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ENABLED: the gas metering is enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 1,
				Name: "Gas Meter resolution",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 2,
				Name: "Electricity metering",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "DISABLED: the electricity metering is disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ENABLED: the electricity metering is enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Electricity meter resolution",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
		},
	}
}
func New012801280000() *Device{
	return &Device{
		Brand: "Eneco Display",
		Product: "ED2.0 Display",
		Description: "\n            \n          ",

		ManufacturerID: "0128",
		ProductType: "0128",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
		},
		Parameters: []*parameter{
		},
	}
}
func New012900010000() *Device{
	return &Device{
		Brand: "Yale",
		Product: "Yale Real Living Cap-Touch Lever Lock",
		Description: "\n            \n          ",

		ManufacturerID: "0129",
		ProductType: "0001",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0086,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0071,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0080,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0070,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0062,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x004c,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0075,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x004e,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x008a,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008b,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0063,
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Audio Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Silent",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Low",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "High",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Auto Relock",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "auto relock is OFF",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "auto relock is ON",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Re-lock Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Wrong Code Entry Limit",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Language",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "English",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Spanish",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "French",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Shutdown Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Operating Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Normal Mode",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Vacation Mode - all user codes disabled",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Privacy Mode - all user codes disabled and RF Lock/Unlock disabled",
						Unit: "",
					},
				},
			},
		},
	}
}
func New012900020000() *Device{
	return &Device{
		Brand: "Yale",
		Product: "Yale Real Living Cap-Touch Deadbolt",
		Description: "\n            \n          ",

		ManufacturerID: "0129",
		ProductType: "0002",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0086,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0071,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0085,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0080,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0070,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0062,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x004c,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0075,
				InNIF: "false",
				Secure: true,
				Version: "2",
			},
			&CommandClass{
				ID: 0x004e,
				InNIF: "false",
				Secure: true,
				Version: "3",
			},
			&CommandClass{
				ID: 0x008a,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x008b,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0063,
				InNIF: "false",
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Audio Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Silent",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Low",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "High",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Auto Relock",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "auto relock is OFF",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "auto relock is ON",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Re-lock Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Wrong Code Entry Limit",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Language",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "English",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Spanish",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "French",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Shutdown Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Operating Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Normal Mode",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Vacation Mode - all user codes disabled",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Privacy Mode - all user codes disabled and RF Lock/Unlock disabled",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013000010001() *Device{
	return &Device{
		Brand: "Quby",
		Product: "QEDII",
		Description: "\n            \n          ",

		ManufacturerID: "0130",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x007a,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x003e,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x008b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New013000020000() *Device{
	return &Device{
		Brand: "Quby",
		Product: "Energy Meter Reader",
		Description: "\n            \n          ",

		ManufacturerID: "0130",
		ProductType: "0002",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x008b,
			},
			&CommandClass{
				ID: 0x003c,
			},
			&CommandClass{
				ID: 0x003d,
				Version: "2",
			},
			&CommandClass{
				ID: 0x003e,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Analog gas/heat port mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Gas mode is enabled.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Heat mode is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Analog gas/heat port resolution ",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 120,
						To: 40000,
						Desc: "Define the parameter.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Analog electricity port mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Electricity import is enabled.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Electricity export is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Analog electricity port resolution ",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 120,
						To: 40000,
						Desc: "Define the parameter.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 255,
				Name: "Restart device",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Restart entire device",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Restart metering chip",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013100010001() *Device{
	return &Device{
		Brand: "Zipato",
		Product: "Zipabox",
		Description: "\n            \n          ",

		ManufacturerID: "0131",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0033,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				Version: "7",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0035,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				Version: "3",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New013100010002() *Device{
	return &Device{
		Brand: "Zipato",
		Product: "Zipabox",
		Description: "\n            \n          ",

		ManufacturerID: "0131",
		ProductType: "0001",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0033,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				Version: "7",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0035,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				Version: "3",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New013100010003() *Device{
	return &Device{
		Brand: "Zipato",
		Product: "Zipabox",
		Description: "\n            \n          ",

		ManufacturerID: "0131",
		ProductType: "0001",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0033,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				Version: "7",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0035,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				Version: "3",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New013100020002() *Device{
	return &Device{
		Brand: "Zipato",
		Product: "Zipato RGBW bulb",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0131",
		ProductType: "0002",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0033,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Color temperature",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Color temperature",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Shock sensor sensitivity",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 31,
						Desc: "Shock sensor sensitivity",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013730010002() *Device{
	return &Device{
		Brand: "Followgood",
		Product: "Binary Power Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0137",
		ProductType: "3001",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New013800010002() *Device{
	return &Device{
		Brand: "First Alert",
		Product: "Smoke and Carbon and Monoxide Alarm",
		Description: "\n            \n          ",

		ManufacturerID: "0138",
		ProductType: "0001",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "when set to 1 causes the device to send double\nalarm messages",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New013b10001828() *Device{
	return &Device{
		Brand: "HXS",
		Product: "Android Home Station",
		Description: "\n            \n            \n          ",

		ManufacturerID: "013b",
		ProductType: "1000",
		ProductID: "1828",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0028,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New013c00000000() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Z-Wave Dongle",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
		},
		Parameters: []*parameter{
		},
	}
}
func New013c00010001() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Smart Energy Plug In Switch PAN11-1",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Watt Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "720 * 5s = 3600s = 1 hour",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "KWH Meter Report  Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "6 * 10min = 1 hour",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Threshold of Watt for Load caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 10,
						To: 3000,
						Desc: "wattage threshold value",
						Unit: "Watt",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Threshold of KWh for Load caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 10000,
						Desc: "KWh threshold value",
						Unit: "KWh",
					},
				},
			},
		},
	}
}
func New013c00010003() *Device{
	return &Device{
		Brand: "Philio",
		Product: "In-Wall Dual relay(1 way) Switch Module",
		Description: "\n            \n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0001",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0032,
			},
			&CommandClass{
				ID: 0x0060,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "W meter report period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32000,
						Desc: "seconds",
						Unit: "*5",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "KWH meter report period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32000,
						Desc: "seconds",
						Unit: "*5 ",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Selected end point",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Relay 1 and Relay 2",
						Unit: "",
					},
					Value{
						From: 2,
						To: 3,
						Desc: "Relay 1  ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 4,
						Desc: "Relay 2",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Edge or Pulse mode or Edge-Togle mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Edge Mode",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Toggle Mode",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Edge/Toggle Mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Threshold of Watt for Load Caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 1500,
						Desc: "W",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Threshold of KWH for Load Caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 10000,
						Desc: "kWh",
						Unit: "kWh",
					},
				},
			},
		},
	}
}
func New013c00010004() *Device{
	return &Device{
		Brand: "Philio",
		Product: "In Wall Dual Relay (1 Way) Switch Module",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0001",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Selected end point",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Relay 1 and Relay 2",
						Unit: "",
					},
					Value{
						From: 2,
						To: 3,
						Desc: "Relay 1",
						Unit: "",
					},
					Value{
						From: 3,
						To: 4,
						Desc: "Relay 2",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Edge or Pulse mode or Edge-Togle mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Edge Mode",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Toggle Mode",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Edge/Toggle Mode",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013c00010006() *Device{
	return &Device{
		Brand: "Philio",
		Product: "In-Wall Roller Shutter Controller PAN08",
		Description: "\n            \n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0001",
		ProductID: "0006",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Watt Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "5*720s=3600s=1 hour",
						Unit: "5s",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "KWH Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "6*10min= 1 hour",
						Unit: "10min",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Threshol d of Watt for Load Caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 10,
						To: 1100,
						Desc: "",
						Unit: "1 W",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Threshol d of KWH for Load Caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 10000,
						Desc: "",
						Unit: "1 KWh",
					},
				},
			},
		},
	}
}
func New013c00010010() *Device{
	return &Device{
		Brand: "Philio",
		Product: "In Wall Single relay(1 way) switch module ",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0001",
		ProductID: "0010",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0025,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0020,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0027,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0075,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Edge or Pulse mode or Edge-Toggle mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "1：Edge mode",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2：Pulse mode",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "3：Edge-Toggle\nmode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Switch state mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 : Switch Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 : Last Switch\nState",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 : Switch On",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Manual On/Off mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0：Disable\nmanual On/Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1：Enable\nmanual On/Off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "LED indication mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "1：Show switch\nstate",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2：Show night\nmode",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "3 : One flash\nmode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Auto off timer",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0：Disable auto\noff function",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32767,
						Desc: "Select time interval for auto off function.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "RF Off command mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0：Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1：Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2：Switch toggle",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "3：Switch on",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013c00010011() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Smart Energy Plug In Switch",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0001",
		ProductID: "0011",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0020,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0027,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0032,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0075,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Watt Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define the time interval to send a watt meter report.",
						Unit: "x5sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "KWH Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define the time interval for the report.",
						Unit: "x10min",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Threshold of current for Load caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 10,
						To: 1300,
						Desc: "Define the value of the treshold.",
						Unit: "x0.01A",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Threshold of KWh for Load caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 10000,
						Desc: "Define the value of the treshold.",
						Unit: "KWh",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Restore switch state mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Last switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Mode of Switch Off function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "LED indication mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Show switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Show night mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Auto off timer",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable auto off\nfunction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32767,
						Desc: "Define the time interval for auto off.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "RF off command mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch toggle",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013c00010012() *Device{
	return &Device{
		Brand: "Philio",
		Product: "In Wall Dual relay(1 way) switchmodule",
		Description: "\n            \n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0001",
		ProductID: "0012",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Watt Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Set time interval for device to send power consumption report, e.g. 720*5s=3600s=1\n",
						Unit: "x5sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "KWH Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Set time interval for device to send accumulated power consumtion report, e.g. 6*10min= 1 hour.",
						Unit: "x10min",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Selected Relay",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "1：Relay1",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2：Relay2",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "3：Relay1 &amp;\nRelay2",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Edge or Pulse mode or Edge-Toggle mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "1：Edge mode",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2：Pulse mode",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "3：Edge-Toggle\nmode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Threshold of current for Load Caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 10,
						To: 750,
						Desc: "Define treshold, e.g. 750*0.01A = 7.5A.",
						Unit: "x0.01A",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Threshold of KWH for Load Caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 1000,
						Desc: "Define treshold.",
						Unit: "1KWh",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Restore switch state mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 : Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 : Last switch\nstate",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 : Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Auto off timer",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 : Disable auto\noff function",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32767,
						Desc: "Define time interval for auto off function.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "RF off command mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 : Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 : Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 : Switch toggle",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "3 : Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Existence of Endpoint 3",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "1 : Endpoint3 exist",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 : No Endpoint3",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013c00010013() *Device{
	return &Device{
		Brand: "Philio",
		Product: "In Wall Dual relay(1 way) switch module",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0001",
		ProductID: "0013",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Relay selection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Selects relay 1.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Selects relay 2.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Selects both relays.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Mode selection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Selects edge mode.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Selects pulse mode.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Selects edge-toggle mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Switch state mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 : Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 : Last switch\nstate",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 : Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Auto off timer",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 : Disable auto off\nfunction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32767,
						Desc: "Sets time interval for auto off.",
						Unit: "sec.",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "RF off command mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 : Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 : Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 : Switch toggle",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "3 : Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Existence of Endpoint3",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 2,
						To: 2,
						Desc: "2 : No Endpoint3",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 : Endpoint3 exist",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013c00010015() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Roller shutter controller",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0001",
		ProductID: "0015",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Watt Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Set time interval of watt meter report period.",
						Unit: "x5 sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "KWH Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Set time interval of KWH meter report period.",
						Unit: "x10 min",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Threshold of current for Load caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 10,
						To: 500,
						Desc: "Set value of treshold warning.",
						Unit: "x0.01A",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Threshold of KWh for Load caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 10000,
						Desc: "Set value of treshold warning.",
						Unit: "x1KWh",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "External switch type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "1: One Push button",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2:Two Push button",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Level report mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "1:Report destination\nlevel in 5s",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2:Report 10 percent\nlevel while\nrunning",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013c00010028() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Smart Energy Plug In Switch",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0001",
		ProductID: "0028",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0025,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0020,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0027,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0032,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0075,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Watt Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define a time interval. ",
						Unit: "x5sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "KWH Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define a time interval.",
						Unit: "x10min",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Threshold of current for Load caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 10,
						To: 1300,
						Desc: "Define a treshold.",
						Unit: "x0,01A",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Threshold of KWh for Load caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 10000,
						Desc: "Define a treshold.",
						Unit: "KWh",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Restore switch state mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Last switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Mode of Switch Off function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "LED indication mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Show switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Show night mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Auto off timer",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable auto off function",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32767,
						Desc: "Define an auto off interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "RF off command mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch toggle",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Switch Status Report mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013c00010038() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Smart Energy Plug In Switch",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0001",
		ProductID: "0038",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Switch Status Report mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Restore switch state mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Last switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Mode of Switch Off function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Auto off timer",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable auto off\nfunction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32767,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "RF off command mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch toggle",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013c00020002() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Slim Multi-Sensor PST02-A",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0002",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Basic Set Level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "Turn On",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Dimming level",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "PIR Sensitivity",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable PIR motion",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "1 means the lowest sensitivity, 99 means the highest sensitivity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Light Threshold",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "1 means darkest. 99 means brightest",
						Unit: "",
					},
					Value{
						From: 100,
						To: 100,
						Desc: "Turn off illumination detected",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "0 means turn off illumination detected function And never turn on the light.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Operation Mode",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Bit0. 0 - Home Automation mode\n1 - Security Mode",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Bit1. Test Mode",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Bit2. Disable Door/Window Sensor",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Bit3. 0 - Temperature in Fahrenheit;\n1 - Temperature in Celsius",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Bit4. Disable illumination report after event triggered",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Bit5. Disable temperature report after event triggered",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Multi-Sensor Function Switch",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Bit0. Disable magnetic integrate illumination",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Bit1. Disable PIR integrate Illumination",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Bit2. Disable magnetic integrate PIR",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Bit3. When Bit2 is 0 (Enable), the device is install in the same room with the light? 0: In the same room(Default), 1: In the different room",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Bit4. Disable delay 5 seconds to turn off the light, when door/window closed",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Bit5. Disable auto turn off the light, after door/window opened to turn on the light. If Bit2 = 0, this setting is useless",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Bit6. Enable temperature monitoring. When this bit enable, the temperature changed 3 degree Fahrenheit, it will report. And also the temperature over 140 degree Fahrenheit, it will report every 64 seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "PIR Re-Detect Interval Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "8 seconds per tick, and minimum time is 24 seconds, default tick is 3 (24 seconds).",
						Unit: "8 sec",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Turn Off Light Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 4,
						To: 127,
						Desc: "8 seconds per tick, and minimum time is 32 seconds, default tick is 4 (32 seconds)",
						Unit: "8 sec",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Auto Report Battery Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "30 minutes per tick and minimum time is 30 minutes, default tick is 12 (6 hours)",
						Unit: "30 min",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Auto Report Door/Window State Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "30 minutes per tick and minimum time is 30 minutes, default tick is 12 (6 hours)",
						Unit: "30 min",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Auto Report Illumination Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "30 minutes per tick and minimum time is 30 minutes, default tick is 12 (6 hours)",
						Unit: "30 min",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Auto Report Temperature Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "30 minutes per tick and minimum time is 30 minutes, default tick is 12 (6 hours)",
						Unit: "30 min",
					},
				},
			},
		},
	}
}
func New013c0002000c() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Slim Multisensor",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0002",
		ProductID: "000c",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Basic Set Level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "Activate Light",
						Unit: "",
					},
					Value{
						From: 0,
						To: 100,
						Desc: "Dimm",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivate Light",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "PIR Sensitivity",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "sensitivity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Light Threshold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivate",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Treshhold",
						Unit: "",
					},
					Value{
						From: 100,
						To: 100,
						Desc: "Always turn on Lights",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Operation Mode",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\n1 =enable test mode 0 = disable normal mode Notice: This bit only effect by the DIP Switch setting to program mode.\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Disable the door/window function.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nSetting the temperature scale. 0: Fahrenheit 1: Celsius\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nDisable the illumination report after event triggered.\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "\nDisable the temperature report after event triggered.\n",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Disable the back key release into test mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Multi Sensor Function Switch",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable magnetic integrate illumination.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable PIR integrate Illumination.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nDisable magnetic integrate PIR (Default is Disable)\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nWhen Bit2 is 0 (Enable), Are the device and the lighting in the same room? 0: In the same room (Default) 1: In a different room. Notice: If this bit is 1, it is recommended also set the Bit1 to 1, cause the PIR triggered, doesn&#39;t mean the people in that room.\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nDisable delay 5 seconds to turn off the light, when door/window closed.\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "\nDisable auto turn off the light, after door/window opened to turn on the light. If bit2 is zero, this setting is useless. Notice: If the configuration No.9 is zero, this setting is useless.\n",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Customer Function",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nEnable sending motion OFF report. Note: Depends on the Bit4 0: Report Notification CC, Type: 0x07, Event: 0xFE 1: Sensor Binary Report, Type: 0x0C, Value: 0x00\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable PIR super sensitivity mode.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Enable don&#39;t send out BASIC OFF after door closed.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nNotification Type 0: Using Notification Report. 1: Using Sensor Binary Report.\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable Multi CC in auto report.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "\nDisable to report battery state when the device triggered.\n",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "PIR Re- Detect Interval Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "Define the time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Turn Off Light Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "Define the delay time.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "The turn off light command is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Auto Report Battery Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "\nDefine the time interval for a battery auto report.\n",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "The auto report is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Auto Report Door/Windo w State Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "Define the time interval.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Auto Report Illumination Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "Define the time interval.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Auto Report Temperatur e Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "Define the time interval.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Auto Report Tick Interval",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Define the time interval.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "All auto report functions are disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Temperature Differential Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "Define the temperature differential to report.",
						Unit: "°F",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Illumination Differential Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Define the illumination differential to report.",
						Unit: "%",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013c0002000d() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Slim Multisensor",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0002",
		ProductID: "000d",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Basic Set Level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "Activate Light",
						Unit: "",
					},
					Value{
						From: 0,
						To: 100,
						Desc: "Dimm",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivate Light",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "PIR Sensitivity",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "sensitivity",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Light Threshold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Deactivate",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Treshhold",
						Unit: "",
					},
					Value{
						From: 100,
						To: 100,
						Desc: "Always turn on Lights",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Operation Mode",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\n1 =enable test mode 0 = disable normal mode Notice: This bit only effect by the DIP Switch setting to program mode.\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Disable the door/window function.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nSetting the temperature scale. 0: Fahrenheit 1: Celsius\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nDisable the illumination report after event triggered.\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "\nDisable the temperature report after event triggered.\n",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Disable the back key release into test mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Multi Sensor Function Switch",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable magnetic integrate illumination.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable PIR integrate Illumination.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "\nDisable magnetic integrate PIR (Default is Disable)\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nWhen Bit2 is 0 (Enable), Are the device and the lighting in the same room? 0: In the same room (Default) 1: In a different room. Notice: If this bit is 1, it is recommended also set the Bit1 to 1, cause the PIR triggered, doesn&#39;t mean the people in that room.\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nDisable delay 5 seconds to turn off the light, when door/window closed.\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "\nDisable auto turn off the light, after door/window opened to turn on the light. If bit2 is zero, this setting is useless. Notice: If the configuration No.9 is zero, this setting is useless.\n",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Customer Function",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nEnable sending motion OFF report. Note: Depends on the Bit4 0: Report Notification CC, Type: 0x07, Event: 0xFE 1: Sensor Binary Report, Type: 0x0C, Value: 0x00\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable PIR super sensitivity mode.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Enable don&#39;t send out BASIC OFF after door closed.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nNotification Type 0: Using Notification Report. 1: Using Sensor Binary Report.\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable Multi CC in auto report.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "\nDisable to report battery state when the device triggered.\n",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "PIR Re- Detect Interval Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "Define the time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Turn Off Light Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "Define the delay time.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "The turn off light command is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Auto Report Battery Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "\nDefine the time interval for a battery auto report.\n",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "The auto report is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Auto Report Door/Windo w State Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "Define the time interval.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Auto Report Illumination Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "Define the time interval.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Auto Report Temperatur e Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "Define the time interval.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Auto Report Tick Interval",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Define the time interval.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "All auto report functions are disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Temperature Differential Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 127,
						Desc: "Define the temperature differential to report.",
						Unit: "°F",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Illumination Differential Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Define the illumination differential to report.",
						Unit: "%",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013c0002001e() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Smoke Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0002",
		ProductID: "001e",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 7,
				Name: "Customer Function",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Notification Type,\n0: Using Notification Report.\n1: Using Sensor Binary Report.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Auto Report Battery Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define time interval for auto report.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013c0002001f() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Flood Multisensor",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0002",
		ProductID: "001f",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Basic Set OFF Level",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 2,
				Name: "Basic Set ON Level",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 5,
				Name: "Operation Mode",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable the Flood function.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Reserve.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserve.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Setting the temperature scale.\n0: Fahrenheit, 1:Celsius",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Reserve.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable the temperature report\nafter event triggered. (1:Disable,\n0:Enable)",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Reserve.",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Reserve.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Multsensor Function Switch",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserve.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Reserve.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserve.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Reserve.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Reserve.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Reserve.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Disable the humidity report after\nevent triggered. (1:Disable, 0:Enable)",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Reserve.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Customer Function",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reserve.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Reserve.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Reserve.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Disable send out BASIC OFF\nafter the flood event cleared.\n(1:Disable, 0:Enable)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Notification Type,\n0: Using Notification Report.\n1: Using Sensor Binary Report.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable Multi CC in auto report.\n(1:Disable, 0:Enable)",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Disable to report battery state\nwhen the device triggered. (1:Disable,\n0:Enable)",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Reserve.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Auto Report Battery Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto report is turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Defines time interval for auto report.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Auto Report Temperature Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto report is turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Defines interval time for auto report.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Auto Report Humidity Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto report is turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Defines time interval for auto report.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Auto Report Flood Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto report is turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Defines interval time for auto report.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Auto Report Tick Interval",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All auto report function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Defines interval time for an auto report each\ntick.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Temperature Differential Report",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Defines temperature differential that will be reported.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "Humidity Differential Report",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 60,
						Desc: "Defines humidity differential that will be reported.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013c00020020() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Temperature and Humidity sensor",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0002",
		ProductID: "0020",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 5,
				Name: "Operation Mode",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "This option is not available for this device.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "\nSetting the temperature scale. 0: Fahrenheit, 1:Celsius\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "This option is not available for this device.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Customer Function",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "The option is not available for this device.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "\nNotification Type, 0: Using Notification Report. 1: Using Sensor Binary Report.\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "\nDisable Multi CC in auto report. (1:Disable, 0:Enable)\n",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "The option is not available for this device.",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Auto Report Battery Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define the time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Auto Report Temperature Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define the interval time.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Auto Report Humidity Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define the interval time.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Auto Report Tick Interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "\nSetting to 0 means turn off all auto report function.\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Define the time interval for one tick.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Temperature Differential Report",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define the temperature differential.",
						Unit: "°F",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "Humidity Differential Report",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 60,
						Desc: "Define the humidity differential.",
						Unit: "%",
					},
				},
			},
		},
	}
}
func New013c00020021() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Flood sensor ",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0002",
		ProductID: "0021",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Basic Set OFF Level",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 2,
				Name: "Basic Set ON Level",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 5,
				Name: "Operation Mode",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable the Flood function.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "The option is not available tor this device.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "The option is not available tor this device.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Customer Function",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Disable send out BASIC OFF\nafter the flood event cleared.\n(1:Disable, 0:Enable)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Notification Type,\n0: Using Notification Report.\n1: Using Sensor Binary Report.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable Multi CC in auto report.\n(1:Disable, 0:Enable)",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Disable to report battery state\nwhen the device triggered. (1:Disable,\n0:Enable)",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Auto Report Battery Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define the time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Auto Report Flood Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define the time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Auto Report Tick Interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Setting to 0 means turn off\nall auto report function.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Define the time interval for one tick.",
						Unit: "min",
					},
				},
			},
		},
	}
}
func New013c0002002b() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Temperature and Humidity sensor",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0002",
		ProductID: "002b",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 5,
				Name: "Operation Mode",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "This option is not available for this device.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Setting the temperature scale.\n0: Fahrenheit, 1:Celsius",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "This option is not available for this device.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Customer Function",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "The option is not available for this device.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Notification Type,\n0: Using Notification Report.\n1: Using Sensor Binary Report.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable Multi CC in auto report.\n(1:Disable, 0:Enable)",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "The option is not available for this device.",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Auto Report Battery Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define the time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Auto Report Temperature Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define the interval time.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Auto Report Humidity Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define the interval time.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Auto Report Tick Interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Setting to 0 means turn off\nall auto report function.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Define the time interval for one tick.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Temperature Differential Report",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define the temperature differential.",
						Unit: "°F",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "Humidity Differential Report",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 60,
						Desc: "Define the humidity differential.",
						Unit: "%",
					},
				},
			},
		},
	}
}
func New013c0004000a() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Multi Sound Siren",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0004",
		ProductID: "000a",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0020,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0025,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 7,
				Name: "Customer Function",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Notification Type,\n0: Using Notification Report.\n1: Using Sensor Binary Report.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 29,
				Name: "Disable Alarm",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0: Enable Alarm",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1: Disable Alarm",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Alarm Duration",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = never auto stop",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Set duration of alarm sound.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New013c0006001a() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Smart Engery In Wall Meter",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0006",
		ProductID: "001a",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Watt Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define a time interval to send a watt meter report.",
						Unit: "x 5sec ",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "KWH Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define a time interval to send a kWh meter report.",
						Unit: "x 5sec ",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Selected End Point",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "CT1 and CT2",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "CT1",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "CT2",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Threshold of Current for Load Caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 10,
						To: 6000,
						Desc: "Set up a treshold.",
						Unit: "x 0,01A",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Threshold of KWH for Load Caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 10000,
						Desc: "Set up a treshold.",
						Unit: "kWh",
					},
				},
			},
		},
	}
}
func New013c0008001d() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Remote",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0008",
		ProductID: "001d",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0094,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Basic Set Level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "-1 = Lights are turned on.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Set light strength for dimmer.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "0 = Lights are turned off.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Customer Function",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch AV control/Lighting group\ncontrol. (0: AV control, 1: lighting group\ncontrol)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Auto Report Battery Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 means turn off auto report battery.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Set the interval time for auto report the battery\nlevel.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 82,
				Name: "Association Group 2 Basic Set Level",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 83,
				Name: "Association Group 3 Basic Set Level",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 84,
				Name: "Association Group 4 Basic Set Level",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 85,
				Name: "Association Group 5 Basic Set Level",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 86,
				Name: "Association Group 6 Basic Set Level",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 87,
				Name: "Association Group 7 Basic Set Level",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 88,
				Name: "Association Group 8 Basic Set Level",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 89,
				Name: "Association Group 9 Basic Set Level",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New013c00080027() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Panic Button",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0008",
		ProductID: "0027",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New013c00090022() *Device{
	return &Device{
		Brand: "Philio",
		Product: "Smart Color Button",
		Description: "\n            \n          ",

		ManufacturerID: "013c",
		ProductType: "0009",
		ProductID: "0022",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Basic Set OFF level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "Define the Basic Set OFF level.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Basic Set ON level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "Define the Basic Set ON level.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Auto Report Battery Time",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define the time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "Customer Function",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 : Auto send Command Basic\nSet after rotating.\n\n1 : Send Command Basic Set\nby touching key after rotating",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "0 = Enable, \n1 = Disable.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "Disable Scene Holding report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is enabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Function is disabled.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New014500010004() *Device{
	return &Device{
		Brand: "BUFFALO",
		Product: "Smat Tap 100V/15A",
		Description: "\n            \n          ",

		ManufacturerID: "0145",
		ProductType: "0001",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0032,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0087,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0077,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Store in EEPROM",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 2,
				Name: "Store as Treshold",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "Store send Options in EEPROM",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 4,
				Name: "Store Value as Destination Node ID",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New014800010001() *Device{
	return &Device{
		Brand: "Eurotronic",
		Product: "Stella Z",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0148",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0077,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New014800020001() *Device{
	return &Device{
		Brand: "Comet Z",
		Product: "Comet Z",
		Description: "\n            \n          ",

		ManufacturerID: "0148",
		ProductType: "0002",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New014900000000() *Device{
	return &Device{
		Brand: "WiDom",
		Product: "Universal Roller Shutter",
		Description: "\n            \n          ",

		ManufacturerID: "0149",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Shutter control",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Favourite level for position ON",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 50,
						To: 100,
						Desc: "From: 50 (50%) to 100 (100% - FULL ON)",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Favourite level for position OFF",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 49,
						Desc: "From: 0 (OFF) to 49 (49%)",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Action on the associated devices when the external switch receives 1 click",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Actions on the button ON = Basic Set ON_LEVEL\nActions on the button OFF = Basic Set OFF_LEVEL\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Actions on the button ON = No action\nActions on the button OFF = Basic Set OFF_LEVEL",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Actions on the button ON = No action\nActions on the button OFF = Basic Set OFF_LEVEL",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Actions on the button ON, Actions on the button OFF = No action",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Action on the associated devices when the external switch receives 2 clicks",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Actions on the button ON = Basic Set ON_LEVEL\nActions on the button OFF = Basic Set OFF_LEVEL\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Actions on the button ON = No action\nActions on the button OFF = Basic Set OFF_LEVEL",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Actions on the button ON = No action\nActions on the button OFF = Basic Set OFF_LEVEL",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Actions on the button ON, Actions on the button OFF = No action",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Action on the associated devices when the external switch receives 3 clicks",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Actions on the button ON = Basic Set ON_LEVEL\nActions on the button OFF = Basic Set OFF_LEVEL\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Actions on the button ON = No action\nActions on the button OFF = Basic Set OFF_LEVEL",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Actions on the button ON = No action\nActions on the button OFF = Basic Set OFF_LEVEL",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Actions on the button ON, Actions on the button OFF = No action",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Action on the associated devices when the external switch is hold",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Actions on the button ON = Basic Set ON_LEVEL\nActions on the button OFF = Basic Set OFF_LEVEL\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Actions on the button ON = No action\nActions on the button OFF = Basic Set OFF_LEVEL",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Actions on the button ON = No action\nActions on the button OFF = Basic Set OFF_LEVEL",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Actions on the button ON, Actions on the button OFF = No action",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Device status upon receipt of a Basic Set",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "IF Command received = ON, THEN  Final Status = ON.\nIF Command received = OFF, THEN  Final Status = OFF.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "IF Command received = ON, THEN initial status is maintained.\nIF Command received = OFF, THEN  Final Status = OFF.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "IF Command received = ON, THEN  Final Status = ON.\nIF Command received = OFF, THEN  initial status is maintained.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "IF Command received = ON or OFF, THEN  initial status is maintained, or if the programmed switch-off timer is active, it is restarted.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "ON_LEVEL value used for devices belonging to Group 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ON_LEVEL parameter is switched OFF.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ON_LEVEL parameter is switched ON.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define value for dimming purpose.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "OFF_LEVEL value used for devices belonging to Group 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "OFF_LEVEL parameter is switched OFF.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "OFF_LEVEL parameter is switched ON.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define value for dimming purpose.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "ON_LEVEL value used for devices belonging to Group 3",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ON_LEVEL parameter is switched OFF.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ON_LEVEL parameter is switched ON.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define value for dimming purpose.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "OFF_LEVEL value used for devices belonging to Group 3",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "OFF_LEVEL parameter is switched OFF.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "OFF_LEVEL parameter is switched ON.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define value for dimming purpose.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "ON_LEVEL value used for devices belonging to Group 4",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ON_LEVEL parameter is switched OFF.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ON_LEVEL parameter is switched ON.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define value for dimming purpose.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "OFF_LEVEL value used for devices belonging to Group 4",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "OFF_LEVEL parameter is switched OFF.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "OFF_Level parameter is switched ON.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define value for dimming purpose.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 36,
				Name: "ON_LEVEL value used for devices belonging to Group 5 ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ON_LEVEL parameter is switched OFF.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ON_LEVEL parameter is switched ON.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define value for dimming purpose.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 37,
				Name: "OFF_LEVEL value used for devices belonging to Group 5",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "OFF_LEVEL parameter is switched OFF.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "OFF_LEVEL parameter is switched ON.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define value for dimming purpose.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "Smoke Alarm, CO, CO2 Action ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "The device status switches to ON.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "The device status switches to OFF.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "The alarm will be ignored.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 51,
				Name: "Heat Alarm ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "The device status switches to ON.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "The device status switches to OFF.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "The alarm will be ignored.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "Water Alarm",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "The device status switches to ON.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "The device status switches to OFF.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "The alarm will be ignored.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 53,
				Name: "Home Security",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "The device status switches to ON.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "The device status switches to OFF.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "The alarm will be ignored.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 60,
				Name: "Calibration",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Set parameter value.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 61,
				Name: "Configuration Reset ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "FACTORY RESET: the original manufacturer configuration is restored within the device.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ASSOCIATIONS RESET.\nall and only the associations are reset",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "CONFIGURATIONS RESET: the associations are maintained while all other configuration parameters are reset to the manufacturer&#39;s original settings, except for this specific configuration.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "IGNORE: \nno action is carried out.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 62,
				Name: "Protection time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "Define time value.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 63,
				Name: "Inversion of commands UP\\DOWN",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Inversion disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Inversion enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 65,
				Name: "Learn Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Action of the Learning mode cannot be enabled through the external switch.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Learning mode activated by 1 click on the external switch.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Learning mode activated by 2 clicks on the external switch.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Learning mode activated by 3 clicks on the external switch.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New014900120104() *Device{
	return &Device{
		Brand: "WiDom",
		Product: "Universal Relay Switch",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0149",
		ProductType: "0012",
		ProductID: "0104",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Device status when the external switch receives 1 click   (1 byte)            ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ON (2) ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "OFF (3) ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "IGNORE (4) ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Device status when the external switch receives 2 clicks   (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ON (2) ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "OFF (3) ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "IGNORE (4) ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Device status when the external switch receives 3 clicks   (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ON (2) ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "OFF (3) ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "IGNORE (4) ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Device status when the external switch is held down   (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ON (2) ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "OFF (3) ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "IGNORE (4) ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: " Action on the associated devices when the external switch receives 1 click (1 byte)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "IGNORE IF ON (2)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "IGNORE IF OFF (3)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "TOGGLE ASSOCIATED (4)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "SET AS INITIAL STATUS VALUE (5)",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "IGNORE (6)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: " Action on the associated devices when the external switch receives 2 clicks (1 byte)",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "IGNORE IF ON (2)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "IGNORE IF OFF (3)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "TOGGLE ASSOCIATED (4)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "SET AS INITIAL STATUS VALUE (5)",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "IGNORE (6)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: " Action on the associated devices when the external switch is held down (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "IGNORE IF ON (2)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "IGNORE IF OFF (3)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "TOGGLE ASSOCIATED (4)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "SET AS INITIAL STATUS VALUE (5)",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "IGNORE (6)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: " Action performed on all network devices when the external switch receives 1 click (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "IGNORE IF ON (2)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "IGNORE IF OFF (3)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "SET AS INITIAL STATUS VALUE (4)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "IGNORE (5)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: " Action performed on all network devices when the external switch receives 2 clicks (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "IGNORE IF ON (2)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "IGNORE IF OFF (3)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "SET AS INITIAL STATUS VALUE (4)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "IGNORE (5)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: " Action performed on all network devices when the external switch receives 3 clicks (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "IGNORE IF ON (2) ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "IGNORE IF OFF (3) ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "SET AS INITIAL STATUS VALUE (4) ",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "IGNORE (5) ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: " Action performed on all network devices when the external switch is held down (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "IGNORE IF ON (2)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "IGNORE IF OFF (3)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "SET AS INITIAL STATUS VALUE (4)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "IGNORE (5)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: " Device status upon receipt of a Basic Set (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "HOW RECEIVED (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "IGNORE IF ON (2)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "IGNORE IF OFF (3)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "IGNORE (4)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "ON_LEVEL value used for devices belonging to Group 2 (1 Click association group) (1 byte)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "OFF_LEVEL value used for devices belonging to Group 2 (1 Click association group) (1 byte) ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: " ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "ON_LEVEL value used for devices belonging to Group 3 (2 Click association group) (1 byte)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: " ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "OFF_LEVEL value used for devices belonging to Group 3 (2 Click association group) (1 byte)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: " ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "ON_LEVEL value used for devices belonging to Group 4 (3 Click association group) (1 byte)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: " ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "OFF_LEVEL value used for devices belonging to Group 4 (3 Click association group) (1 byte)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: " ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 36,
				Name: "ON_LEVEL value used for devices belonging to Group 5 (Hold association group) (1 byte)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: " ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 37,
				Name: "OFF_LEVEL value used for devices belonging to Group 5 (Hold association group) (1 byte)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: " Timer associated with the 1 click event on the external switch (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: " TIMER DISABLED (0) ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " TIMER ENABLED (1)  ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: " Timer associated with the 2 click event on the external switch (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: " TIMER DISABLED (0) ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " TIMER ENABLED (1)  ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: " Timer associated with the 3 click event on the external switch (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: " TIMER DISABLED (0) ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " TIMER ENABLED (1)  ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: " Timer associated with the hold event on the external switch (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: " TIMER DISABLED (0) ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " TIMER ENABLED (1)  ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: " Timer associated with the reception of a Basic Set command (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: " TIMER DISABLED (0) ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " TIMER ENABLED (1)  ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "Switch-off timer (2 bytes) ",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 3600,
						Desc: "Time in seconds (1 – 3600). Default value  600 (10 minutes) ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 46,
				Name: "Switch-off timer validity (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: " CANCEL (0) ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " MAINTAIN (1)  ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: " Smoke Alarm, CO, CO2 Action (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: " ON (1)  ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " OFF (2)  ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: " FLASH (3)  ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: " IGNORE (4)  ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 51,
				Name: " Heat Allarm (1 byte)  ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: " ON (1)  ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " OFF (2)  ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: " FLASH (3)  ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: " IGNORE (4)  ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: " Water Allarm (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: " ON (1)  ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " OFF (2)  ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: " FLASH (3)  ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: " IGNORE (4)  ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 53,
				Name: " Home Security (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: " ON (1)  ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " OFF (2)  ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: " FLASH (3)  ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: " IGNORE (4)  ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 60,
				Name: " Startup status (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: " ON (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " OFF (2) ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: " PREVIOUS STATUS (3) ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 61,
				Name: " Configuration reset (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: " FACTORY RESET (0) ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " RESET ASSOCIATIONS (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " RESET CONFIGURATIONS (2) ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: " IGNORE (4) ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 62,
				Name: " Type of external switch (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: " IGNORE (0) ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " BUTTON (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " BISTABLE SWITCH (2) ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: " AC SENSING (3) ",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: " AUTOMATIC RECOGNITION (4) ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 64,
				Name: "Load protection (2 bytes) ",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 3600,
						Desc: "Time in seconds (1 – 3600). Default value: 0 ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 65,
				Name: " Learn Mode (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: " IGNORE (0) ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " 1 CLICK (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " 2 CLICKS (2) ",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: " 3 CLICKS (3) ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 63,
				Name: " Sensitivity (1 byte) ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 56,
				Name: "Duration of flashing phase (1 byte) ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 55,
				Name: "OFF time during flashing (1 byte) ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 54,
				Name: "ON time during flashing (1 byte) ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: " Action on the associated devices when the external switch receives 3 clicks (1 byte) ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE (1) ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "IGNORE IF ON (2)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "IGNORE IF OFF (3)",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "SET AS INITIAL STATUS VALUE (5)",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "IGNORE (6)",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
				},
			},
		},
	}
}
func New014912140304() *Device{
	return &Device{
		Brand: "WiDom",
		Product: "Energy Driven Switch",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0149",
		ProductType: "1214",
		ProductID: "0304",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Device Status",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE: If initial status is ON, then final status is OFF.  If initial status is OFF, then final status is ON.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ON: If the initial status is OFF the system switches to ON; conversely, it maintains its status (ON).",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "OFF: If the initial status is ON the system switches to OFF; conversely, it maintains its status (OFF).",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "IGNORE: The device maintains the initial status.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Device status",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "AS RECEIVED: If received command is ON, then final status is ON. If received command is OFF, then final status is OFF.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "IGNORE IF ON: If received command is ON, then the initial status is maintained.  If received command is OFF, then final status is OFF.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "IGNORE IF OFF: If received command is ON, then final status is ON. If received command is OFF, then the initial status is maintained.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "IGNORE: Initial status is maintained.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Overcurrent level",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 4500,
						Desc: "Define current  treshold.",
						Unit: "A",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Overcurrent time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 10800,
						Desc: "Define treshold of overcurrent time.",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Next State",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "IGNORE: The device maintains the initial status.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ON: If the initial status is OFF the system switches to ON; conversely, it maintains its status (ON).",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "OFF: If the initial status is ON the system switches to OFF: conversely, it maintains its status (OFF).",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "TOGGLE: If the initial status is ON/OFF the system switches to OFF/ON.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Meter Reset",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Meter parameters, including total operating time, will be reset",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Greater than 0 – IGNORE\n(The meter will not be reset.)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "Energy flow",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "CONSUMED: Events will be active for Consumed energy flows to which the positive sign will be attributed.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "PRODUCED: Events will be active for Produced energy flows to which the negative sign will be attributed.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "UP Power Level",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 11250,
						Desc: "Define level of instantaneous power.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 36,
				Name: "UP Power Time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 10800,
						Desc: "Define time parameter.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 37,
				Name: "UP Power State",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "IGNORE: The device maintains initial status.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ON: If the initial status is OFF the system switches to ON; conversely it maintains its status (ON).",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "OFF: If the initial status is ON the system switches to OFF, conversely it maintains its status (OFF).",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "TOGGLE: If the initial status is ON/OFF the system switches to OFF/ON.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 38,
				Name: "UP Power Associated",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Associated devices are switched OFF.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Associated devices are switched ON.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Set parameter for dimming purposes.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 39,
				Name: "DOWN Power Level",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 11250,
						Desc: "Define level of instantaneous power.",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "DOWN Power Time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 10800,
						Desc: "Define time parameter.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "DOWN Power State",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "IGNORE: The device maintains the initial status.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ON: If the initial status is OFF the system switches to ON; conversely, it maintains its status (ON).",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "OFF: If the initial status is ON the system switches to OFF, conversely, it maintains its status (OFF).",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "TOGGLE: If the initial status is ON/OFF the system switches to OFF/ON.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "DOWN Power Associated",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Associated devices are switched OFF.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Associated devices are switched ON.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Set parameter for dimming purposes.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Energy Level",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 2000000,
						Desc: "Set energy level.",
						Unit: "KWh",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Energy Limit State",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "IGNORE: The device maintains the initial status.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ON: If the initial status is OFF the system switches to ON; conversely, it maintains its status (ON).",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "OFF: If the initial status is ON the system switches to OFF; conversely, it maintains its status (OFF).",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "TOGGLE: If the initial status is ON/OFF, in the next state it will be OFF/ON.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "Variation Instantaneous Power",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Define percentage of variation.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 46,
				Name: "Report Time Frequency",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Define time parameter.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 47,
				Name: "Variation Total Energy",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "IGNORE: No report provided",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Energy variation generating the issuing of a report at 1 thousandth of KWh.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Energy variation generating the issuing of a report at 1 hundredth of KWh.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Energy variation generating the issuing of a report at 1 tenth of KWh.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Energy variation generating the issuing of a report at 1 KWh.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 48,
				Name: "Nominal Voltage",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1100,
						To: 2500,
						Desc: "Define parameter in tenths of volts.",
						Unit: "V",
					},
				},
			},
			&parameter{
				ID: 49,
				Name: "Fall in maximum voltage",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Define parameter.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 50,
				Name: "Electric parameters subjected to automatic notification",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 62,
						Desc: "Specify the calculated value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 51,
				Name: "Voltage RMS value",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 52,
				Name: "Current RMS value",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 53,
				Name: "Power Factor",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 54,
				Name: "Total energy consumed",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 55,
				Name: "Total energy produced",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 60,
				Name: "Start-up status",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "ON: Device on",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "OFF: Device off",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "PREVIOUS STATUS: Status prior to restart",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 61,
				Name: "Configuration reset",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "FACTORY RESET: The device is reset to the original factory settings.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ASSOCIATIONS RESET: All associations and only the associations are reset.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "CONFIGURATIONS RESET: The associations are maintained while all other configuration parameters are reset to the original factory settings, except for the specific configuration.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "IGNORE: No action is performed.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 62,
				Name: "Type of external switch",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "IGNORE: The external switch is not connected or not present.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "BUTTON: The external switch is a normally open button.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "SWITCH: The external switch is a traditional switch.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "AUTOMATIC RECOGNITION: After the first single click on the external switch, the system automatically determines the type of external switch used and sets the parameter with the new value accordingly.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 63,
				Name: "Load control",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "DIRECT CONTROL: The external load is controlled directly by the relay. Reference diagram local load control.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "CONTROL BY MEANS OF A CONTACTOR WITH NORMALLY OPEN COMMAND: The external load is controlled by a contactor that in a resting state has open contacts (load control by means of external contactor).",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "CONTROL BY MEANS OF A CONTACTOR WITH NORMALLY CLOSED COMMAND: The external load is controlled by a contactor that in a resting state has closed contacts (load control by means of external contactor).",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "AS AN EXTERNAL INDICATOR: The relay is only used to control the ignition of an external warning light, as, for example, in the case of notification of excess loads and surges\n(remote load control).",
						Unit: "",
					},
				},
			},
		},
	}
}
func New014912140504() *Device{
	return &Device{
		Brand: "WiDom",
		Product: "Universal double Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0149",
		ProductType: "1214",
		ProductID: "0504",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Outputs Status 1 Click",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ON: If the initial status is OFF the system switches to ON; conversely, it maintains its status (ON).",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "OFF: If the initial status is ON the system switches to OFF; conversely, it maintains its status (OFF).",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "IGNORE: The device maintains the initial status",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Output Status 2 Clicks",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "TOGGLE",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ON: If the initial status is OFF the system switches to ON; conversely, it maintains its status (ON).",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "OFF: If the initial status is ON the system switches to OFF; conversely, it maintains its status (OFF).",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "IGNORE: The device maintains the initial status",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Type of outputs",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "SINGLE CHANNELS: Channel 1 and Channel 2 are controlled individually",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "SINGLE POLE DOUBLE THROW RELAY: The two channels are in opposite status. If the Channel 1 is close the Channel 2 is open, if the Channel 1 is open the Channel 2 is close. The value of the parameter defines the closing delay of the relay in tenth of seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Number of clicks that activate the control of the associated devices",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Associated devices are controlled by 1 Click on the correspondent external switch",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Associated devices are controlled by 2 Clicks on the correspondent external switch",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Level used to control the devices associated to group 2 and 3",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The associated devices are switched OFF",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "The associated devices are switched ON",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "The associated devices (dimmer, roller shutters) are set to the indicated level (only for devices associated to group 3)",
						Unit: "",
					},
					Value{
						From: 100,
						To: 100,
						Desc: "If the Relay 1 is ON/OFF, the associated devices are ON/OFF",
						Unit: "",
					},
					Value{
						From: 101,
						To: 101,
						Desc: "If the Relay 1 is ON the associated devices are ON; if it is OFF no action is taken on the associated devices",
						Unit: "",
					},
					Value{
						From: 102,
						To: 102,
						Desc: "If the Relay 1 is OFF the associated devices are OFF; if it is ON no action is taken on the associated devices",
						Unit: "",
					},
					Value{
						From: 103,
						To: 103,
						Desc: "If the Relay 1 is ON the associated devices are OFF; if it is OFF no action is taken on the associated devices",
						Unit: "",
					},
					Value{
						From: 104,
						To: 104,
						Desc: "If the Relay 1 is OFF the associated devices are ON; if it is ON no action is taken on the associated devices",
						Unit: "",
					},
					Value{
						From: 105,
						To: 105,
						Desc: "If the Relay 1 is ON/OFF, the associated devices are OFF/ON",
						Unit: "",
					},
					Value{
						From: 106,
						To: 106,
						Desc: "No action is taken on the associated devices",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Level used to control the devices associated to group 4 and 5",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The associated devices are switched OFF",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "The associated devices are switched ON",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "The associated devices (dimmer, roller shutters) are set to the indicated level (only for devices associated to group 5)",
						Unit: "",
					},
					Value{
						From: 100,
						To: 100,
						Desc: "If the Relay 2 is ON/OFF, the associated devices are ON/OFF",
						Unit: "",
					},
					Value{
						From: 101,
						To: 101,
						Desc: "If the Relay 2 is ON the associated devices are ON; if it is OFF no action is taken on the associated devices",
						Unit: "",
					},
					Value{
						From: 102,
						To: 102,
						Desc: "If the Relay 2 is OFF the associated devices are OFF; if it is ON no action is taken on the associated devices",
						Unit: "",
					},
					Value{
						From: 103,
						To: 103,
						Desc: "If the Relay 2 is ON the associated devices are OFF; if it is OFF no action is taken on the associated devices",
						Unit: "",
					},
					Value{
						From: 104,
						To: 104,
						Desc: "If the Relay 2 is OFF the associated devices are ON; if it is ON no action is taken on the associated devices",
						Unit: "",
					},
					Value{
						From: 105,
						To: 105,
						Desc: "If the Relay 2 is ON/OFF, the associated devices are OFF/ON",
						Unit: "",
					},
					Value{
						From: 106,
						To: 106,
						Desc: "No action is taken on the associated devices",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Timer to switch ON the Channel 1",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Timer disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32000,
						Desc: "After this time the relay of the Channel 1 is ON",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Timer to switch ON the Channel 2",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Timer disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32000,
						Desc: "After this time the relay of the Channel 2 is ON",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Timer to switch OFF the Channel 1",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Timer disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32000,
						Desc: "After this time the relay of the Channel 1 is OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Timer to switch OFF the Channel 2",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Timer disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32000,
						Desc: "After this time the relay of the Channel 2 is OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Outputs status upon receipt of a Multi-Channel Basic Set command",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "AS RECEIVED",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "IGNORE IF ON",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "IGNORE IF OFF",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "IGNORE",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Outputs status upon receipt of a Basic Set command",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "The receipt of a Basic Set ON/OFF set the Channel 1 to ON/OFF",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "The receipt of a Basic Set ON/OFF set both the Channel 1 and the Channel 2 to ON/OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 60,
				Name: "Start-up status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Both Relay 1 and Relay 2 OFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Relay 1 ON, Relay 2 OFF",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Relay 1 OFF, Relay 2 ON",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Both Relay 1 and Relay 2 ON",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "PREVIOUS STATUS: Status prior to restart",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 61,
				Name: "Configuration reset",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The device is reset to the original factory settings",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All associations and only the associations are reset",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "The associations are maintained while all other configuration parameters are reset to the original factory settings, except for the specific configuration.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "The device will be restarted",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "No action is performed",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 62,
				Name: "Type of external switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The actions on the external switch are ignored. In this mode, the device can only be controlled via the network.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The external switch is a normally open button",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "The external switch is a traditional switch",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "After the first single click on the external switch, the system automatically determines the type of external switch used and sets the parameter with the new value accordingly.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New014d00000000() *Device{
	return &Device{
		Brand: "enblink",
		Product: "enblink",
		Description: "\n            \n          ",

		ManufacturerID: "014d",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
		},
		Parameters: []*parameter{
		},
	}
}
func New014d00010001() *Device{
	return &Device{
		Brand: "enblink",
		Product: "enblink",
		Description: "\n            \n          ",

		ManufacturerID: "014d",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0021,
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0042,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New014f00000000() *Device{
	return &Device{
		Brand: "HomeSeer",
		Product: "SmartStick&#43;",
		Description: "\n            \n          ",

		ManufacturerID: "014f",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
		},
		Parameters: []*parameter{
		},
	}
}
func New014f44503030() *Device{
	return &Device{
		Brand: "Linear",
		Product: "PD300Z-2",
		Description: "\n            \n          ",

		ManufacturerID: "014f",
		ProductType: "4450",
		ProductID: "3030",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 29,
				Name: "Load sense",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New014f44573034() *Device{
	return &Device{
		Brand: "Linear",
		Product: "WD500Z-1",
		Description: "\n            \n          ",

		ManufacturerID: "014f",
		ProductType: "4457",
		ProductID: "3034",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Dim Start Level",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "LED Indication",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 4,
				Name: "Invert Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 14,
				Name: "Enable Shade Control Group 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 15,
				Name: "Enable Shade Control Group 3",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 19,
				Name: "LED Transmission Indication",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New014f44573331() *Device{
	return &Device{
		Brand: "Linear",
		Product: "WD1000Z-1",
		Description: "\n            \n          ",

		ManufacturerID: "014f",
		ProductType: "4457",
		ProductID: "3331",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Dim Start Level",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "LED Indication",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 4,
				Name: "Invert Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 14,
				Name: "Enable Shade Control Group 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 15,
				Name: "Enable Shade Control Group 3",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 19,
				Name: "LED Transmission Indication",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New014f47423030() *Device{
	return &Device{
		Brand: "Linear",
		Product: "GB00Z-1",
		Description: "\n            \n          ",

		ManufacturerID: "014f",
		ProductType: "4742",
		ProductID: "3030",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x009c,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0082,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x005a,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New014f47443032() *Device{
	return &Device{
		Brand: "Linear",
		Product: "GD00Z-X",
		Description: "\n            \n          ",

		ManufacturerID: "014f",
		ProductType: "4744",
		ProductID: "3032",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0066,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0022,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New014f47443530() *Device{
	return &Device{
		Brand: "Linear",
		Product: "NGD00Z Garage Door Controller",
		Description: "\n            \n          ",

		ManufacturerID: "014f",
		ProductType: "4744",
		ProductID: "3530",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0066,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0022,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New014f47543038() *Device{
	return &Device{
		Brand: "LinearLinc",
		Product: "BulbZ",
		Description: "\n            \n          ",

		ManufacturerID: "014f",
		ProductType: "4754",
		ProductID: "3038",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Dim Level Memory",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The bulb will be full brightness when turned on.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The bulb will turn on to the last dim level setting.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New014f52463133() *Device{
	return &Device{
		Brand: "Linear",
		Product: "FS20Z",
		Description: "\n            \n          ",

		ManufacturerID: "014f",
		ProductType: "5246",
		ProductID: "3133",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New014f52503030() *Device{
	return &Device{
		Brand: "Linear",
		Product: "PS15Z-2",
		Description: "\n            \n          ",

		ManufacturerID: "014f",
		ProductType: "5250",
		ProductID: "3030",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 104,
				Name: "Flash Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New014f52523530() *Device{
	return &Device{
		Brand: "Linear",
		Product: "WO15Z-1",
		Description: "\n            \n          ",

		ManufacturerID: "014f",
		ProductType: "5252",
		ProductID: "3530",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "Set parameter to 0 to have the blue indicator LED show state of controlled outlet. Set parameter to 1 to have indicator show opposite state of controlled outlet.",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New014f54573033() *Device{
	return &Device{
		Brand: "Linear",
		Product: "WT00Z-1",
		Description: "\n            \n          ",

		ManufacturerID: "014f",
		ProductType: "5457",
		ProductID: "3033",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Dim Start Level",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 2,
				Name: "Suspend Group 4",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "Night Light",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 4,
				Name: "Invert Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 5,
				Name: "Ignore start level when recieving dim commands",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 7,
				Name: "ON/OFF dim rate",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 8,
				Name: "ON/OFF dim rate",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 9,
				Name: "Local control dim rate",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 10,
				Name: "Local control dim rate",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 11,
				Name: "ALL ON/ ALL OFF dim rate",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 12,
				Name: "ALL ON/ ALL OFF dim rate",
				Type: "range",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 13,
				Name: "Disable group 4 during a dim command",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 16,
				Name: "Enable Shade Control Group 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 14,
				Name: "Enable Shade Control Group 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 15,
				Name: "Enable Shade Control Group 3",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 19,
				Name: "LED Transmission Indication",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 20,
				Name: "Poll: minutes",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 21,
				Name: "Poll first node in group 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New015100020001() *Device{
	return &Device{
		Brand: "Sercomm",
		Product: "Z-Wave Clamp Power Meter",
		Description: "\n            \n          ",

		ManufacturerID: "0151",
		ProductType: "0002",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Parameter 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 2,
				Name: "Parameter 2",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
				},
			},
		},
	}
}
func New015100030003() *Device{
	return &Device{
		Brand: "Sercomm",
		Product: "DoorWindow Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0151",
		ProductType: "0003",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New015200030002() *Device{
	return &Device{
		Brand: "GR",
		Product: "Power Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0152",
		ProductType: "0003",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New015200030003() *Device{
	return &Device{
		Brand: "GR",
		Product: "Siren",
		Description: "\n            \n          ",

		ManufacturerID: "0152",
		ProductType: "0003",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New015200030512() *Device{
	return &Device{
		Brand: "G.R.",
		Product: "Auto Valve",
		Description: "\n            \n          ",

		ManufacturerID: "0152",
		ProductType: "0003",
		ProductID: "0512",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0027,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New015202020511() *Device{
	return &Device{
		Brand: "G.R.",
		Product: "Auto Valve",
		Description: "\n            \n          ",

		ManufacturerID: "0152",
		ProductType: "0202",
		ProductID: "0511",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New015205000001() *Device{
	return &Device{
		Brand: "G.R",
		Product: "Door/Window Detector",
		Description: "\n            \n          ",

		ManufacturerID: "0152",
		ProductType: "0500",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New015205000003() *Device{
	return &Device{
		Brand: "G.R.",
		Product: "PIR Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0152",
		ProductType: "0500",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New015400010001() *Device{
	return &Device{
		Brand: "Popp &amp; Co.",
		Product: "Z-Weather",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0154",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "6",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x009b,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0089,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New015400030001() *Device{
	return &Device{
		Brand: "Popp",
		Product: "Wall Plug Switch 05438",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0154",
		ProductType: "0003",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0087,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Show switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Operated by Indicator Command Class",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically switch off after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF off command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on if load is off else switch off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Restore switch state after power cycle",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No, turn off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Energy consumption",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 3500,
						Desc: "Watts",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Off color",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Red",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Blue",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Yellow",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "On color",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Red",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Green",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Blue",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Yellow",
						Unit: "",
					},
				},
			},
		},
	}
}
func New015401000101() *Device{
	return &Device{
		Brand: "Z-Wave.Me",
		Product: "KFOBC",
		Description: "\n            \n            \n            \n            \n          ",

		ManufacturerID: "0154",
		ProductType: "0100",
		ProductID: "0101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005e,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Button 1 and 3 pair mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Button 2 and 4 pair mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Command to Control Group A",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Command to Control Group B",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Command to Control Group C",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Command to Control Group D",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Send the following Switch All commands",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Invert buttons",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Send unsolicited Battery Report on Wake Up",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To same node as wake up notification",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Broadcast to neighbors",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "Blocks wakeup even when wakeup interval is set",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Wakeup is blocked",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Wakeup is possible if configured accordingly.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New015401000201() *Device{
	return &Device{
		Brand: "Popp &amp; Co.",
		Product: "Popp Smoke Detector",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0154",
		ProductType: "0100",
		ProductID: "0201",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Siren alarm sequence interval ",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 3,
						To: 129,
						Desc: "seconds (default 10)",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Siren alarm tone length",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "seconds (default 8)",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Value of On-Command ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "(default 99)",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Value of Off-Command",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "(default 99)",
						Unit: "seconds",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Status of automated meshing of smoke alarms",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "active (default)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Status of automated meshing of battery alarms ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "active (default)",
						Unit: "",
					},
				},
			},
		},
	}
}
func New015411000001() *Device{
	return &Device{
		Brand: "Popp",
		Product: "123610",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0154",
		ProductType: "1100",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Show switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Night mode (inverted switch state)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Operated by Indicator Command Class",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically switch off after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF off command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on if load is off else switch off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Restore switch state after power cycle",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No, turn off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
		},
	}
}
func New015411000002() *Device{
	return &Device{
		Brand: "Popp",
		Product: "123580",
		Description: "\n            \n            \n            \n          ",

		ManufacturerID: "0154",
		ProductType: "1100",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0075,
			},
			&CommandClass{
				ID: 0x0077,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "LED mode",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Show switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Night mode (inverted switch state)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Operated by Indicator Command Class",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Automatically switch off after",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "sec",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "What to do on RF off command",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Ignore",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch on if load is off else switch off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Ignore start level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Speed for fast dimming",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Instantly",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Speed for slow dimming",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "seconds",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Behavior on &#39;Switch On&#39; ",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "last dim level",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "maximum dim level when already turned on",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Always maximum dim level",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Baby Dimming time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "in minutes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Target dimming level for Baby Dimming",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 255,
						Desc: "%",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Typical click timeout",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "in 10ms units",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Limit minimal light level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 95,
						Desc: "Level limit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Limit maximal light level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Work as switch: use off and maximal level",
						Unit: "",
					},
					Value{
						From: 10,
						To: 99,
						Desc: "Level limit",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Dim Level on &#39;Switch On&#39;",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Use previous light level",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define light level in %",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 51,
				Name: "Pause before pulse",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 60,
						Desc: "",
						Unit: "10/156 ms",
					},
				},
			},
			&parameter{
				ID: 52,
				Name: "Pause after pulse",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 60,
						Desc: "",
						Unit: "10/156 ms",
					},
				},
			},
			&parameter{
				ID: 53,
				Name: "Pulse width",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 20,
						Desc: "",
						Unit: "10/156 ms",
					},
				},
			},
			&parameter{
				ID: 54,
				Name: "Pulse type",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Long pulse",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Short pulse",
						Unit: "",
					},
				},
			},
		},
	}
}
func New015900010001() *Device{
	return &Device{
		Brand: "Qubino",
		Product: "Flush dimmer",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0159",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0030,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Input 1 switch type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable switch type (push button)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable switch type",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Input 2 contact type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "NO (normally open) input type",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "NC (normally close) input type",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Input 3 contact type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "NO (normally open) input type",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "NC (normally close) input type",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Deactivate/Activate ALL ON / ALL OFF",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON active, ALL OFF active",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "ALL ON is not active, ALL OFF is not\nactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALL ON is not active, ALL OFF active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALL ON active, ALL OFF is not active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "State of device after power failure",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Flush dimmer module saves its state\nbefore power failure (it returns to the last\nposition saved before a power failure).",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flush dimmer module does not save the\nstate after a power failure, it returns to &#34;off&#34;\nposition.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Power report on power change",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Reporting enabled.\nPower report is send (push) only when actual\npower in Watts in real time changes for more\nthan set percentage comparing to previous\nactual power in Watts, step is 1%.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Power report by time interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "1 second – 65535 seconds. Reporting enabled. Power report is send with time interval set by entered value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 61,
				Name: "Maximum dimming value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 2,
						To: 99,
						Desc: "2% – 99%, step is 1%. Maximum dimming values is set by entered value.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 60,
				Name: "Minimum dimming value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 98,
						Desc: "1% – 98%, step is 1%. Minimum dimming values is set by entered value.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 65,
				Name: "Dimming time (soft on/off)",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Define the dimming time.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 66,
				Name: "Dimming time when key pressed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Define the dimming time.",
						Unit: "sec",
					},
				},
			},
		},
	}
}
func New015900010051() *Device{
	return &Device{
		Brand: "Qubino",
		Product: "Flush dimmer ZMNHDD1",
		Description: "\n            \n          ",

		ManufacturerID: "0159",
		ProductType: "0001",
		ProductID: "0051",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0059,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Input 1 switch type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 - mono-stable switch type (push button) – button quick press turns between previous set dimmer value and zero",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable switch type",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Input 2 switch type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 - mono-stable switch type (push button) – button quick press turns between previous set dimmer value and zero",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable switch type",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Input 2 contact type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "NO (normally open) input type",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "NC (normally close) input type",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Input 3 contact type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "NO (normally open) input type",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "NC (normally close) input type",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Deactivate/Activate ALL ON / ALL OFF",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON active, ALL OFF active",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "ALL ON is not active, ALL OFF is not\nactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALL ON is not active, ALL OFF active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALL ON active, ALL OFF is not active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Automatic turning OFF output after set time ",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto OFF disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32536,
						Desc: "\n                     1second - 32536 seconds Auto OFF enabled with\ndefine time, step is 1 second.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Automatic turning ON output after set time ",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto ON disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32536,
						Desc: "\n                     1second - 32536 seconds Auto ON enabled with\ndefined time, step is 1 second.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Enable/Disable 3way switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "single push button (connected to I1)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "3 way switch (connected to I1 and I2)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Enable/Disable Double click function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "double click disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "double click enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Saving the state of the device after a power\nfailure",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Flush dimmer module saves its state before power failure (it\nreturns to the last position saved before a power failure).",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flush dimmer module does NOT save the state after a power\nfailure, it returns to &#34;off&#34; position.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Power reporting in Watts on power change",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "reporting disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Reporting enabled.\nPower report is send (push) only when actual\npower in Watts in real time changes for more\nthan set percentage comparing to previous\nactual power in Watts, step is 1%.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Power reporting in Watts by time interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "reporting disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32767,
						Desc: "Reporting enabled.\nPower report is sent (push) only when actual\npower in Watts in real time changes for more\nthan set percentage comparing to previous\nactual power in Watts, step is 1%.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 60,
				Name: "Minimum dimming value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 98,
						Desc: "1% - 98%, step is 1%. Minimum dimming values is set\nby entered value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 61,
				Name: "Maximum dimming value",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 2,
						To: 99,
						Desc: " 2% - 99%, step is 1%. Maximum dimming values is set\nby entered value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 65,
				Name: "Dimming time (soft on/off)",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: " 100 mseconds - 2550 mseconds (2,55s), step is 100 mseconds.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 66,
				Name: "Dimming time when key pressed",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "1 second – 255 seconds.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 67,
				Name: "Ignore start level",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "respect start level",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ignore start level",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 68,
				Name: "Dimming duration",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "dimming duration according to parameter 66",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "1 - 127 (from 1 to 127 seconds).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 100,
				Name: "Enable / Disable Endpoints I2 or select\nNotification Type and Event",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Home Security; Motion Detection, unknown loc",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Carbon Monoxide; Carbon Monoxide detected, unknown\nlocation.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Carbon Dioxide; Carbon Dioxide detected, unknown location.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Water Alarm; Water Leak detected, unknown loc.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Heat Alarm; Overheat detected, unknown loc.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Smoke Alarm; Smoke detected, unknown loc.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Endpoint, I2 disabled.",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Sensor binary",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 101,
				Name: "Enable / Disable Endpoints I3 or select\nNotification Type and Event",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Home Security; Motion Detection, unknown loc",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Carbon Monoxide; Carbon Monoxide detected, unknown\nlocation.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Carbon Dioxide; Carbon Dioxide detected, unknown location.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Water Alarm; Water Leak detected, unknown loc.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Heat Alarm; Overheat detected, unknown loc.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Smoke Alarm; Smoke detected, unknown loc.",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Endpoint, I3 disabled.",
						Unit: "",
					},
					Value{
						From: 9,
						To: 9,
						Desc: "Sensor binary",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 110,
				Name: "Temperature sensor offset settings\nNotification Type and Event",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 32536,
						To: 32536,
						Desc: "32536 - offset is 0.0C",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "From 1 to 100 - value from 0.1 °C to 10.0 °C is added to actual\nmeasured temperature. ",
						Unit: "",
					},
					Value{
						From: 1001,
						To: 1100,
						Desc: "From 1001 to 1100 - value from -0.1 °C to -10.0 °C is subtracted\nto actual measured temperature ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 120,
				Name: "Digital temperature sensor reporting",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "reporting  disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "1 - 127 = 0,1°C - 12,7°C, step is 0,1°C.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New015900020001() *Device{
	return &Device{
		Brand: "Qubino",
		Product: "ZMNHBA2",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0159",
		ProductType: "0002",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0073,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "switch type - Input 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Bi-stable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "switch type - Input 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Activate / deactivate functions ALL ON/ALL OFF",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All On is not active - All Off is not active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All On is not active - All Off is active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All On is active - All Off is not active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Automatic turning Off relay Q2 after set time ",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Off disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Time in ms (Max: 65535)",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Automatic turning Off relay Q2 after set time ",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Off disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Time in ms (Max: 65535)",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Saving the state of the relays Q1 and Q2 after a power failure",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Flush 2 relays module saves its state before power failure (it returns to the last position saved before a power failure)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flush 2 relays module does not save the state after a power failure, it returns to &#34;off&#34; position.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Power reporting in Watts on power change for Q1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reporting disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Power report is send (push) only when actual power in Watts in real time changes for more than set percentage comparing to previous actual power in Watts, step is 1%.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Power reporting in Watts on power change for Q2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reporting disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Power report is send (push) only when actual power in Watts in real time changes for more than set percentage comparing to previous actual power in Watts, step is 1%.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Power reporting in Watts by time interval for Q1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Reporting enabled, Power report is send with time interval set by entered value. (Max: 65535ms)",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Power reporting in Watts by time interval for Q1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Reporting enabled, Power report is send with time interval set by entered value. (Max: 65535ms)",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 78,
				Name: "Forced Flush shutter calibration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Calibration",
						Unit: "",
					},
				},
			},
		},
	}
}
func New015900020002() *Device{
	return &Device{
		Brand: "Qubino",
		Product: "ZMNHAA2",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0159",
		ProductType: "0002",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0073,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "switch type - Input 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Bi-stable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "switch type - Input 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Activate / deactivate functions ALL ON/ALL OFF",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All On is not active - All Off is not active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All On is not active - All Off is active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All On is active - All Off is not active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Automatic turning Off relay Q2 after set time ",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Off disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Time in ms (Max: 65535)",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Automatic turning Off relay Q2 after set time ",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Off disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Time in ms (Max: 65535)",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Saving the state of the relays Q1 and Q2 after a power failure",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Flush 2 relays module saves its state before power failure (it returns to the last position saved before a power failure)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flush 2 relays module does not save the state after a power failure, it returns to &#34;off&#34; position.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Power reporting in Watts on power change for Q1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reporting disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Power report is send (push) only when actual power in Watts in real time changes for more than set percentage comparing to previous actual power in Watts, step is 1%.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Power reporting in Watts on power change for Q2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reporting disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Power report is send (push) only when actual power in Watts in real time changes for more than set percentage comparing to previous actual power in Watts, step is 1%.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Power reporting in Watts by time interval for Q1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Reporting enabled, Power report is send with time interval set by entered value. (Max: 65535ms)",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Power reporting in Watts by time interval for Q2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Reporting enabled, Power report is send with time interval set by entered value. (Max: 65535ms)",
						Unit: "ms",
					},
				},
			},
		},
	}
}
func New015900020051() *Device{
	return &Device{
		Brand: "Qubino",
		Product: "Flush 2 relays",
		Description: "\n            \n          ",

		ManufacturerID: "0159",
		ProductType: "0002",
		ProductID: "0051",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "7",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0059,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Input 1 switch type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable switch type (push button)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable switch type",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Input 2 switch type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable switch type (push button)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable switch type ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Activate / deactivate functions ALL ON/ALL OFF",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ALL ON is not active ALL OFF is not active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALL ON is not active ALL OFF active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALL ON active ALL OFF is not active",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON active, ALL OFF active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Automatic turning off output Q1 after set time",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto OFF disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32535,
						Desc: "\n32535 seconds (325,35s) Auto OFF enabled with define time, step is 1s or 10ms according to parameter nr.15\n",
						Unit: "x 0,01 sec",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Automatic turning on output Q1 after set time",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto ON disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32535,
						Desc: "\n32536 seconds (325,35s) Auto ON enabled with define time, step is 1s or 10ms according to parameter nr.15\n",
						Unit: "x 0,01 sec",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Time Unit",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "seconds selected",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "milliseconds selected",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Saving the state of the relay after a power failure",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Flush 2 relay module saves its state before power failure (it returns to the last position saved before a power failure).\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flush 2 relay module does not save the state after a power failure, it returns to &#34;off&#34; position.\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 63,
				Name: "Output Q1 Switch selection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "When system is turned off the output is 0V (NC).",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "\nWhen system is turned off the output is 230V or 24V (NO).\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 110,
				Name: "Temperature sensor offset settings",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "offset is 0.0°C",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "\nValue from 0.1 °C to 10.0 °C is added to actual measured temperature.\n",
						Unit: "",
					},
					Value{
						From: 1001,
						To: 1100,
						Desc: "\nValue from -0.1 °C to -10.0 °C is subtracted to actual measured temperature.\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 120,
				Name: "Digital temperature sensor reporting",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reporting disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define the temperature change that is reported.",
						Unit: "x 0,1°C",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Automatic turning off output Q2 after set time ",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto OFF disabled ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32535,
						Desc: "1second (0,01s) – 32535 seconds (325,35s) Auto OFF enabled with define time, step is 1s or 10ms according to parameter nr.15",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Automatic turning on output Q2 after set time ",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto ON disabled ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32535,
						Desc: "1second (0,01s) – 32536 seconds (325,35s) Auto ON enabled with define time, step is 1s or 10ms according to parameter nr.15",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Power reporting in Watts on power change for Q1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reporting Disabled ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Power report is send (push) only when actual power in Watts in real time changes for more than set percentage comparing to previous actual power in Watts, step is 1%.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Power reporting in Watts on power change for Q2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reporting Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Reporting enabled. Power report is send (push) only when actual power in Watts in real time changes for more than set percentage comparing to previous actual power in Watts, step is 1%.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Power reporting in Watts by time interval for Q1",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reporting Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32535,
						Desc: "Reporting enabled, Power report is send with time interval set by entered value.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Power reporting in Watts by time interval for Q2",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reporting Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32535,
						Desc: "Reporting enabled, Power report is send with time interval set by entered value. ",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 64,
				Name: "Output Q2 Switch selection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "When system is turned off the output is 0V (NC).",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "When system is turned off the output is 230V (NO).",
						Unit: "",
					},
				},
			},
		},
	}
}
func New015900020053() *Device{
	return &Device{
		Brand: "Qubino",
		Product: "Flush 1D Relay",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0159",
		ProductType: "0002",
		ProductID: "0053",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "7",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0059,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Input 1 switch type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable switch type (push button)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable switch type ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Input 2 contact type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "NO (normally open) input type",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "NC (normally close) input type",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Activate / deactivate functions ALL ON/ALL OFF",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "ALL ON is not active ALL OFF is not active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ALL ON is not active ALL OFF active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "ALL ON active ALL OFF is not active",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ALL ON active, ALL OFF active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Automatic turning off output after set time",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto OFF disabled ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32535,
						Desc: "32535 seconds (325,35s) Auto OFF enabled with define time, step is 1s or 10ms according to parameter nr.15",
						Unit: "x 0,01 sec",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Automatic turning on output after set time",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto ON disabled ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32535,
						Desc: "32536 seconds (325,35s) Auto ON enabled with define time, step is 1s or 10ms according to parameter nr.15",
						Unit: "x 0,01 sec",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Time Unit",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "seconds selected",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "milliseconds selected",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Saving the state of the relay after a power failure",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Flush 1D relay module saves its state before power failure (it returns to the last position saved before a power failure).",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flush 1D relay module does not save \nthe state after a power failure, it returns to  \n&#34;off&#34; position.\n",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 63,
				Name: "Output Switch selection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "When system is turned off the output is 0V (NC).",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "When system is turned off the output is 230V or 24V (NO).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 100,
				Name: "Enable / Disable Endpoint I2 or select Notification Type and Event",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Endpoint, I2 disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Home Security; Motion Detection, unknown location",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Carbon Monoxide; Carbon Monoxide detected, unknown location.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Carbon Dioxide; Carbon Dioxide detected, unknown location.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Water Alarm; Water Leak detected, unknown location.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Heat Alarm; Overheat detected, unknown location.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Smoke Alarm; Smoke detected, unknown location.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 110,
				Name: "Temperature sensor offset settings",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "offset is 0.0°C",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Value from 0.1 °C to 10.0 °C is added to actual measured temperature.",
						Unit: "",
					},
					Value{
						From: 1001,
						To: 1100,
						Desc: "Value from -0.1 °C to -10.0 °C is subtracted to actual measured temperature.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 120,
				Name: "Digital temperature sensor reporting",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reporting disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define the temperature change that is reported.",
						Unit: "x 0,1°C",
					},
				},
			},
		},
	}
}
func New015900030002() *Device{
	return &Device{
		Brand: "Qubino",
		Product: "ZMNHCA2",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0159",
		ProductType: "0003",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0073,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "switch type - Input 1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Bi-stable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "switch type - Input 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Activate / deactivate functions ALL ON/ALL OFF",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All On is not active - All Off is not active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All On is not active - All Off is active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All On is active - All Off is not active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Automatic turning Off relay Q2 after set time ",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Off disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Time in ms (Max: 65535)",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Automatic turning Off relay Q2 after set time ",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Auto Off disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Time in ms (Max: 65535)",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Saving the state of the relays Q1 and Q2 after a power failure",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Flush 2 relays module saves its state before power failure (it returns to the last position saved before a power failure)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flush 2 relays module does not save the state after a power failure, it returns to &#34;off&#34; position.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Power reporting in Watts on power change for Q1",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reporting disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Power report is send (push) only when actual power in Watts in real time changes for more than set percentage comparing to previous actual power in Watts, step is 1%.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 41,
				Name: "Power reporting in Watts on power change for Q2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reporting disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Power report is send (push) only when actual power in Watts in real time changes for more than set percentage comparing to previous actual power in Watts, step is 1%.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Power reporting in Watts by time interval for Q1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Reporting enabled, Power report is send with time interval set by entered value. (Max: 65535ms)",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Power reporting in Watts by time interval for Q2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Reporting enabled, Power report is send with time interval set by entered value. (Max: 65535ms)",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 78,
				Name: "Forced Flush shutter calibration",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "inactive",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Calibration",
						Unit: "",
					},
				},
			},
		},
	}
}
func New015900050001() *Device{
	return &Device{
		Brand: "Qubino",
		Product: "ZMNHIA2",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0159",
		ProductType: "0005",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0073,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "0",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "switch type - Input 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Bi-stable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Schaltertyp - Input 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Schaltertyp - Input 3",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "mono-stable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "bi-stable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Input 2 contact-type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "NO (normal open)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "NC (normal close)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Input 3 contact-type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "NO (normal open)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "NC (normal close)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Aktiviert/Deaktiviert alle Funktionen",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All On is not active - All Off is not active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All On is not active - All Off is active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All On is active - All Off is not active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: " Set point set by I2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 990,
						Desc: "0.0 °C to 99.0 °C",
						Unit: "",
					},
					Value{
						From: 1001,
						To: 1150,
						Desc: "-0.1 °C to -15.0 °C",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: " Set point set by I2",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 990,
						Desc: "0.0 °C to 99.0 °C",
						Unit: "",
					},
					Value{
						From: 1001,
						To: 1150,
						Desc: "-0.1 °C to -15.0 °C",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Saving the state of the relay after a power failure",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Flush 2 relays module saves its state before power failure (it returns to the last position saved before a power failure)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flush 2 relays module does not save the state after a power failure, it returns to &#34;off&#34; position.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 40,
				Name: "Power reporting in Watts on power change",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Reporting disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Power report is send (push) only when actual power in Watts in real time changes for more than set percentage comparing to previous actual power in Watts, step is 1%.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 42,
				Name: "Power reporting in Watts by time interval for Q1",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Report disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Reporting enabled, Power report is send with time interval set by entered value. (Max: 65535ms)",
						Unit: "ms",
					},
				},
			},
			&parameter{
				ID: 43,
				Name: "Hysteresis On",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "0.0 °C to 12.7 °C",
						Unit: "",
					},
					Value{
						From: 128,
						To: 255,
						Desc: "- 0.1 °C to -12.7 °C",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 44,
				Name: "Hysteresis Off",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "0.0 °C to 12.7 °C",
						Unit: "",
					},
					Value{
						From: 128,
						To: 255,
						Desc: "- 0.1 °C to -12.7 °C",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 45,
				Name: "Antifreeze",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "0.0 °C to 12.7 °C",
						Unit: "",
					},
					Value{
						From: 128,
						To: 255,
						Desc: "- 0.1 °C to -12.6 °C",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 60,
				Name: "Too low temperature limit",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1000,
						Desc: "0.1°C – 100.0°C, step is 0.1°C",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 61,
				Name: "Too high temperature limit",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 1,
						To: 1000,
						Desc: "0.1°C – 100.0°C, step is 0.1°C",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 63,
				Name: "Switch selection",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "When system is turned off the output is 0 V",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "When system is turned off the output is 230 V",
						Unit: "",
					},
				},
			},
		},
	}
}
func New015a10070002() *Device{
	return &Device{
		Brand: "Jintaobao",
		Product: "Curtain Motor",
		Description: "\n            \n          ",

		ManufacturerID: "015a",
		ProductType: "1007",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 17,
				Name: "Motor Open, Go to Direction B",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 18,
				Name: "Motor Stop",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 19,
				Name: "Motor Close, Go to Direction A",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 20,
				Name: "Motor Position",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "Set the parameter to move motor to desired position.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Return motor current position",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "Define the value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Motor revert direction",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 23,
				Name: "Clear motor lead tail endpoint setting",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 32,
				Name: "Return motor status flag",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "motor is closing, go to direction A",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "motor is opening, go to direction B",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "motor endpoint A has setting",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "motor endpoint B has setting",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "direction revert",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Enable manual pulling function",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 34,
				Name: "Disable manual pulling function",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
		},
	}
}
func New015e80150001() *Device{
	return &Device{
		Brand: "Locstar",
		Product: "Single latch door lock",
		Description: "\n            \n          ",

		ManufacturerID: "015e",
		ProductType: "8015",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0022,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x004c,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0077,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008b,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New015f00000000() *Device{
	return &Device{
		Brand: "MCOHome ",
		Product: "Touch Panel Switch ",
		Description: "\n            \n            \n          ",

		ManufacturerID: "015f",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New015f00010001() *Device{
	return &Device{
		Brand: "Mcohome",
		Product: "Mini Energy Dimmer",
		Description: "\n            \n          ",

		ManufacturerID: "015f",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "0x00: Switch(2 state switch mode)\n0x01: Button( Momentary button mode)\n",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New015f00020001() *Device{
	return &Device{
		Brand: "Mcohome",
		Product: "Mini Energy Switch",
		Description: "\n            \n          ",

		ManufacturerID: "015f",
		ProductType: "0002",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "0x00: Switch(2 state switch mode)\n0x01: Button( Momentary button mode)\n",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New015f31020202() *Device{
	return &Device{
		Brand: "MCOHome",
		Product: "Touch Panel Switch",
		Description: "\n            \n            \n          ",

		ManufacturerID: "015f",
		ProductType: "3102",
		ProductID: "0202",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New015f41020201() *Device{
	return &Device{
		Brand: "MCOHome",
		Product: "Touch Panel Switch",
		Description: "\n            \n            \n          ",

		ManufacturerID: "015f",
		ProductType: "4102",
		ProductID: "0201",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New015f41020202() *Device{
	return &Device{
		Brand: "MCOHome",
		Product: "Touch Panel Switch",
		Description: "\n            \n            \n          ",

		ManufacturerID: "015f",
		ProductType: "4102",
		ProductID: "0202",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New015f51020103() *Device{
	return &Device{
		Brand: "MCOHome ",
		Product: "Touch Panel Switch ",
		Description: "\n            \n          ",

		ManufacturerID: "015f",
		ProductType: "5102",
		ProductID: "0103",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New016000000000() *Device{
	return &Device{
		Brand: "We.R",
		Product: "Z-Wave Dongle",
		Description: "\n            \n          ",

		ManufacturerID: "0160",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New016330010301() *Device{
	return &Device{
		Brand: "Prowell",
		Product: "ZW-702",
		Description: "\n            \n          ",

		ManufacturerID: "0163",
		ProductType: "3001",
		ProductID: "0301",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0020,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0062,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x004e,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008b,
				Secure: true,
				NonSecure: false,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New016500010001() *Device{
	return &Device{
		Brand: "NodOn",
		Product: "Z-Wave&#43; Smart Plug ON/OFF",
		Description: "\n            \n          ",

		ManufacturerID: "0165",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0022,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Default State",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "OFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Status before Power Failure",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Power Failure",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 67,
						Desc: "The value may be the sum of available values.\nFor example, if you want to activate Power Failure and\nenable group 4 &amp; 5, the parameter value is 1&#43;2&#43;4=7.\n\n1 = Power Failure detection disable\n2 = Power Failure enable (report to Lifeline only)\n3 = Enable group 4\n4 = Enable group 5\n8 = Enable group 6\n16 = Enable group 7\n32 = Enable group 8",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Follow State",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 3,
						Desc: "This parameter allows to enable or deactivate Group 2\n&amp; Group 3.\n\nDESCRIPTION:\n0 = Group 2 &amp; Group 3 disable\n1 = Group 2 enable\n2 = Group 3 enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Always On",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Always ON disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Always ON enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Alarm Type 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 6,
				Name: "ALARM SPECIFICATIONS Type1",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 7,
				Name: "Alarm Type 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 8,
				Name: "ALARM SPECIFICATIONS Type2",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 9,
				Name: "Alarm Type 3",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 10,
				Name: "ALARM SPECIFICATIONS Type3",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 11,
				Name: "Alarm Type 4",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 12,
				Name: "ALARM SPECIFICATIONS Type4",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 13,
				Name: "Alarm Type 5",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 14,
				Name: "ALARM SPECIFICATIONS Type5",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 15,
				Name: "Alarm Type 6",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 16,
				Name: "ALARM SPECIFICATIONS Type6",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 17,
				Name: "Alarm Type 7",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 18,
				Name: "ALARM SPECIFICATIONS Type7",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 19,
				Name: "Alarm Type 8",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 20,
				Name: "ALARM SPECIFICATIONS Type8",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New016500010003() *Device{
	return &Device{
		Brand: "NodOn",
		Product: "Z-Wave Plus Micro Smart Plug ON/OFF",
		Description: "\n            \n          ",

		ManufacturerID: "0165",
		ProductType: "0001",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "4",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Default State",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "OFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Status before power outage",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Follow State",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Group 2 &amp; Group 3 disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 3,
						Desc: "1=Group 2 enable; 2=Group 3 enable; The value may be the sum of available values.\nFor example, if you want to enable Group 2 &amp; 3, the parameter value is 1&#43;2=3. ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Always On",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Always ON disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Always ON enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Power Auto-Sending Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Power Auto-Polling Report Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Power Auto-Polling Report Enable with 1% (to100%)\ndifferential",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Overload Report",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Overload Report Disable (Not Recommended)",
						Unit: "",
					},
					Value{
						From: 1,
						To: 2000,
						Desc: "Overload Report enable with a upper limit of 1 W\n(to 2000 W)",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "Energy Auto-Sending Report",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Energy Auto-Polling Report Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Energy Auto-Polling Report enable with 1 Wh (to\n65535 Wh) diffential",
						Unit: "Wh",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "Metering Pulse",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Metering Pulse disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Metering Pulse enable and send report every\n1 s (to 65535 s)",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "Power High Threshold",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Power High Threshold disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 65535,
						Desc: "Power High Threshold enable\nwith the value from 1 W (to 65535 W)",
						Unit: "W",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "Power Low Threshold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Power Low Threshold disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Power Low Threshold enable\nwith the value from 1 W (to 65535 W)",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "Power Threshold Action",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Power Threshold Action is disable.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 20,
						Desc: "1=Power High Threshold Action is enable\nand send the command OFF to Group 9; 3=Power High Threshold Action is enable\nand send the command ON to Group 9; 4=Power Low Threshold Action is enable\nand send the command OFF to Group 10; 12=Power Low Threshold Action is enable\nand send the command ON to Group 10; The value may be the sum of available values.\nFor example, if you want:\n- Power High Threshold Action is enable and sent ON to Group 9(3)\n- Power Low Threshold Action is enable and sent OFF to Group 10 (4)\nthe parameter value must be 3&#43;4=7.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New016500020001() *Device{
	return &Device{
		Brand: "NodOn®",
		Product: "OCTAN Remote",
		Description: "\n            \n          ",

		ManufacturerID: "0165",
		ProductType: "0002",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0022,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "BUTTONS 1&amp;3 PROFILE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Scene ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Mono",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Duo",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "BUTTONS 2&amp;4 PROFILE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Scene ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Mono",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Duo",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "SCENE TYPE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Central Scene",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Scene Activation",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "BUTTON 1 CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 2",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switch ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switch OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "BUTTON 2 CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 3",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switch ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switch OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "BUTTON 3 CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 4",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switch ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switch OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "BUTTON 4 CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 5",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switch ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switch OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "LED MANAGEMENT",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No LED",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flash Blue after button press",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Blinking to confirm command",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Both options above (1&amp;2)",
						Unit: "",
					},
				},
			},
		},
	}
}
func New016500020002() *Device{
	return &Device{
		Brand: "NodOn®",
		Product: "Soft Remote",
		Description: "\n            \n          ",

		ManufacturerID: "0165",
		ProductType: "0002",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "BUTTONS 1&amp;3 PROFILE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Scene",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Mono",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Duo",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "BUTTONS 2&amp;4 PROFILE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Scene",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Mono",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Duo",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "SCENE TYPE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Central Scene",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Scene Activation",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "BUTTON 1 CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 2",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switch ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switch OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "BUTTON 2 CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 3",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switch ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switch OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "BUTTON 3 CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 4",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switch ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switch OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "BUTTON 4 CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 5",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switch ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switch OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "LED MANAGEMENT",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No LED",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flash Blue after button press",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Blinking to confirm command",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Both options above (1&amp;2)",
						Unit: "",
					},
				},
			},
		},
	}
}
func New016500020003() *Device{
	return &Device{
		Brand: "NodOn®",
		Product: "Wall Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0165",
		ProductType: "0002",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0022,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "BUTTONS 1&amp;3 PROFILE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "SCENE",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "MONO",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "DUO",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "BUTTONS 2&amp;4 PROFILE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "SCENE",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "MONO",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "DUO",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "SCENE TYPE",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "CENTRAL SCENE",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "SCENE ACTIVATION",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "BUTTON 1 CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 2",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switch ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switch OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "BUTTON 2 CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 3",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switch ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switch OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "BUTTON 3 CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 4",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switch ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switch OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "BUTTON 4 CONFIGURATION",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Control Group 5",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All Switch ON",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All Switch OFF",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "LED MANAGEMENT",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No LED",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Flash Blue after button press",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Blinking to confirm command",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Both options above (1&amp;2)",
						Unit: "",
					},
				},
			},
		},
	}
}
func New016601000100() *Device{
	return &Device{
		Brand: "Swiid",
		Product: "Cord Switch",
		Description: "\n            \n            \n          ",

		ManufacturerID: "0166",
		ProductType: "0100",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Switchmodus",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch off only",
						Unit: "",
					},
				},
			},
		},
	}
}
func New017100010001() *Device{
	return &Device{
		Brand: "WeBeHome Home Gateway 900",
		Product: "Home Gateway",
		Description: "\n            \n          ",

		ManufacturerID: "0171",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0035,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New017300030002() *Device{
	return &Device{
		Brand: "Leak Gopher",
		Product: "Z-WAVE Valve controller",
		Description: "\n            \n          ",

		ManufacturerID: "0173",
		ProductType: "0003",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New017500010011() *Device{
	return &Device{
		Brand: "devolo",
		Product: "Metering Plug",
		Description: "\n            \n          ",

		ManufacturerID: "0175",
		ProductType: "0001",
		ProductID: "0011",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Watt Meter",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define a time interval (720*5s=3600s=1 hour).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "KWH Meter Report Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 32767,
						Desc: "Define a time interval (6*10min=1 hour).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Threshold of current for Load caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 10,
						To: 1300,
						Desc: "Define a treshold (1300*0.01A = 13A).",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Threshold of KWh for Load caution",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 10000,
						Desc: "Define a treshold.",
						Unit: "kWh",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Restore switch state mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: " Switch off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Last switch state",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Mode of Switch Off function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "LED indication mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Show Switch State：When switch is on, LED is on. When switch is off, LED\nis off.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "When switch is on, LED is off. When switch is off, LED\nis on.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "When the state of switch changes, LED will be on only\none second, then LED keeps off.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Auto off timer",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: " Disable auto off\nfunction",
						Unit: "",
					},
					Value{
						From: 1,
						To: 32767,
						Desc: "Define a time interval for auto off.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "RF off command mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "It switches to OFF state.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The switch off command will be ignored.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "It switches to the inverse of current state.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "It switches to ON state.\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New01750002000d() *Device{
	return &Device{
		Brand: "devolo",
		Product: "Motion Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0175",
		ProductType: "0002",
		ProductID: "000d",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0031,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Basic Set Level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Device is turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Set a value for dimming purposes.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Device is turned on.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "PIR Sensitivity",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Motion detection is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Adjust the sensitivity.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Light Threshold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Illumination detection is disabled. Associated devices won&#39;t be turned on.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define a treshold",
						Unit: "",
					},
					Value{
						From: 100,
						To: 100,
						Desc: "Illumination detection is disabled. Associated devices will always be turned on.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Operation Mode",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 means enable test mode, 0 means disable normal mode. Notice:\nThis bit only effect by the DIP Switch\nsetting to program mode.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Disable the door/window\nfunction.\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Setting the temperature scale.\n 0: Fahrenheit, 1:Celsius",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: " Disable the illumination report\nafter event triggered.\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable the temperature report\nafter event triggered.\n",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Disable the back key release\ninto test mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "MultSensor  Function Switch",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable magnetic integrate\nillumination.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable PIR integrate\nIllumination.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Disable magnetic integrate PIR\n(Default is Disable)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "When Bit2 is 0 (Enable), Are the\ndevice and the lighting in the same\nroom?\n 0: In the same room(Default),\n 1: In the different room. Notice: If this bit is 1, it is\nrecommended also set the Bit1 to 1,\ncause the PIR triggered, doesn&#39;t\nmean the people in that room.\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Disable delay 5 seconds to turn\noff the light, when door/window\nclosed.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable auto turn off the light,\nafter door/window opened to turn on\nthe light. Notice: If bit2 is zero, this setting is\nuseless.\nNotice: If the configuration No.9 is\nzero, this setting is useless.\n",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Customer Function",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable sending motion OFF\nreport. Note: Depends on the Bit4,\n0: Report Notification CC,\nType: 0x07, Event: 0xFE\n1: Sensor Binary Report,\nType: 0x0C, Value: 0x00",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable PIR super sensitivity\nmode.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Enable don&#39;t send out BASIC\nOFF after door closed.\n",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Notification Type,\n 0: Using Notification Report.\n 1: Using Sensor Binary Report.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable Multi CC in auto report.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Disable to report battery state\nwhen the device triggered.\n",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "PIR ReDetect  Interval Time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 7,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Turn Off Light Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Associated device won&#39;t be turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Auto Report Battery Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable auto reports.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Auto Report Illumination Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable auto report.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Auto Report Temperature Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable auto report.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Auto Report Tick Interval",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All auto reports are disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Define the duration of one tick.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Temperature Differential Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define a temperature differential to report.",
						Unit: "°F",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Illumination Differential Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define an illumination differential to report.",
						Unit: "%",
					},
				},
			},
		},
	}
}
func New01750002000e() *Device{
	return &Device{
		Brand: "devolo",
		Product: "Door/Window Contact",
		Description: "\n            \n          ",

		ManufacturerID: "0175",
		ProductType: "0002",
		ProductID: "000e",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0030,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0031,
				Secure: true,
				NonSecure: false,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 2,
				Name: "Basic Set Level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Turn off associated devices.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Define a value for dimming purposes.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Turn on associated devices.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Light Threshold",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 means turn off illumination detected\nfunction. And never turn on the light.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Define a value: 1 means darkest, \n99 means brightest.",
						Unit: "",
					},
					Value{
						From: 100,
						To: 100,
						Desc: "100 means turn off illumination\ndetected function. And always turn on\nthe light.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Operation Mode",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " 1 means enable test mode,\n 0 means disable normal mode. Notice:\nThis bit only effect by the DIP Switch\nsetting to program mode",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Disable the door/window\nfunction.\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: " Setting the temperature scale.\n 0: Fahrenheit, 1:Celsius",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Disable the illumination report\nafter event triggered.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable the temperature report\nafter event triggered.\n",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: " Disable the back key release\ninto test mode.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "MultiSensor  Function Switch",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable magnetic integrate\nillumination.\n",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " Disable PIR integrate\nIllumination.\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Disable magnetic integrate PIR\n(Default is Disable).",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "When Bit2 is 0 (Enable), Are the\ndevice and the lighting in the same\nroom?\n 0: In the same room(Default),\n 1: In the different room. Notice: If this bit is 1, it is\nrecommended also set the Bit1 to 1,\ncause the PIR triggered, doesn&#39;t\nmean the people in that room.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Disable delay 5 seconds to turn\noff the light, when door/window\nclosed.\n",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable auto turn off the light,\nafter door/window opened to turn on\nthe light. Notice: If bit2 is zero, this setting is\nuseless. Notice: If the configuration No.9 is\nzero, this setting is useless.\n\n ",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Customer Function",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: " Enable sending motion OFF\nreport. \nNote: Depends on the Bit4,\n0: Report Notification CC,\nType: 0x07, Event: 0xFE\n1: Sensor Binary Report,\nType: 0x0C, Value: 0x00\n",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: " Enable PIR super sensitivity\nmode.\n",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Enable don&#39;t send out BASIC\nOFF after door closed.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Notification Type, \n0: Using Notification Report, \n1: Using Sensor Binary Report.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Disable Multi CC in auto report.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: " Disable to report battery state\nwhen the device triggered.",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Auto Report Battery Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 means turn off auto report battery.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Auto Report Door/Windo w State Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 means turn off auto report.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Auto Report Illumination Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 means turn off auto report ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Auto Report Temperature Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 means turn off auto report",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define a time interval.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Auto Report Tick Interval",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All auto report function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Adjust the number of ticks.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Temperature Differential Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 means turn off this function. ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define a temperature differential.",
						Unit: "°F",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Illumination Differential Report",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 means turn off this function. ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 127,
						Desc: "Define an illumination differential.",
						Unit: "%",
					},
				},
			},
		},
	}
}
func New017501000101() *Device{
	return &Device{
		Brand: "devolo",
		Product: "4 button Wall Controller",
		Description: "\n            \n          ",

		ManufacturerID: "0175",
		ProductType: "0100",
		ProductID: "0101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Button 1 and 3 pair mode ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Button 2 and 4 pair mode ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Command to Control Group A ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Command to Control Group B",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Command to Control Group C ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Command to Control Group D",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway ",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Switch All Commands",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only ",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Invert buttons ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "Blocks wakeup even when wakeup interval is set ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Wakeup is blocked",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Wakeup is possible if configured accordingly.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Unsolicited Battery Report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To same node as wake up notification ",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Broadcast to neighbours",
						Unit: "",
					},
				},
			},
		},
	}
}
func New017600010002() *Device{
	return &Device{
		Brand: "Telldus",
		Product: "TellStick ZNet Lite",
		Description: "\n            \n          ",

		ManufacturerID: "0176",
		ProductType: "0001",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0075,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New017600050001() *Device{
	return &Device{
		Brand: "Telldus",
		Product: "Door/window sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0176",
		ProductType: "0005",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Association Group 2 Command Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Basic",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch Binary",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch Multilevel",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Sent Value Association Group 2",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "Define a dim level which will be transferred.",
						Unit: "%",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Last Value will be sent.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Type of Commands to Association Group 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "normal",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "inverted",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Association Group 3 Command Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Basic",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch Binary",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch Multilevel",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Sent Value Association Group 3",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 99,
						Desc: "Define a dim level which will be transferred.",
						Unit: "%",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Last value will be sent.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Type of Commands to Association Group 3",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "normal",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "inverted",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "LED-Indicator",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Lifeline Command Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Notification",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Sensor Binary",
						Unit: "",
					},
				},
			},
		},
	}
}
func New01785a44414e() *Device{
	return &Device{
		Brand: "Andersen",
		Product: "VeriLock Translator",
		Description: "\n            \n          ",

		ManufacturerID: "0178",
		ProductType: "5a44",
		ProductID: "414e",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Buzzer Volume",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Set the buzzer volume.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Sensor Discovery Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Night Light Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0=False",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1=True",
						Unit: "",
					},
				},
			},
		},
	}
}
func New017c00010002() *Device{
	return &Device{
		Brand: "heatapp! sense",
		Product: "heatapp! sense temperatur sensor z-wave",
		Description: "\n            \n          ",

		ManufacturerID: "017c",
		ProductType: "0001",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "delta temperature",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 2,
						To: 50,
						Desc: "It is possible to set in the range of 2 to 50, in 0.1\ndegree steps.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "temperature scale",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 127,
						Desc: "0 to 127(0x00-0x7F) = Celsius",
						Unit: "",
					},
					Value{
						From: 128,
						To: 255,
						Desc: "-128 to -1 (0x80-0xFF ) = Fahrenheit",
						Unit: "",
					},
				},
			},
		},
	}
}
func New017c00060003() *Device{
	return &Device{
		Brand: "heatapp! floor",
		Product: "floor heating regulator z-wave",
		Description: "\n            \n          ",

		ManufacturerID: "017c",
		ProductType: "0006",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Missing Radio Link time",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 24,
						Desc: "It is possible to set a range of 10min to 4hours. Default value is 30min. The time interval is set in 10 min steps.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Relay Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0 = normal open",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1 = normal close",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2 = switching",
						Unit: "",
					},
				},
			},
		},
	}
}
func New017f00010001() *Device{
	return &Device{
		Brand: "WINK",
		Product: "HUB",
		Description: "\n            \n          ",

		ManufacturerID: "017f",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0091,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0040,
			},
			&CommandClass{
				ID: 0x0042,
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New018200010001() *Device{
	return &Device{
		Brand: "Almond&#43;",
		Product: "Almond&#43;",
		Description: "\n            \n          ",

		ManufacturerID: "0182",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New018302010701() *Device{
	return &Device{
		Brand: "Universe Future",
		Product: "UF Gateway",
		Description: "\n            \n          ",

		ManufacturerID: "0183",
		ProductType: "0201",
		ProductID: "0701",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New018444473031() *Device{
	return &Device{
		Brand: "domitech",
		Product: "Plug In On/Off Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0184",
		ProductType: "4447",
		ProductID: "3031",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "LED Configuration",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The LED indicator will be OFF when the connected appliance is ON, and the LED indicator will be ON when the connected appliance is OFF.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The LED indicator will be ON when the connected appliance is ON and the LED indicator will be OFF when the connected appliance is OFF.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "The LED indicator will always be OFF, regardless of connected appliance being ON or OFF.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New018444473033() *Device{
	return &Device{
		Brand: "domitech",
		Product: "In Wall On/Off Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0184",
		ProductType: "4447",
		ProductID: "3033",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "LED indicator",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The LED indicator will turn ON whenever the connected appliance or light is turned OFF. When the appliance is turned ON, the LED will turn OFF.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The LED indicator will turn ON whenever the connected appliance is turned ON and the LED will turn OFF when the appliance is turned OFF.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "LED will always be turned OFF regardless of the ON/OFF status of the connected appliance.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Orientation of On/Off Rocker Switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The connected light will turn ON by pressing the top side of the rocker switch and turn OFF by pressing the bottom side.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The connected light will turn OFF by pressing the top side of the rocker switch and turn ON by pressing the bottom side.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New018444473034() *Device{
	return &Device{
		Brand: "domitech",
		Product: "In Wall Dimmer Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0184",
		ProductType: "4447",
		ProductID: "3034",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 4,
				Name: "Orientation of ON/OFF rocker switch",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The connected light will turn ON by pressing the top side of the rocker switch and turn OFF by pressing the bottom side.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The connected light will turn OFF by pressing the top side of the rocker switch and turn ON by pressing the bottom side.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Dimming increments",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Indicates the number of increments brightness can be adjusted from low to high and from high to low.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Time interval of brightness change",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Select time out duration to move to the next brightness level. Larger the number, slower the response rate to adust dim levels.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New018447443032() *Device{
	return &Device{
		Brand: "domitech",
		Product: "Plug In Dimmer Switch",
		Description: "\n            \n          ",

		ManufacturerID: "0184",
		ProductType: "4744",
		ProductID: "3032",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 3,
				Name: "LED Indicator",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "The LED indicator will be OFF when the connected appliance is ON, and the LED indicator will be ON when the connected appliance is OFF.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "The LED indicator will be ON when the connected appliance is ON, and the\nLED indicator will be OFF when the connected appliance is OFF.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "The LED indicator is always OFF regardless of the load condition.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Lighting Level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 99,
						Desc: "Define the parameter for the change of the level of the lighting.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Timer",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "Define the time duration of each level.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New018b00400001() *Device{
	return &Device{
		Brand: "Smart Gas Cock",
		Product: "Smart Gas Controller",
		Description: "\n            \n          ",

		ManufacturerID: "018b",
		ProductType: "0040",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0071,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New018e00010001() *Device{
	return &Device{
		Brand: "CLIMAX TECHNOLOGY",
		Product: "Door Contact",
		Description: "\n            \n          ",

		ManufacturerID: "018e",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New018e00010002() *Device{
	return &Device{
		Brand: "CLIMAX TECHNOLOGY",
		Product: "Motion Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "018e",
		ProductType: "0001",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New018e00020001() *Device{
	return &Device{
		Brand: "CLIMAX TECHNOLOGY",
		Product: "SRAC",
		Description: "\n            \n          ",

		ManufacturerID: "018e",
		ProductType: "0002",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New018e00030001() *Device{
	return &Device{
		Brand: "CLIMAX TECHNOLOGY",
		Product: "Smoke Detect",
		Description: "\n            \n          ",

		ManufacturerID: "018e",
		ProductType: "0003",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New018e00030002() *Device{
	return &Device{
		Brand: "CLIMAX TECHNOLOGY",
		Product: "Heat Detector US",
		Description: "\n            \n          ",

		ManufacturerID: "018e",
		ProductType: "0003",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New018e00030003() *Device{
	return &Device{
		Brand: "CLIMAX TECHNOLOGY",
		Product: "Water Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "018e",
		ProductType: "0003",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New018e00030004() *Device{
	return &Device{
		Brand: "CLIMAX TECHNOLOGY",
		Product: "Smoke Detector",
		Description: "\n            \n          ",

		ManufacturerID: "018e",
		ProductType: "0003",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New018e00030009() *Device{
	return &Device{
		Brand: "CLIMAX TECHNOLOGY",
		Product: "Carbon Monoxide Detector",
		Description: "\n            \n          ",

		ManufacturerID: "018e",
		ProductType: "0003",
		ProductID: "0009",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New018e00040002() *Device{
	return &Device{
		Brand: "CLIMAX TECHNOLOGY",
		Product: "Power Meter Switch",
		Description: "\n            \n          ",

		ManufacturerID: "018e",
		ProductType: "0004",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New018f01000101() *Device{
	return &Device{
		Brand: "WallC",
		Product: "4 button Wall Controller",
		Description: "\n            \n          ",

		ManufacturerID: "018f",
		ProductType: "0100",
		ProductID: "0101",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Button 1 and 3 pair mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Button 2 and 4 pair mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separately",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair without double clicks",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "In pair with double clicks",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Action on group 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Action on group 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Action on group 3",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Action on group 4",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch On/Off and Dim (send Basic Set and Switch Multilevel)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch On/Off only (send Basic Set)",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Switch All",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Send Scenes",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Send Preconfigured Scenes",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Control devices in proximity",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "Control DoorLock",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "Central Scene to Gateway",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Typical click time out",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Define a time interval to differentiate between the inputs.",
						Unit: "x 10ms",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Send the following Switch All commands",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Switch off only",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Switch on only",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Switch all on and off",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Invert buttons",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "no ",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "yes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "LED confirmation mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No confirmations",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Confirm button press",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Confirm button press and delivery",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "Blocks wake up even when wake up interval is set",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Wakeup is blocked",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Wakeup is possible if configured accordingly",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Send unsolicited Battery Report on Wake Up",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "No",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "To same node as wake up notification",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Broadcast to neighbours",
						Unit: "",
					},
				},
			},
		},
	}
}
func New019000010001() *Device{
	return &Device{
		Brand: "Building 36 Intelligent Thermostat",
		Product: "Building 36 Intelligent Thermostat",
		Description: "\n            \n          ",

		ManufacturerID: "0190",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "6",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0044,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0045,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0042,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "HVAC System Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Normal",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Heat Pump",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Heat Stages",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 3,
						Desc: "Number of Heat Stages",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Number of Cool Stages	",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 2,
						Desc: "Cool Stages",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Heat Fuel Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Fossil Fuel",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Electric",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Calibration Temperature",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 4294967196,
						To: 100,
						Desc: "Calibration Temperature Range (in deg. F) Precision is tenths of a degree.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Overshoot",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 30,
						Desc: "Overshoot Range (in deg. F) Precision is tenths of a degree.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Swing",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 30,
						Desc: "Swing Range (in deg. F) Precision is tenths of a degree.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Heat Staging Delay",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 60,
						Desc: "Heat Staging Delay",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Cool Staging Delay",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 60,
						Desc: "Cool Staging Delay",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Balance Setpoint",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 950,
						Desc: "Balance Setpont Range (in deg. F) Precision is tenths of a degree.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "Recovery Settings",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Comfort",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Efficient",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "Fan Circulation Period",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 10,
						To: 240,
						Desc: "Fan Circulation Period",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Fan Circulation Duty Cycle",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Duty Cycle",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "Fan Purge Time",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 3600,
						Desc: "Purge Time",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Maximum Heat Setpoint",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 350,
						To: 950,
						Desc: "Max Heat Setpoint Range (in deg. F) Precision is tenths of a degree.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Minimum Heat Setpoint",
				Type: "range",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 17,
				Name: "Maximum Cool Setpoint",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 500,
						To: 950,
						Desc: "Max Cool Setpoint Range(in deg. F) Precision is tenths of a degree.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Minimum Cool Setpoint",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 500,
						To: 950,
						Desc: "Min Cool Setpoint (in deg. F) Precision is tenths of a degree.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Thermostat Lock",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "Compressor Delay",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 60,
						Desc: "Compressor Delay ",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "Demand Response Period",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 10,
						To: 240,
						Desc: "Demand Response Period",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "Demand Response Duty Cycle",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Demand Response Duty Cycle",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "Temperature Display Units",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Fahrenheit",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Celsius",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "HVAC Modes Enabled",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 7,
						To: 7,
						Desc: "Off, Heat, Cool",
						Unit: "",
					},
					Value{
						From: 31,
						To: 31,
						Desc: "Off, Heat, Cool, Auto, Emergency Heat",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Off, Cool",
						Unit: "",
					},
					Value{
						From: 15,
						To: 15,
						Desc: "Off, Heat, Cool, Auto",
						Unit: "",
					},
					Value{
						From: 19,
						To: 19,
						Desc: "Off, Heat, Emergency Heat",
						Unit: "",
					},
					Value{
						From: 23,
						To: 23,
						Desc: "Off, Heat, Cool, Emergency Heat",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Off, Heat",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "Power Source",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "C-Wire",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "Battery",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "Configurable Terminal Setting",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "W3",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "H",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "DH",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "Battery Alert Threshold Low",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Battery Alert Range",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 28,
				Name: "Battery Alert Threshold Very Low",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Very Low Battery Alert Range",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Remote Temperature Enable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "Heat Differential",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 10,
						To: 100,
						Desc: "Heat Differential (in deg. F) Precision is tenths of a degree.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Cool Differential",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 10,
						To: 100,
						Desc: "Cool Differential (in deg. F) Precision is tenths of a degree.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "Temperature Reporting Threshold",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 5,
						To: 20,
						Desc: "Temperature Reporting Range (in deg. F) Precision is tenths of a degree.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "O/B Select",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "O/B Terminal acts as B terminal, closed when cooling",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "O/B Terminal acts as O terminal, closed when heating",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "Z-Wave Echo Association Reports",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enabled",
						Unit: "",
					},
				},
			},
		},
	}
}
func New019000030001() *Device{
	return &Device{
		Brand: "Building 36 Temperature Sensor",
		Product: "Building 36 Temperature Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0190",
		ProductType: "0003",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "4",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Wake up Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 10,
						To: 65535,
						Desc: "Define a wake up interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Low Battery Level",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1000,
						To: 2500,
						Desc: "Define a treshold.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Temperature Reporting Threshold",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable reporting threshold, report temperature every time thermistor is read.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 100,
						Desc: "Set up a treshold.",
						Unit: "x0.1 °F",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Configuration Bitmask",
				Type: "bitset",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Temperature: If 1, Send unsolicited temperature reports, disable if 0",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Battery Reporting Interval",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable autonomous battery reports.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Define a reporting interval based upon the wake up intervals.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Temperature Checking Interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 10,
						To: 255,
						Desc: "Define an interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Temperature Reporting Interval",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable autonomous temperature reports",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Define a reporting interval based upon the wake up intervals.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Temperature Calibration O",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 65436,
						To: 100,
						Desc: "Adjust the reported temperature if needed.",
						Unit: "x0.1°F",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Mandatory Temperature Reporting Interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 60,
						To: 64801,
						Desc: "Define an interval.",
						Unit: "sec",
					},
				},
			},
		},
	}
}
func New019500010001() *Device{
	return &Device{
		Brand: "SmartLife Box",
		Product: "MyAlert",
		Description: "\n            \n          ",

		ManufacturerID: "0195",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New019900010001() *Device{
	return &Device{
		Brand: "Gemalto",
		Product: "Gemalto Multi Access Gateway",
		Description: "\n            \n          ",

		ManufacturerID: "0199",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New019a00030003() *Device{
	return &Device{
		Brand: "Sensative",
		Product: "Strips-MaZw",
		Description: "\n            \n          ",

		ManufacturerID: "019a",
		ProductType: "0003",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0030,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Notification Type",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Binary Sensor report",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Notification report",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Basic report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "LED indication",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Specific event indication (*) Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "On",
						Unit: "",
					},
				},
			},
		},
	}
}
func New019b00010001() *Device{
	return &Device{
		Brand: "HEATIT",
		Product: "Thermostat",
		Description: "\n            \n          ",

		ManufacturerID: "019b",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0031,
				Version: "6",
			},
			&CommandClass{
				ID: 0x0040,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New019c00010001() *Device{
	return &Device{
		Brand: "Visonic",
		Product: "PowerMaster 360",
		Description: "\n            \n          ",

		ManufacturerID: "019c",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New019e00010001() *Device{
	return &Device{
		Brand: "wibutler",
		Product: "wibutler pro",
		Description: "\n            \n          ",

		ManufacturerID: "019e",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x007a,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0087,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "7",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0075,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0045,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0042,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New020000010001() *Device{
	return &Device{
		Brand: "Xuan",
		Product: "An Apps Driven IoT Hub (Gateway)",
		Description: "\n            \n          ",

		ManufacturerID: "0200",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x008f,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "6",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0045,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0042,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0047,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New020600000000() *Device{
	return &Device{
		Brand: "CISCO",
		Product: "Connected Life Gateway",
		Description: "\n            \n          ",

		ManufacturerID: "0206",
		ProductType: "0000",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0046,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x004c,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0075,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0045,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0042,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0047,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New020700270100() *Device{
	return &Device{
		Brand: "Forest Group",
		Product: "Shuttle L Z-Wave",
		Description: "\n            \n          ",

		ManufacturerID: "0207",
		ProductType: "0027",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New020e47543038() *Device{
	return &Device{
		Brand: "domitech",
		Product: "Z-Wave LED Light Bulb",
		Description: "\n            \n          ",

		ManufacturerID: "020e",
		ProductType: "4754",
		ProductID: "3038",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Dim Level",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0, the brightness level will be resume to full brightness when the dt Smart\nBulb is turned ON every time.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1, the brightness level will maintain same dim level as the last setting when\nthe dt Smart Bulb is turned ON again.\n",
						Unit: "",
					},
				},
			},
		},
	}
}
func New022300010001() *Device{
	return &Device{
		Brand: "Schwaiger Home",
		Product: "Schwaiger Home Gateway",
		Description: "\n            \n          ",

		ManufacturerID: "0223",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "7",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New022300010002() *Device{
	return &Device{
		Brand: "TELE System",
		Product: "GetMagic",
		Description: "\n            \n          ",

		ManufacturerID: "0223",
		ProductType: "0001",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "7",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New022a01000100() *Device{
	return &Device{
		Brand: "Timevalve",
		Product: "Timevalve Smart",
		Description: "\n            \n          ",

		ManufacturerID: "022a",
		ProductType: "0100",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "5",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Valve Default Timeout",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 300,
						To: 2400,
						Desc: "Define the valves default timeout.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Remaining Time to Close",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 0,
						To: 35400,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Periodic Report Interval",
				Type: "range",
				Size: 4,
				Values: []Value{
					Value{
						From: 600,
						To: 4294967295,
						Desc: "range: 600~4,294,967,295; Define a time interval.",
						Unit: "sec",
					},
				},
			},
		},
	}
}
func New022d01000001() *Device{
	return &Device{
		Brand: "olleh",
		Product: "IoT home-manager hub(LAN Type)",
		Description: "\n            \n          ",

		ManufacturerID: "022d",
		ProductType: "0100",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New022e00010001() *Device{
	return &Device{
		Brand: "SAMSUNG SDS",
		Product: "Deadbolt Door Lock",
		Description: "\n            \n          ",

		ManufacturerID: "022e",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0062,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0063,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x008b,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x008a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x004e,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Security Function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "System disable",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "System enable",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Request for Enable",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Fail",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Privacy Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Registered User ID",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 20,
						Desc: "Registered user codes",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Platform",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Common",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Samsung SDS",
						Unit: "",
					},
				},
			},
		},
	}
}
func New022e00030003() *Device{
	return &Device{
		Brand: "SAMSUNG SDS",
		Product: "Smart Button",
		Description: "\n            \n          ",

		ManufacturerID: "022e",
		ProductType: "0003",
		ProductID: "0003",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New022e00040004() *Device{
	return &Device{
		Brand: "SAMSUNG SDS",
		Product: "Window/Door Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "022e",
		ProductType: "0004",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New022e00050005() *Device{
	return &Device{
		Brand: "SAMSUNG SDS",
		Product: "PIR Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "022e",
		ProductType: "0005",
		ProductID: "0005",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "SENSOR SENSITIVITY ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 3,
						Desc: "Define the sensor sensitivity from 1 (high) to 3 (low).",
						Unit: "",
					},
				},
			},
		},
	}
}
func New022e00060006() *Device{
	return &Device{
		Brand: "SAMSUNG SDS",
		Product: "Tilt Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "022e",
		ProductType: "0006",
		ProductID: "0006",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0050,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "SENSOR SENSITIVITY ",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 4,
						Desc: "0x01(HIGH_SENSITIVITY) ~ 0x04(LOW_SENSITIVITY)",
						Unit: "",
					},
				},
			},
		},
	}
}
func New022e00070007() *Device{
	return &Device{
		Brand: "SAMSUNG SDS",
		Product: "IoT HUB",
		Description: "\n            \n          ",

		ManufacturerID: "022e",
		ProductType: "0007",
		ProductID: "0007",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0062,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New022e00070008() *Device{
	return &Device{
		Brand: "SAMSUNG SDS",
		Product: "Central Static Controller",
		Description: "\n            \n          ",

		ManufacturerID: "022e",
		ProductType: "0007",
		ProductID: "0008",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x007a,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x004e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008b,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New023000030001() *Device{
	return &Device{
		Brand: "ID Lock",
		Product: "ID Lock 101",
		Description: "\n            \n          ",

		ManufacturerID: "0230",
		ProductType: "0003",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0072,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0098,
				Secure: true,
			},
			&CommandClass{
				ID: 0x005a,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0080,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0073,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
			},
			&CommandClass{
				ID: 0x0086,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0062,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0063,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0085,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0059,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x0071,
				InNIF: "false",
				Secure: true,
			},
			&CommandClass{
				ID: 0x008a,
				InNIF: "false",
				Secure: true,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Door Lock Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable Away, Manual Lock",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Disable Away, Auto Lock",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Enable Away, Manual Lock",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Enable Away, Auto Lock",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "RFID Register Mode",
				Type: "constant",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Begin RFID Registering mode on the door lock",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "RFID Database clear",
						Unit: "",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "RFID Registering mode stop",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Door Hinge Position Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Right",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Left",
						Unit: "",
					},
				},
			},
		},
	}
}
func New02340003010a() *Device{
	return &Device{
		Brand: "Z-Home Control",
		Product: "Z-Wave switch module for FUGA® installations",
		Description: "\n            \n          ",

		ManufacturerID: "0234",
		ProductType: "0003",
		ProductID: "010a",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0028,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005b,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0087,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Upper paddle buttons mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separate mode (toggle mode).",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair mode, left side sends on/up commands, right side sends off/down commands.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Lower paddle buttons mode.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Separate mode (toggle mode).",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "In pair mode, left side sends on/up commands, right side sends off/down commands.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "LED #1 mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED indication is disabled (LED can be controlled by Indicator Command Class Set commands).",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED indicates the status of the corresponding button.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "LED indicates the status of the corresponding button, with inverted indication.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "LED indicates the status of corresponding paddle (in pair mode).",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "LED indicates the status of the corresponding paddle (in pair mode), with inverted indication.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "LED indicates the status of the built-in relay.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "LED indicates the status of the built-in relay, with inverted indication.",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "LED show a 5 seconds indication when the corresponding button is pressed.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "LED #2 mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED indication is disabled (LED can be controlled by Indicator Command Class Set commands).",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED indicates the status of the corresponding button. (Default)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "LED indicates the status of the corresponding button, with inverted indication.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "LED indicates the status of corresponding paddle (in pair mode).",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "LED indicates the status of the corresponding paddle (in pair mode), with inverted indication.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "LED indicates the status of the built-in relay.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "LED indicates the status of the built-in relay, with inverted indication.",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "LED show a 5 seconds indication when the corresponding button is pressed.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "LED #3 mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED indication is disabled (LED can be controlled by Indicator Command Class Set commands).",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED indicates the status of the corresponding button.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "LED indicates the status of the corresponding button, with inverted indication.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "LED indicates the status of corresponding paddle (in pair mode).",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "LED indicates the status of the corresponding paddle (in pair mode), with inverted indication.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "LED indicates the status of the built-in relay.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "LED indicates the status of the built-in relay, with inverted indication.",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "LED show a 5 seconds indication when the corresponding button is pressed.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "LED #4 mode.",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED indication is disabled (LED can be controlled by Indicator Command Class Set commands).",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED indicates the status of the corresponding button.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "LED indicates the status of the corresponding button, with inverted indication.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "LED indicates the status of corresponding paddle (in pair mode).",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "LED indicates the status of the corresponding paddle (in pair mode), with inverted indication.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "LED indicates the status of the built-in relay.",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "LED indicates the status of the built-in relay, with inverted indication.",
						Unit: "",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "LED show a 5 seconds indication when the corresponding button is pressed.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "LED #1 brightness level.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "LED #2 brightness level.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "LED #3 brightness level.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "LED #4 brightness level.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "LED #1 off brightness level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "LED #2 off brightness level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "LED #3 off brightness level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "LED #4 off brightness level",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 100,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "Relay mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Relay is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Relay is controlled by button #1 or by upper paddle when pair mode is active.",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Relay is controlled by button #2 or by upper paddle when pair mode is active.",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Relay is controlled by button #3 or by lower paddle when pair mode is active.",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Relay is controlled by button #4 or by lower paddle when pair mode is active.",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Relay is activated for one second and is controlled by button #1 or by upper paddle when pair mode is active.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "Indicator mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Indicator Set level values are only used to control the LED.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Indicator Set level values are also used by internal LED activations.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Scene notification offset",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Scene notifications are turned off.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 201,
						Desc: "Define a value.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Disable House Cleaning Mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "House Cleaning Mode is enabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "House Cleaning Mode is disabled; double-press button scene notifications will be disabled too.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Multilevel Switch on single press for device 1 (button #1)",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 20,
				Name: "Multilevel Switch on single press for device 2",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 21,
				Name: "Multilevel Switch on single press for device 3 (button #3)",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 22,
				Name: "Multilevel Switch on single press for device 4 (button #4)",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 23,
				Name: "Control of association groups for device 1 (button #1)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "When commands are received by device 1, nodes in the association groups will not be switched, button activations will still send switch values.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "When commands are received by device 1, nodes in the association groups will be switched.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "Control of association groups for device 2 (button #2)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "When commands are received by device 2, nodes in the association groups will not be switched, button activations will still send switch values.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "When commands are received by device 2, nodes in the association groups will be switched.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "Control of association groups for device 3 (button #3)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "When commands are received by device 3, nodes in the association groups will not be switched, button activations will still send switch values.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "When commands are received by device 2, nodes in the association groups will be switched.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "Control of association groups for device 4 (button #4)",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "When commands are received by device 4, nodes in the association groups will not be switched, button activations will still send switch values.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "When commands are received by device 4, nodes in the association groups will be switched.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New023800030004() *Device{
	return &Device{
		Brand: "Milan",
		Product: "Milan Infoway",
		Description: "\n            \n          ",

		ManufacturerID: "0238",
		ProductType: "0003",
		ProductID: "0004",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0045,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0042,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New023900010001() *Device{
	return &Device{
		Brand: "Stelpro",
		Product: "Z-Wave Plus Line-Volt Thermostat",
		Description: "\n            \n          ",

		ManufacturerID: "0239",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0042,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New023c00010002() *Device{
	return &Device{
		Brand: "Safetech Products",
		Product: "The Doorlock",
		Description: "\n            \n          ",

		ManufacturerID: "023c",
		ProductType: "0001",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0062,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0063,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "4",
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New024000010001() *Device{
	return &Device{
		Brand: "Technicolor",
		Product: "Ize Extender",
		Description: "\n            \n          ",

		ManufacturerID: "0240",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0033,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "7",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0035,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New0244ba5e0001() *Device{
	return &Device{
		Brand: "Athom",
		Product: "Homey",
		Description: "\n            \n          ",

		ManufacturerID: "0244",
		ProductType: "ba5e",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0022,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "8",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New024500030001() *Device{
	return &Device{
		Brand: "permundo",
		Product: "Smart Plug",
		Description: "\n            \n          ",

		ManufacturerID: "0245",
		ProductType: "0003",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 31,
				Name: "Local Control",
				Type: "bitrange",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LocalControlOFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 7,
						Desc: "0",
						Unit: "",
					},
				},
			},
		},
	}
}
func New024500030002() *Device{
	return &Device{
		Brand: "permundo",
		Product: "Smart Mini Plug",
		Description: "\n            \n          ",

		ManufacturerID: "0245",
		ProductType: "0003",
		ProductID: "0002",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Send Meter Report Enable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable Report",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable Report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Meter Report Interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "Define a time interval. Range is from 1 to 65535.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Configure maximum over-load current",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 16,
						Desc: "Set the upper current threshold.",
						Unit: "A",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Configure maximum Alarm current",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 15,
						Desc: "Set a treshold.",
						Unit: "A",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Led Display Enable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable LED.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable LED.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Configure power report",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Define a value for reports to be triggered.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Remember Relay ON/OFF status",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Don’t Remember, the relay will keep OFF when Plug Supply Power",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "Remember the Relay Status",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Configure Plug Time switch Function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Time switch Disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Time switch Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Configure Time switch Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "Define a time interval.",
						Unit: "min",
					},
				},
			},
		},
	}
}
func New024700420001() *Device{
	return &Device{
		Brand: "LG UPLUS",
		Product: "Smart Plug",
		Description: "\n            \n          ",

		ManufacturerID: "0247",
		ProductType: "0042",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x008b,
			},
			&CommandClass{
				ID: 0x0032,
				Version: "3",
			},
			&CommandClass{
				ID: 0x007a,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0070,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0025,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
				NonSecure: false,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Standby Power Settings",
				Type: "rangemapped",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 2,
				Name: "Periodic Measurement Value Transmission",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Periodic Measurement Value Transmission disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Periodic Measurement Value Transmission Enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Power Accumulation",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Power Accumulation Stop",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Power Accumulation Start",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Connected Device",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Connected Device Not Use",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Connected Device Use",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Periodic Measurement Value Transmission Interval",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 145,
						Desc: "Define a time interval.",
						Unit: "x 10 min",
					},
				},
			},
		},
	}
}
func New024800010001() *Device{
	return &Device{
		Brand: "coqon",
		Product: "coqon qbox",
		Description: "\n            \n          ",

		ManufacturerID: "0248",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0055,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0023,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005f,
			},
			&CommandClass{
				ID: 0x0061,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x004d,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0052,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0067,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0069,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0034,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0052,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New024a01020304() *Device{
	return &Device{
		Brand: "BTSTAR",
		Product: "Gateway",
		Description: "\n            \n          ",

		ManufacturerID: "024a",
		ProductType: "0102",
		ProductID: "0304",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0033,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "7",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New024b01000001() *Device{
	return &Device{
		Brand: " EchoLife",
		Product: " LS1015",
		Description: "\n            \n          ",

		ManufacturerID: "024b",
		ProductType: "0100",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New024d00010001() *Device{
	return &Device{
		Brand: "Z-Works",
		Product: "LiveConnect Center",
		Description: "\n            \n          ",

		ManufacturerID: "024d",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New024d47610001() *Device{
	return &Device{
		Brand: "Z-Works Inc.",
		Product: "施錠センサー",
		Description: "\n            \n          ",

		ManufacturerID: "024d",
		ProductType: "4761",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Secure: true,
				NonSecure: false,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0071,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Checking thumb turn status interval",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 30,
						To: 127,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "LED indicator for data transmission",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "LED indicator is always off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "LED indicator lights 1 second after thumb turn status close to open",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "LED indicator lights 1 second after thumb turn status open to close",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "LED indicator lights 1 second after changed thumb turn status",
						Unit: "",
					},
				},
			},
		},
	}
}
func New024f00010001() *Device{
	return &Device{
		Brand: "Smartly",
		Product: "Smartly Gateway",
		Description: "\n            \n          ",

		ManufacturerID: "024f",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "6",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New025800030082() *Device{
	return &Device{
		Brand: "CoolCam",
		Product: "Door/Window Detector",
		Description: "\n            \n          ",

		ManufacturerID: "0258",
		ProductType: "0003",
		ProductID: "0082",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "OFF Delay",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "Define a delay.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Basic Set Level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "OFF, Alarm cancelling or turning a device off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Dim Level (Multilevel Switch Device)",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ON (Binary Switch Device)",
						Unit: "",
					},
				},
			},
		},
	}
}
func New025800030083() *Device{
	return &Device{
		Brand: "CoolCam",
		Product: "PIR Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0258",
		ProductType: "0003",
		ProductID: "0083",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0031,
				Version: "7",
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Sensitivity Level Setting",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 4,
						Desc: "Define a sensitivity level.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "On/Off Duration",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 5,
						To: 600,
						Desc: "Define how long the associated devices should stay on.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Basic Set Level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "OFF, Alarm cancelling or turning a device off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "ON. Define a dim level.",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ON",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "PIR Detecting Function Enabled/Disabled",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable PIR Detector Function",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Enable PIR Detector Function",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Ambient Illumination Lux Level",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1000,
						Desc: "Define a lux level.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Re-trigger Interval Setting",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 7,
				Name: "Light Sensor Polling Interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 60,
						To: 36001,
						Desc: "Define an interval time.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Lux Level Function Enable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Ambient Illumination Lux Level Report",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 0,
						To: 1000,
						Desc: "Define a treshold.",
						Unit: "lux",
					},
				},
			},
		},
	}
}
func New025800030085() *Device{
	return &Device{
		Brand: "CoolCam",
		Product: "Water Leakage Detector",
		Description: "\n            \n          ",

		ManufacturerID: "0258",
		ProductType: "0003",
		ProductID: "0085",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Configuring Alarm Duration Time",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "beep and LED will be turn on\nalways",
						Unit: "",
					},
					Value{
						From: 1,
						To: 255,
						Desc: "define time interval",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Configure Alarm Interval",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 255,
						Desc: "define time interval",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Configure First Alarm On Time Duration",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 10,
						To: 255,
						Desc: "define time interval",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Configure Alarm on Time Duration",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 5,
						To: 255,
						Desc: "define time interval",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Configure Alarm Enable/Disable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "beep is disable; LED will be turned on",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "BEEP and LED will be turned on",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Configure Water Leakage Detected Enable/Disable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "function disabled",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "function enabled",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Basic Set Level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "define Basic Set value",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "on",
						Unit: "",
					},
				},
			},
		},
	}
}
func New025800030087() *Device{
	return &Device{
		Brand: "CoolCam",
		Product: "Wall Plug",
		Description: "\n            \n          ",

		ManufacturerID: "0258",
		ProductType: "0003",
		ProductID: "0087",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Meter Report",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Disable Report",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable Report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Meter Report Interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "Define a time interval. Range is from 1 to 65535 seconds.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Maximum Over-load Current",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 16,
						Desc: "Set the upper current threshold.",
						Unit: "A",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Maximum Alarm Current",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 15,
						Desc: "Set Alarm upper current threshold.",
						Unit: "A",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Led Display Enable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Diasable LED function.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Enable LED function.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Power Report",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Define a treshold.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Relay ON/OFF Status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Relay won&#39;t remember last status.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Remember the Relay Status.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Plug Time Switch Function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Time switch is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Time switch is enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Time switch Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "Define a time interval.",
						Unit: "min",
					},
				},
			},
		},
	}
}
func New025800031082() *Device{
	return &Device{
		Brand: "CoolCam",
		Product: "Door/Window Detector",
		Description: "\n            \n          ",

		ManufacturerID: "0258",
		ProductType: "0003",
		ProductID: "1082",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Configuring the OFF Delay",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Basic Set Level",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "OFF, Alarm cancelling or turning a device off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 99,
						Desc: "Dim Level (Multilevel Switch Device)",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "ON (Binary Switch Device)",
						Unit: "",
					},
				},
			},
		},
	}
}
func New025800031087() *Device{
	return &Device{
		Brand: " CoolCam",
		Product: "Wall Plug",
		Description: "\n            \n          ",

		ManufacturerID: "0258",
		ProductType: "0003",
		ProductID: "1087",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0032,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0020,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Send Meter Report Enable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable report",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "enable report",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Meter Report Interval",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "Define a time interval.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "Configure maximum over‐load current.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 16,
						Desc: "Set the upper current threshold.",
						Unit: "A",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "Configure maximum Alarm current.",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 15,
						Desc: "Set Alarm upper current threshold.",
						Unit: "A",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Led Display Enable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Function enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "Configure report by Current Changed",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 100,
						Desc: "Define a treshold.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "Remember Relay ON/OFF status",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Don’t Remember, the relay will keep OFF when Plug Supply Power.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Remember the Relay Status.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "Configure Plug Time switch Function",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Time switch disable.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Time switch enable.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "Configure Time switch Period",
				Type: "range",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 65535,
						Desc: "Define a time interval.",
						Unit: "min",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "Button On/Off Enable",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Function is disabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Function is enabled.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New025d01000100() *Device{
	return &Device{
		Brand: "Contec intelligent housing",
		Product: "Da Vinci Wall Controller",
		Description: "\n            \n          ",

		ManufacturerID: "025d",
		ProductType: "0100",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x005b,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "EP 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "EP 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "EP 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "EP 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "EP 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "EP 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "EP 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "EP 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "EP 3",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "EP 3",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "EP 3",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "EP 3",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "EP 4",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "EP 4",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "EP 4",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "EP 4",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "EP 5",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "EP 5",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "EP 5",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "EP 5",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "EP 6",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "EP 6",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "EP 6",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "EP 6",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "EP 7",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "EP 7",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "EP 7",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 28,
				Name: "EP 7",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 29,
				Name: "EP 8",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "EP 8",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "EP 8",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "EP 8",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "EP 9",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "EP 9",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "EP 9",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 36,
				Name: "EP 9",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
		},
	}
}
func New025d02000100() *Device{
	return &Device{
		Brand: "Contec intelligent housing",
		Product: "Da Vinci Wall Controller",
		Description: "\n            \n          ",

		ManufacturerID: "025d",
		ProductType: "0200",
		ProductID: "0100",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x005b,
			},
			&CommandClass{
				ID: 0x0060,
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "EP 1",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "EP 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 3,
				Name: "EP 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 4,
				Name: "EP 1",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "EP 2",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 6,
				Name: "EP 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 7,
				Name: "EP 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 8,
				Name: "EP 2",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 9,
				Name: "EP 3",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 10,
				Name: "EP 3",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 11,
				Name: "EP 3",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 12,
				Name: "EP 3",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "EP 4",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 14,
				Name: "EP 4",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 15,
				Name: "EP 4",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 16,
				Name: "EP 4",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "EP 5",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "EP 5",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "EP 5",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 20,
				Name: "EP 5",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 21,
				Name: "EP 6",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 22,
				Name: "EP 6",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "EP 6",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 24,
				Name: "EP 6",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 25,
				Name: "EP 7",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "EP 7",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "EP 7",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 28,
				Name: "EP 7",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 29,
				Name: "EP 8",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "EP 8",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 31,
				Name: "EP 8",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "EP 8",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "EP 9",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "on/off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "blind up",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "blind down",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 34,
				Name: "EP 9",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 9,
						Desc: "EP as Partner ID",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "EP 9",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 3,
						To: 127,
						Desc: "Duration",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 36,
				Name: "EP 9",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 6,
						Desc: "Relay Output",
						Unit: "",
					},
				},
			},
		},
	}
}
func New026001680168() *Device{
	return &Device{
		Brand: "HEIMAN",
		Product: "Door Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0260",
		ProductType: "0168",
		ProductID: "0168",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New026080011000() *Device{
	return &Device{
		Brand: "HEIMAN",
		Product: "Motion Sensor",
		Description: "\n            \n          ",

		ManufacturerID: "0260",
		ProductType: "8001",
		ProductID: "1000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0084,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0030,
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New027200010001() *Device{
	return &Device{
		Brand: "Dune HD",
		Product: "Dune HD Solo 4K",
		Description: "\n            \n          ",

		ManufacturerID: "0272",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "4",
			},
			&CommandClass{
				ID: 0x008f,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0081,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0098,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0026,
			},
			&CommandClass{
				ID: 0x0025,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x008a,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0077,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0073,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				Version: "3",
			},
			&CommandClass{
				ID: 0x005a,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x009c,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0066,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0030,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0033,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0021,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x004c,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x007a,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0082,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0087,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0032,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x003d,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "9",
			},
			&CommandClass{
				ID: 0x0071,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0075,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0035,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x002c,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x002d,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x004e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x009e,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0094,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0044,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x0045,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0040,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0042,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x008b,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0063,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New027601390001() *Device{
	return &Device{
		Brand: "Systemair",
		Product: "Remotely Controlled Ventilation",
		Description: "\n            \n          ",

		ManufacturerID: "0276",
		ProductType: "0139",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0044,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0071,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x007a,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0020,
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "System Type (read-only)",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 2,
				Name: "Filter - Period (read-only)",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "Filter - Days Used (read-only)",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 4,
				Name: "Boost Mode Remaining Time (read-only)",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 5,
				Name: "Temperature Setpoint Step (read-only)",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 6,
				Name: "CDx New Firmware Version Available",
				Type: "bitset",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 7,
				Name: "PCU-ECx New Firmware Version Available",
				Type: "bitset",
				Size: 4,
				Values: []Value{
				},
			},
		},
	}
}
func New027700010001() *Device{
	return &Device{
		Brand: "Pixela Corporation",
		Product: "Sensor Gateway",
		Description: "\n            \n          ",

		ManufacturerID: "0277",
		ProductType: "0001",
		ProductID: "0001",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0055,
			},
			&CommandClass{
				ID: 0x0056,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0022,
			},
			&CommandClass{
				ID: 0x0098,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x004d,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0052,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0067,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x007a,
				Secure: true,
				NonSecure: false,
				Version: "3",
			},
			&CommandClass{
				ID: 0x0069,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0034,
				Secure: true,
				NonSecure: false,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0059,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0080,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0033,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0062,
				Controlled: "true",
				InNIF: "false",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				InNIF: "false",
				Version: "4",
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				InNIF: "false",
				Version: "3",
			},
			&CommandClass{
				ID: 0x0031,
				Controlled: "true",
				InNIF: "false",
				Version: "5",
			},
			&CommandClass{
				ID: 0x0026,
				Controlled: "true",
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New52540000531e() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "Z-URC 550 US",
		Description: "\n            \n            \n          ",

		ManufacturerID: "5254",
		ProductType: "0000",
		ProductID: "531e",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0021,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x002c,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New525400008510() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "BW8510US",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "0000",
		ProductID: "8510",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0021,
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New5254000103e9() *Device{
	return &Device{
		Brand: "Homescenario",
		Product: "HSK-100Z AV Scenario Controller",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "0001",
		ProductID: "03e9",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0021,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002c,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0094,
				Controlled: "true",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New525400018332() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "Z-URC™ 550EU",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "0001",
		ProductID: "8332",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
				InNIF: "false",
			},
			&CommandClass{
				ID: 0x0021,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x008e,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0027,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0070,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0000,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002b,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x002c,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0094,
				Controlled: "true",
				Version: "4",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New525400018380() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "ZRC-100",
		Description: "\n            \n            \n          ",

		ManufacturerID: "5254",
		ProductType: "0001",
		ProductID: "8380",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0021,
			},
			&CommandClass{
				ID: 0x0084,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x002d,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New525400018510() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "BW8510EU",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "0001",
		ProductID: "8510",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0021,
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New5254000b8510() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "BW8510CN",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "000b",
		ProductID: "8510",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x005e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0021,
			},
			&CommandClass{
				ID: 0x0084,
				Controlled: "true",
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0059,
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x005b,
				Controlled: "true",
				Version: "2",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New525401008371() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "ZXT-310US",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "0100",
		ProductID: "8371",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0094,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 2,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 3,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 4,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 5,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 6,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 7,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 8,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 9,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 10,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 11,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 12,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 13,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 14,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 15,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 16,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 17,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 18,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 19,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 20,
				Name: "UIRD formatted raw data\nfor the Simple AV\ncommand number or key\nbeing downloaded or\nuploaded; \n\nParameter value depends on IR\ncode data",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 21,
				Name: "Simple AV Command Key",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 22,
				Name: "Download Status Register",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "IR channel\nidle",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "OK",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Downloading",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Command\nFull",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Operation\nFail",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 23,
				Name: "Reserved",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 24,
				Name: "Reserved",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 25,
				Name: "The Simple AV command number or key going to be learned",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 26,
				Name: "Learning status register",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "IR channel\nidle",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "OK",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Downloading",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Command\nFull",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Operation\nFail",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "IR code number for built-in code library",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 28,
				Name: "External IR Emitter power level",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "normal\npower mode",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "high power\nmode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 29,
				Name: "IR output port routing",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Route IR\noutput from this ZWave-\nto-IR\nchannel to IR Port 1",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Route IR\noutput from this ZWave-\nto-IR\nchannel to IR Port 2",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Route IR\noutput from this ZWave-\nto-IR\nchannel to IR Port 3",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Route IR\noutput from this ZWave-\nto-IR\nchannel to IR Port 4",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Route IR\noutput from this ZWave-\nto-IR\nchannel to IR Port 5",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Route IR\noutput from this ZWave-\nto-IR\nchannel to IR Port 6",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 30,
				Name: "Reserved",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 31,
				Name: "IR transmission mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Continuous\nIR transmission\nmode",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "Single shot\nIR transmission\nmode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Reserved",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 33,
				Name: "Reserved",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 34,
				Name: "Reserved",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 35,
				Name: "Reserved",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 36,
				Name: "Check Library Version (Read Only)",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 37,
				Name: "Reserved",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 38,
				Name: "End point selection control",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "Endpoint 1",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Endpoint 2",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "Endpoint 3",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Endpoint 4",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "Endpoint 5",
						Unit: "",
					},
					Value{
						From: 6,
						To: 6,
						Desc: "Endpoint 6",
						Unit: "",
					},
				},
			},
		},
	}
}
func New525401018371() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "ZXT-310EU",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "0101",
		ProductID: "8371",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0070,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0094,
				Version: "4",
			},
			&CommandClass{
				ID: 0x0060,
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Parameter 1 to 20",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 21,
				Name: "These two bytes represent the Simple AV Command Number associated with\nthe 80-bytes UIRD data going to be downloaded to ZXT-310.\nFor example, user wants to set up an IR code for “Volume Down” and he has\nthe IR control code in UIRD format. He would send the Simple AV Command\nNumber, “0x0002”, using Parameter Number 21 to ZXT-310. Afterward, he\nwould use Parameter Number 1 to 20 to transfer the corresponding URID data.",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 22,
				Name: "Download status register (Read only)\n0000 0000: Idle - this IR channel is idle\n0000 0001: OK - previous download is processed correctly\n0000 0010: Downloading - ZXT-310 is busy processing previous download\ncommand\n0000 0011: Full - UIRD data area of this IR channel is full. Each IR channel\nsupports up to 64 learned or downloaded Simple AV command numbers or\nkeys. It means that all locations are being used\n0000 0100 : Failed - latest download process failed",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 25,
				Name: "These two bytes represent the Simple AV Command Number or key going to\nbe learned. For example, user wants to learn the IR code for “Volume Down” of his TV set.\nHe would send the Simple AV Command Number, “0x0002”, to ZXT-310 using\nParameter Number 25. The status LED on ZXT-310 will turn on and stay on\nindicating it is in IR-learning mode. Gateway and Controller developers should\npoll the “Learning status register” (Parameter Number 26), and instruct end\nuser to press and hold the “Volume Down” button of his original remote control\nfor a few seconds. ZXT-310 will flash the status LED twice if the operation is\nsuccessful. It will flash the status LED six times if it fails to learn the IR code or\nit doesn’t receive any IR signal for 15 seconds.",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 26,
				Name: "Learning status register (Read only)\n0000 0000: Idle - this IR channel is idle\n0000 0001: OK - latest learning process completed correctly\n0000 0010: Learning - ZXT-310 is busy processing previous learning request.\n0000 0011: Full - UIRD data area of this IR channel is full. Each IR channel\ncan supports up to 64 learned or downloaded Simple AV command numbers or\nkeys. It means that all locations are being used\n0000 0100: Failed - latest learning request failed",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 27,
				Name: "IR code number of the built-in code library to be loaded to the “Simple AV\nCommand Number to IR control code” mapping table",
				Type: "constant",
				Size: 2,
				Values: []Value{
				},
			},
			&parameter{
				ID: 28,
				Name: "IR transmission power level\n0x00: normal power mode\n0xFF: high power mode (default)\nIf IR output port routing is set to 1, IR transmission power level cannot be changed",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 29,
				Name: "IR output port routing\n0x06: Route IR output from this Z-Wave-to-IR channel to IR Port 6\n0x05: Route IR output from this Z-Wave-to-IR channel to IR Port 5\n0x04: Route IR output from this Z-Wave-to-IR channel to IR Port 4 0x03: Route IR output from this Z-Wave-to-IR channel to IR Port 3\n0x02: Route IR output from this Z-Wave-to-IR channel to IR Port 2\n0x01: Route IR output from this Z-Wave-to-IR channel to IR Port 1 (default)",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 31,
				Name: "IR transmission mode\n0x00: Continuous IR transmission mode (default)\n0xFF: Single shot IR transmission mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 36,
				Name: "Check Library Version (Read Only)\nByte 1 &amp; 2 : Firmware Version\nByte 3 &amp; 4 : Library Version",
				Type: "constant",
				Size: 4,
				Values: []Value{
				},
			},
			&parameter{
				ID: 38,
				Name: "End point selection control\n0x01: end point 1 (default)\n0x02: end point 2\n0x03: end point 3\n0x04: end point 4\n0x05: end point 5\n0x06: end point 6\nNote: For controllers that do not support “multi-channel command class”, ZXT-310 will\ndirect all received Z-Wave commands to Z-Wave-to-IR channel 1 or EP1 (the default\nchannel). If controller developers want to support multiple AV equipment without\n“multi-channel command class” support, they can use this configuration command to\nselect another active Z-Wave-to-IR channel. For example, controller would like to send\ncommand to Z-Wave-to-IR channel 3. It should send a configuration command with\nparameter 38 and data 0x03h making channel 3 as the active channel first, and then,\nsend the desired command.",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
func New525401018377() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "ZXT-120EU",
		Description: "\n            \n            \n          ",

		ManufacturerID: "5254",
		ProductType: "0101",
		ProductID: "8377",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0044,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0072,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 25,
				Name: "Indicate a location for IR code  learning and start learning",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "OFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "ON (resume)",
						Unit: "",
					},
					Value{
						From: 2,
						To: 11,
						Desc: "19°C cool - 28°C cool",
						Unit: "",
					},
					Value{
						From: 12,
						To: 21,
						Desc: "19°C heat - 28°C heat",
						Unit: "",
					},
					Value{
						From: 22,
						To: 22,
						Desc: "Dry mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "Learning status register",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Idle - this IR channel is idle",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "OK - the latest learning process successful and completed",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Learning - the ZXT-120 is busy processing previous learning request",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Failed - the latest learning request failed",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "IR code number for built-in  code library ",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 28,
				Name: "External IR Emitter power  level ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "normal power mode",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "high power mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Surround IR control",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable Surround IR Emitters",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "enable Surround IR Emitters",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "AC function &#34;Swing&#34; control",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "SWING OFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "SWING AUTO",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "Learn location status",
				Type: "bitset",
				Size: 4,
				Values: []Value{
				},
			},
		},
	}
}
func New525401078377() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "ZXT-120IL",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "0107",
		ProductID: "8377",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0040,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0043,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0044,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 25,
				Name: "IR code",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 22,
						Desc: "location for IR code",
						Unit: "1",
					},
				},
			},
			&parameter{
				ID: 26,
				Name: "Learning Status register",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Idle",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "OK - the latest learning process successful and complete",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "Learning - The ZXT is busy",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "Failed",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 27,
				Name: "IR code number",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Please refer to the &#34;code list&#34;",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 28,
				Name: "External IR Emitter power level",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "normal power mode",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "High power mode",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 32,
				Name: "Surround IR control",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "disable surround IR emitters",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "enable surround IR emitters",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 33,
				Name: "AC function &#34;SWING&#34; control",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "SWING OFF",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "SWING AUTO",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 35,
				Name: "Learn location status",
				Type: "bitset",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 1,
						Desc: "On (resume)",
						Unit: "Bit",
					},
					Value{
						From: 7,
						To: 7,
						Desc: "24°C cool",
						Unit: "Bit",
					},
					Value{
						From: 8,
						To: 8,
						Desc: "25°C cool",
						Unit: "Bit",
					},
					Value{
						From: 12,
						To: 12,
						Desc: "19°C heat",
						Unit: "Bit",
					},
					Value{
						From: 16,
						To: 16,
						Desc: "23°C heat",
						Unit: "Bit",
					},
				},
			},
			&parameter{
				ID: 37,
				Name: "Sensor temperature compensation",
				Type: "rangemapped",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "0°C",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "1°C",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "2°C",
						Unit: "",
					},
					Value{
						From: 3,
						To: 3,
						Desc: "3°C",
						Unit: "",
					},
					Value{
						From: 4,
						To: 4,
						Desc: "4°C",
						Unit: "",
					},
					Value{
						From: 5,
						To: 5,
						Desc: "5°C",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "-1°C",
						Unit: "",
					},
					Value{
						From: 254,
						To: 254,
						Desc: "-2°C",
						Unit: "",
					},
					Value{
						From: 253,
						To: 253,
						Desc: "-3°C",
						Unit: "",
					},
					Value{
						From: 252,
						To: 252,
						Desc: "-4°C",
						Unit: "",
					},
					Value{
						From: 251,
						To: 251,
						Desc: "-5°C",
						Unit: "",
					},
				},
			},
		},
	}
}
func New525402008030() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "ZTS-100US",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "0200",
		ProductID: "8030",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0081,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0044,
			},
			&CommandClass{
				ID: 0x0045,
			},
			&CommandClass{
				ID: 0x0040,
			},
			&CommandClass{
				ID: 0x0042,
			},
			&CommandClass{
				ID: 0x0047,
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New525410008140() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "ZRP-100US ",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "1000",
		ProductID: "8140",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New52544d534331() *Device{
	return &Device{
		Brand: "SCHLAGE",
		Product: "Schlage LiNK Split-System Air Conditioning Controller",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "4d53",
		ProductID: "4331",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0080,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0031,
			},
			&CommandClass{
				ID: 0x0044,
			},
			&CommandClass{
				ID: 0x0040,
			},
			&CommandClass{
				ID: 0x0043,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "IR Library Code Number",
				Type: "rangemapped",
				Size: 2,
				Values: []Value{
					Value{
						From: 1,
						To: 73,
						Desc: "Please refer to Manual Appendix: Code List",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 2,
				Name: "Swing Control",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Swing Off",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Swing On",
						Unit: "",
					},
				},
			},
		},
	}
}
func New525480010000() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "Switch Module",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "8001",
		ProductID: "0000",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0000,
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New525480018020() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "ZRM-80SA ",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "8001",
		ProductID: "8020",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0025,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x008e,
				Version: "2",
			},
			&CommandClass{
				ID: 0x005a,
			},
			&CommandClass{
				ID: 0x0060,
				Controlled: "true",
				Version: "3",
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "All On/All Off",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All On is not active,\nAll Off is not active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All On is not active,\nAll Off active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All On active,\nAll Off is not active",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "All On active,\nAll Off active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Switch state after power failure",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch does not save the\nstate after power failure, it returns to\n&#34;off&#34; position.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch saves its state\nbefore power failure.",
						Unit: "",
					},
				},
			},
		},
	}
}
func New525482008130() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "ZDS-200US",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "8200",
		ProductID: "8130",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "All On/All Off",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 255,
						To: 255,
						Desc: "All On active,\nAll Off active",
						Unit: "",
					},
					Value{
						From: 0,
						To: 0,
						Desc: "All On is not active,\nAll Off is not active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All On is not active,\nAll Off active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All On active,\nAll Off is not active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Switch fail safe ",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch does not save\nthe state after power failure, it\nreturns to &#34;off&#34; position.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch saves its state\nbefore power failure.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Double click option",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Double click function\ndisabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Double click function enabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Dimmer Mode",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 5,
						Desc: "Adjust time interval for dimmer to reach full dimming values. ",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Maximum Dimmer level control",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 2,
						To: 99,
						Desc: "Define maximum dimmer level.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Minimum Dimmer level control",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 98,
						Desc: "Define minimum level.",
						Unit: "%",
					},
				},
			},
		},
	}
}
func New525482010200() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "Dimming Switch Module",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "8201",
		ProductID: "0200",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0000,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0025,
				InNIF: "false",
			},
		},
		Parameters: []*parameter{
		},
	}
}
func New525482018021() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "ZDM-80SA ",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "8201",
		ProductID: "8021",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
				Controlled: "true",
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x002b,
			},
			&CommandClass{
				ID: 0x002c,
			},
			&CommandClass{
				ID: 0x0073,
			},
			&CommandClass{
				ID: 0x0086,
			},
			&CommandClass{
				ID: 0x0025,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "All On/All Of",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "All On is not active,\nAll Off is not active",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "All On is not active,\nAll Off active",
						Unit: "",
					},
					Value{
						From: 2,
						To: 2,
						Desc: "All On active,\nAll Off is not active",
						Unit: "",
					},
					Value{
						From: 255,
						To: 255,
						Desc: "All On active,\nAll Off active",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 5,
				Name: "Switch state after power failure",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Switch does not save\nthe state after power failure, it\nreturns to &#34;off&#34; position.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Switch saves its state\nbefore power failure.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 13,
				Name: "Double click option",
				Type: "constant",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 0,
						Desc: "Double click function\ndisabled.",
						Unit: "",
					},
					Value{
						From: 1,
						To: 1,
						Desc: "Double click function\nenabled.",
						Unit: "",
					},
				},
			},
			&parameter{
				ID: 17,
				Name: "Dimming time frame",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 0,
						To: 5,
						Desc: "Define time frame.",
						Unit: "sec",
					},
				},
			},
			&parameter{
				ID: 18,
				Name: "Maximum Dimmer level control",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 2,
						To: 99,
						Desc: "Define dimming level.",
						Unit: "%",
					},
				},
			},
			&parameter{
				ID: 19,
				Name: "Minimum Dimmer level control",
				Type: "range",
				Size: 1,
				Values: []Value{
					Value{
						From: 1,
						To: 98,
						Desc: "Define dimming level.",
						Unit: "%",
					},
				},
			},
		},
	}
}
func New525482018120() *Device{
	return &Device{
		Brand: "Remotec",
		Product: "ZFM-X10EU",
		Description: "\n            \n          ",

		ManufacturerID: "5254",
		ProductType: "8201",
		ProductID: "8120",
		CommandClasses: []*CommandClass{
			&CommandClass{
				ID: 0x0020,
			},
			&CommandClass{
				ID: 0x0027,
			},
			&CommandClass{
				ID: 0x0026,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0070,
			},
			&CommandClass{
				ID: 0x0085,
				Version: "2",
			},
			&CommandClass{
				ID: 0x0072,
			},
			&CommandClass{
				ID: 0x0086,
			},
		},
		Parameters: []*parameter{
			&parameter{
				ID: 1,
				Name: "Activate/Deactivate All On/All\nOff (value is 255 not 127 - due to library regulations we had to inser 127)",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 5,
				Name: "Switch returns to the last\nposition saved before power\nfailure",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 6,
				Name: "Select switch type",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 8,
				Name: "switch contacts and Off is active after opening switch contacts",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 13,
				Name: "Double click function disabled or enabled",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 17,
				Name: "Dimmer mode",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
			&parameter{
				ID: 25,
				Name: "select 2 or 3 wires system",
				Type: "constant",
				Size: 1,
				Values: []Value{
				},
			},
		},
	}
}
